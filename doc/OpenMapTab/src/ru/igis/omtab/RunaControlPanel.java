/*
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License");  you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 *
 * Copyright (C) 2004 Sorokin R.P. (sorokinru@iias.spb.su)
 * and Object-oriented Geoinformatics Systems Laboratory (http://niggis.iias.spb.su)
 * All Rights Reserved.
 */

package ru.igis.omtab;

import javax.swing.*;
import javax.swing.JSpinner.DefaultEditor;

import com.bbn.openmap.gui.*;
/**
 * Imbedded in OpenMapTab GUI for control of RuNA Object
 * @author ru
 */
public class RunaControlPanel extends OMToolComponent {
    
    /**
	 * Comment for <code>serialVersionUID</code>
	 */
	private static final long serialVersionUID = 1L;
	
	/** Creates new form RunaControlPanel */
    public RunaControlPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSpinnerModel = new SpinnerNumberModel(1d,0d,5d,0.1);
        jSpinner = new JSpinner(jSpinnerModel);
        jTextFieldClock = new javax.swing.JTextField();
        jCheckBoxRunTimer = new javax.swing.JCheckBox();
        jLabelTimeScale = new javax.swing.JLabel();
        jPanelTimeScale = new javax.swing.JPanel();
        jButtonTSUp = new javax.swing.JButton();
        jButtonTSDown = new javax.swing.JButton();
        jButtonRunScenario = new javax.swing.JButton();
        jButtonControlObject = new javax.swing.JButton();
        jButtonCommand = new javax.swing.JButton();

        jSpinner.setToolTipText("Seconds on Timer Tick");
        jSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
            	jSpinnerStateChanged(evt);
            }
        });
        ((DefaultEditor)jSpinner.getEditor()).getTextField().setColumns(3);
        add(jSpinner);

        jTextFieldClock.setColumns(10);
        jTextFieldClock.setToolTipText("Model Clock");
        add(jTextFieldClock);

        jCheckBoxRunTimer.setToolTipText("Run Timer");
        jCheckBoxRunTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxRunTimerActionPerformed(evt);
            }
        });

        add(jCheckBoxRunTimer);

        jLabelTimeScale.setText("1:1");
        jLabelTimeScale.setToolTipText("Time Scale");
        add(jLabelTimeScale);

        jPanelTimeScale.setLayout(new javax.swing.BoxLayout(jPanelTimeScale, javax.swing.BoxLayout.Y_AXIS));

        jButtonTSUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/igis/omtab/resources/n.gif")));
        jButtonTSUp.setToolTipText("Time Scale Up");
        jButtonTSUp.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButtonTSUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTSUpActionPerformed(evt);
            }
        });

        jPanelTimeScale.add(jButtonTSUp);

        jButtonTSDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/igis/omtab/resources/s.gif")));
        jButtonTSDown.setToolTipText("Time Scale Down");
        jButtonTSDown.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButtonTSDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTSDownActionPerformed(evt);
            }
        });

        jPanelTimeScale.add(jButtonTSDown);

        add(jPanelTimeScale);

        jButtonRunScenario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/igis/omtab/resources/Run.gif")));
        jButtonRunScenario.setToolTipText("Play Scenario");
        jButtonRunScenario.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonRunScenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunScenarioActionPerformed(evt);
            }
        });

        add(jButtonRunScenario);

        jButtonControlObject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/igis/omtab/resources/steer.gif")));
        jButtonControlObject.setToolTipText("Control Object");
        jButtonControlObject.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonControlObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonControlObjectActionPerformed(evt);
            }
        });

        add(jButtonControlObject);

        jButtonCommand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/igis/omtab/resources/Sound.gif")));
        jButtonCommand.setToolTipText("Execute Command");
        jButtonCommand.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCommandActionPerformed(evt);
            }
        });

        add(jButtonCommand);

    }//GEN-END:initComponents

    private void jButtonCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCommandActionPerformed
        try{
            String command = OMT.getCommand();
            if(command!=null){
                //System.out.println("Execute command: "+command);
                Util.execScenario(command);
            }
        } catch (Exception exc) {
            String mess = exc.getMessage();
            if(mess!=null)
                JOptionPane.showMessageDialog(this,exc.toString());
            else
                exc.printStackTrace();
        }
    }//GEN-LAST:event_jButtonCommandActionPerformed

    private void jSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTimerStateChanged
    	OMT.setUpdateInterval((int)getSliderInterval());
    }//GEN-LAST:event_jSliderTimerStateChanged

    private void jCheckBoxRunTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxRunTimerActionPerformed
    	OMT.setUpdateInterval((int)getSliderInterval());
        OMT.setTimerRunning(jCheckBoxRunTimer.isSelected(),false);
    }//GEN-LAST:event_jCheckBoxRunTimerActionPerformed

    private void jButtonTSUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTSUpActionPerformed
        if(den<2)
            num = num * 2;
        else
            den = den / 2;
        OMT.setTimeScale(num+":"+den);
    }//GEN-LAST:event_jButtonTSUpActionPerformed

    private void jButtonTSDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTSDownActionPerformed
        if(num<2)
            den = den * 2;
        else
            num = num / 2;
        OMT.setTimeScale(num+":"+den);
    }//GEN-LAST:event_jButtonTSDownActionPerformed

    private void jButtonRunScenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunScenarioActionPerformed
        try{
            String scenario = OMT.getScenario();
            if(scenario!=null){
                System.out.println("Run scenario: "+scenario);
                Util.execScenario(scenario);
            }
        } catch (Exception exc) {
            String mess = exc.getMessage();
            if(mess!=null)
                JOptionPane.showMessageDialog(this,exc.toString());
            else
                exc.printStackTrace();
        }
    }//GEN-LAST:event_jButtonRunScenarioActionPerformed

    private void jButtonControlObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonControlObjectActionPerformed
        OMT.cmdControlObject();
    }//GEN-LAST:event_jButtonControlObjectActionPerformed
    
    /**
     * Method to disable and enable time ticks slider
     * @param se - enable or disable slider
     */
    protected void setSliderEnabled(boolean se){
        jSpinner.setEnabled(se);
    }
    protected void setRunTimerSelected(boolean cbs){
        jCheckBoxRunTimer.setSelected(cbs);
    }
    /**
     * Method to set Clock field
     * @param c - text for Clock field
     */
    public void setClock(String c){
        jTextFieldClock.setText(c);
    }
    
    protected void updateTimeScaleText(String text){
    	jLabelTimeScale.setText(text);
    }
    
    /**
     * Method to get time interval between ticks in milliseconds
     * @return - milliseconds
     */
    public float getSliderInterval(){
        SpinnerNumberModel model = (SpinnerNumberModel) jSpinner.getModel();
        return (model.getNumber().floatValue()+0.001f) * 1000f;
    }

    /**
     * Standard Openmap method
     * @param obj -
     */
    public void findAndInit(Object obj) {
        if (obj instanceof OMT) {
        	System.out.println("Interface OMT found ...");
        }
    }
    
    /**
     * Standard Openmap method
     * @param obj -
     */
    public void findAndUndo(Object obj) {
        if (obj instanceof OMT) {
        }	
    }
   
    protected void disableDrivenGUI(){
    	jButtonTSDown.setEnabled(false);
    	jButtonTSUp.setEnabled(false);
    	jCheckBoxRunTimer.setEnabled(false);
    	jButtonCommand.setEnabled(false);
    	jButtonRunScenario.setEnabled(false);
    }

	private int num = 1;      // time scale numerator
    private int den = 1;      // time scale denominator;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCommand;
    private javax.swing.JButton jButtonControlObject;
    private javax.swing.JButton jButtonRunScenario;
    private javax.swing.JButton jButtonTSDown;
    private javax.swing.JButton jButtonTSUp;
    private javax.swing.JCheckBox jCheckBoxRunTimer;
    private javax.swing.JLabel jLabelTimeScale;
    private javax.swing.JPanel jPanelTimeScale;
    private javax.swing.SpinnerNumberModel jSpinnerModel;
    private javax.swing.JSpinner jSpinner;
    private javax.swing.JTextField jTextFieldClock;
    // End of variables declaration//GEN-END:variables
    
}
