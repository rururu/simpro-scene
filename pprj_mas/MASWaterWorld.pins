; Tue Dec 24 10:56:02 MSK 2019
; 
;+ (version "3.5")
;+ (build "Build 663")

([MASWaterWorld_Class0] of  MASProgram

	(cloFunctions
		[MASWaterWorld_Class4]
		[MASWaterWorld_Class5]
		[MASWaterWorld_Class10009]
		[MASWaterWorld_Class10016]
		[MASWaterWorld_Class30001]
		[MASWaterWorld_Class30002]
		[MASWaterWorld_Class30003]
		[MASWaterWorld_Class30012]
		[MASWaterWorld_Class30013])
	(cloNamespace [MASWaterWorld_Class1])
	(cloTypes
		[MASWaterWorld_Class10020]
		[MASWaterWorld_Class10024]
		[MASWaterWorld_Class20000]
		[MASWaterWorld_Class30006])
	(cloVars
		[MASWaterWorld_Class10030]
		[MASWaterWorld_Class10031]
		[MASWaterWorld_Class10028]
		[MASWaterWorld_Class30000]
		[MASWaterWorld_Class10027]
		[MASWaterWorld_Class10023]
		[MASWaterWorld_Class30010]
		[MASWaterWorld_Class30011]
		[MASWaterWorld_Class30004])
	(documentation [MASWaterWorld_Class40000])
	(title "WaterWorld"))

([MASWaterWorld_Class1] of  CloNamespace

	(source "(:import\n  sim.util.Bag\n  sim.engine.Steppable\n  sim.field.grid.Grid2D\n  sim.field.grid.ObjectGrid2D\n  sim.field.geo.GeomGridField\n  sim.field.geo.GeomGridField$GridDataType\n  sim.io.geo.ArcInfoASCGridImporter\n  sim.util.gui.SimpleColorMap\n  java.awt.Color\n  java.awt.Graphics2D\n  java.io.FileInputStream\n  java.util.zip.GZIPInputStream\n  sim.portrayal.grid.ObjectGridPortrayal2D\n  sim.portrayal.simple.RectanglePortrayal2D\n  sim.portrayal.DrawInfo2D\n  sim.display.Display2D)")
	(title "mas.world.water"))

([MASWaterWorld_Class10000] of  CloFuncall

	(source "(compile 'mas.world.water)"))

([MASWaterWorld_Class10009] of  CloFunction

	(source "(let [bst @basin]\n  (vswap! basin assoc\n    :drops (remove #{drop} (:drops bst))\n    :cumulative-height (- (:cumulative-height bst)\n                                     (:raindrop-factor bst))))")
	(title "remove-drop [basin drop]"))

([MASWaterWorld_Class10016] of  CloFunction

	(source "(doseq [drop drops]\n  (remove-drop basin drop))")
	(title "remove-drops [basin drops]"))

([MASWaterWorld_Class10020] of  CloType

	(cloProtocols [MASWaterWorld_Class10021])
	(fields "dstate")
	(title "Raindrop"))

([MASWaterWorld_Class10021] of  CloImplementation

	(cloFunctions [MASWaterWorld_Class10022])
	(title "sim.engine.Steppable"))

([MASWaterWorld_Class10022] of  CloFunction

	(source "(let [dst @dstate\n       basin (:basin dst)\n       stopper (:stopper dst)\n       bst @basin\n       loc-x (:loc-x bst)\n       loc-y (:loc-y bst)\n       my-height (:cumulative-height bst)\n       neighbors (Bag.)\n       _ (.getMooreNeighbors landscape loc-x loc-y 1 Grid2D/TOROIDAL true neighbors nil nil)\n       minheight (apply min (map #(get @% :cumulative-height) neighbors))]\n  (if (>= minheight my-height)\n    (if (or (= 0 loc-x) (= 0 loc-y) \n          (= loc-x (dec (.getWidth landscape))) \n          (= loc-y (dec (.getHeight landscape))))\n      (do (.stop stopper)\n        (remove-drop basin this)\n        (vreset! world-drops (remove #{this} @world-drops))))\n    (let [mins (filter #(= (:cumulative-height @%) minheight) neighbors)\n           idx (.nextInt (.random world) (count mins))\n           newbasin (nth mins idx)]\n      (remove-drop basin this)\n      (add-drop newbasin this)\n      (vswap! dstate assoc\n          :basin newbasin))))")
	(title "step [this world]"))

([MASWaterWorld_Class10023] of  CloVar

	(source "(volatile! [])")
	(title "world-drops"))

([MASWaterWorld_Class10024] of  CloType

	(cloProtocols [MASWaterWorld_Class10025])
	(title "Raincloud"))

([MASWaterWorld_Class10025] of  CloImplementation

	(cloFunctions [MASWaterWorld_Class10026])
	(title "sim.engine.Steppable"))

([MASWaterWorld_Class10026] of  CloFunction

	(source "(let [rnd (.random world)\n       sch (.schedule world)]\n  (dotimes [i NUM-DROPS-PER-TURN]\n    (let [x (.nextInt rnd GRID-WIDTH)\n           y (.nextInt rnd GRID-HEIGHT)\n           b (.get landscape x y)\n           ds (volatile! {:basin b})\n           d (Raindrop. ds)\n           s (.scheduleRepeating sch d)]\n      (vswap! ds assoc :stopper s)\n      (vreset! world-drops (cons d @world-drops))\n      (add-drop b d))))")
	(title "step [this world]"))

([MASWaterWorld_Class10027] of  CloVar

	(source "nil")
	(title "landscape"))

([MASWaterWorld_Class10028] of  CloVar

	(source "100")
	(title "NUM-DROPS-PER-TURN"))

([MASWaterWorld_Class10030] of  CloVar

	(source ";; 689\n;; 344\n100")
	(title "GRID-WIDTH"))

([MASWaterWorld_Class10031] of  CloVar

	(source ";; 257\n;; 128\n100")
	(title "GRID-HEIGHT"))

([MASWaterWorld_Class20000] of  CloType

	(cloProtocols [MASWaterWorld_Class20001])
	(title "WaterWorld"))

([MASWaterWorld_Class20001] of  CloImplementation

	(cloFunctions
		[MASWaterWorld_Class20002]
		[MASWaterWorld_Class20003]
		[MASWaterWorld_Class60000])
	(title "ru.igis.sim.IWorld"))

([MASWaterWorld_Class20002] of  CloFunction

	(source "(load \"mas/world/water\")")
	(title "initialise [this]"))

([MASWaterWorld_Class20003] of  CloFunction

	(source "(def landscape\n  (condp = LAND\n    \"FLAT\" (land-flat)\n    \"GRADIENT-IN\" (land-gradient-in)\n    (land-ele-data LAND)))\n(.scheduleRepeating (.schedule world) (Raincloud.))")
	(title "start [this world]"))

([MASWaterWorld_Class30000] of  CloVar

	(source ";; \"data/mas/water/gmted2010Vuoksi.asc.gz\"\n;; \"data/mas/water/gt30demVuoksi.asc.gz\"\n\"data/mas/water/elevation.txt.gz\"")
	(title "LAND"))

([MASWaterWorld_Class30001] of  CloFunction

	(source "(let [og2d (ObjectGrid2D. GRID-WIDTH GRID-HEIGHT)]\n  (dotimes [i GRID-WIDTH]\n    (dotimes [j GRID-HEIGHT]\n      (.set og2d i j \n        (volatile! {:loc-x i\n                        :loc-y j\n                        :base-height 0\n                        :cumulative-height 0\n                        :raindrop-factor 1}))))\n  og2d)")
	(title "land-flat []"))

([MASWaterWorld_Class30002] of  CloFunction

	(source "(let [og2d (ObjectGrid2D. GRID-WIDTH GRID-HEIGHT)\n       hwid (int (/ GRID-WIDTH 2))\n       hhei (int (/ GRID-HEIGHT 2))]\n  (dotimes [i GRID-WIDTH]\n    (dotimes [j GRID-HEIGHT]\n      (let [k1 (- i hwid)\n             k2 (- j hhei)\n             hei (int (Math/sqrt (+ (* k1 k1) (* k2 k2))))]\n        (.set og2d i j \n          (volatile! {:loc-x i\n                          :loc-y j\n                          :base-height hei\n                          :cumulative-height hei\n                          :raindrop-factor 1})))))\n  og2d)")
	(title "land-gradient-in []"))

([MASWaterWorld_Class30003] of  CloFunction

	(source "(let [efi (GeomGridField.)\n       ins (FileInputStream. LAND)\n       cin (GZIPInputStream. ins)\n       _ (ArcInfoASCGridImporter/read cin GeomGridField$GridDataType/INTEGER efi)\n       _ (def GRID-WIDTH (.getGridWidth efi))\n       _ (def GRID-HEIGHT (.getGridHeight efi))\n       og2d (ObjectGrid2D. GRID-WIDTH GRID-HEIGHT)\n       ele (.getGrid efi)]\n  (dotimes [x GRID-WIDTH]\n    (dotimes [y GRID-HEIGHT]\n      (let [hei (.get ele x y)]\n        (.set og2d x y \n          (volatile! {:loc-x x\n                          :loc-y y\n                          :base-height hei\n                          :cumulative-height hei\n                          :raindrop-factor 1})))))\n  og2d)")
	(title "land-ele-data [gz]"))

([MASWaterWorld_Class30004] of  CloVar

	(source "(declare\n  add-drop\n  remove-drop\n  land-flat\n  land-gradient-in\n  land-ele-data\n  create-display\n  setup-ports)")
	(title "declare-before"))

([MASWaterWorld_Class30006] of  CloType

	(cloProtocols [MASWaterWorld_Class30007])
	(title "WaterWorldPorts"))

([MASWaterWorld_Class30007] of  CloImplementation

	(cloFunctions
		[MASWaterWorld_Class30008]
		[MASWaterWorld_Class30009]
		[MASWaterWorld_Class50000])
	(title "ru.igis.sim.IPorts"))

([MASWaterWorld_Class30008] of  CloFunction

	(source "(create-display wgui world)")
	(title "createDisplay [this wgui world]"))

([MASWaterWorld_Class30009] of  CloFunction

	(source "(setup-ports display world)")
	(title "setup [this display world]"))

([MASWaterWorld_Class30010] of  CloVar

	(source "(ObjectGridPortrayal2D.)")
	(title "ground"))

([MASWaterWorld_Class30011] of  CloVar

	(source "(ObjectGridPortrayal2D.)")
	(title "water"))

([MASWaterWorld_Class30012] of  CloFunction

	(source "(let [display (Display2D. 600 600 wgui)]\n  (.setClipping display false)\n  (.attach display ground \"Ground\")\n  (.attach display water \"Water\")\n  display)")
	(title "create-display [wgui world]"))

([MASWaterWorld_Class30013] of  CloFunction

	(source "(let [ele-colors (SimpleColorMap. 0 300 (Color. 250 246 237) (Color. 53 44 36))\n       dep-colors (SimpleColorMap. 0 10 (Color. 70 100 200 0) (Color. 70 100 200 255))\n       GroundPort (proxy [RectanglePortrayal2D] []\n                            (draw [object ^Graphics2D graphics ^DrawInfo2D info]\n                              (let [drw (.draw info)\n                                     scl (.scale this)\n                                     wid (* (.width drw) scl)\n                                     hei (* (.height drw) scl)\n                                     x (int (- (.x drw) (/ wid 2.0)))\n                                     y (int (- (.y drw) (/ hei 2.0)))\n                                     bh (:base-height @object)]\n                                 (.setColor graphics (.getColor ele-colors bh))\n                                 (.fillRect graphics x y (int wid) (int hei)))))\n       WaterPort (proxy [RectanglePortrayal2D] []\n                            (draw [object ^Graphics2D graphics ^DrawInfo2D info]\n                              (let [drw (.draw info)\n                                     scl (.scale this)\n                                     wid (* (.width drw) scl)\n                                     hei (* (.height drw) scl)\n                                     x (int (- (.x drw) (/ wid 2.0)))\n                                     y (int (- (.y drw) (/ hei 2.0)))\n                                     cd (count (:drops @object))]\n                                 (.setColor graphics (.getColor dep-colors cd))\n                                 (.fillRect graphics x y (int wid) (int hei)))))]\n  (.setField ground landscape)\n  (.setPortrayalForAll ground GroundPort)\n  (.setField water landscape)\n  (.setPortrayalForAll water WaterPort))")
	(title "setup-ports [display world]"))

([MASWaterWorld_Class4] of  CloFunction

	(source "(let [bst @basin]\n  (vswap! basin assoc\n    :drops (cons drop (:drops bst))\n    :cumulative-height (+ (:raindrop-factor bst) \n                                      (:cumulative-height bst))))")
	(title "add-drop [basin drop]"))

([MASWaterWorld_Class40000] of  CloDocumentation

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Agents</b><br><br>Raindrop.step <a href=\"internalLink\">@'MASWaterWorld_Class10022'</a>&#160;<br>Raincloud.step <a href=\"internalLink\">@'MASWaterWorld_Class10026'</a>&#160;<br><br><b>WaterWorld</b><br><br>initialise <a href=\"internalLink\">@'MASWaterWorld_Class20002'</a>&#160;<br>start <a href=\"internalLink\">@'MASWaterWorld_Class20003'</a>&#160;<br>finish <a href=\"internalLink\">@'MASWaterWorld_Class60000'</a>&#160;<br><br><b>WaterworldPorts </b><br><br>createDisplay <a href=\"internalLink\">@'MASWaterWorld_Class30008'</a>&#160;<br>setup <a href=\"internalLink\">@'MASWaterWorld_Class30009'</a>&#160;<br>info <a href=\"internalLink\">@'MASWaterWorld_Class50000'</a>&#160;</body>\n</html>")
	(title "WaterWorld Implementation"))

([MASWaterWorld_Class5] of  CloFunction

	(source "(let [bst @basin]\n  (vswap! basin assoc\n    :drops (concat drops (:drops bst))\n    :cumulative-height (+ (* (:raindrop-factor bst)\n                                          (count drops))\n                                      (:cumulative-height bst))))")
	(title "add-drops [basin drops]"))

([MASWaterWorld_Class50000] of  CloFunction

	(source "(java.net.URL. \"file:data/mas/water/WaterWorld.html\")")
	(title "info [this]"))

([MASWaterWorld_Class60000] of  CloFunction

	(source "nil")
	(title "finish [this world]"))

([MASWaterWorld_Class70000] of  MASWorldPanel

	(but-world-prepare "Prepare World/mas.world/prepare-world")
	(but-world-run "Multiple Run WorldGUI/mas.world/mult-run-world-gui")
	(but-world-run1 "One Run WorldGUI/mas.world/one-run-world-gui")
	(iPorts-class "mas.world.water.WaterWorldPorts")
	(iWorld-class "mas.world.water.WaterWorld"))
