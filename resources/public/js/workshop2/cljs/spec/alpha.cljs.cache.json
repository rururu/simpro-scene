["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$merge","~$keys","~$+","~$and","~$def"]],"~:name","~$cljs.spec.alpha","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$gobj","~$goog.object","^C","^C","~$walk","~$clojure.walk","~$gen","~$cljs.spec.gen.alpha","~$c","^A","~$str","~$clojure.string","^I","^I","^E","^E","^G","^G"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","~:line",181,"~:column",7,"~:end-line",181,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^V",[["~$spec"]]]]],"~:doc","returns the spec as data"],"^=","~$cljs.spec.alpha/form","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",11,"~:method-params",["^V",[["^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"~:variadic?",false,"^Q",181,"~:ret-tag","~$any","^S",181,"~:max-fixed-arity",1,"~:fn-var",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns the spec as data"],"~$nilable-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1407,"^R",19,"^S",1407,"^T",31,"~:skip-wiki",true,"^U",["^V",["^W",["^V",[["^M","~$pred","~$gfn"]]]]],"^Y","Do not call this directly, use 'nilable'"],"^=","~$cljs.spec.alpha/nilable-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",31,"^[",["^V",[["^M","^19","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1407,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha34149","^S",1407,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:"]]]]],"^Y","Do not call this directly, use 'nilable'"],"~$*recursion-limit*",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",21,"^R",16,"^S",21,"^T",33,"~:dynamic",true],"^=","~$cljs.spec.alpha/*recursion-limit*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",33,"^R",1,"^1>",true,"^Q",21,"^S",21,"~:tag","~$number","^Y","A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."],"~$*coll-error-limit*",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",35,"^R",16,"^S",35,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*coll-error-limit*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",35,"^S",35,"^1@","^1A","^Y","The number of errors reported by explain in a collection spec'ed with 'every'"],"~$empty-coll",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",841,"^R",16,"^S",841,"^T",26,"~:private",true],"^1E",true,"^=","~$cljs.spec.alpha/empty-coll","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",26,"^R",1,"^Q",841,"^S",841,"^1@","~$cljs.core/IMap"],"~$->t_cljs$spec$alpha34125",["^ ","^N",null,"^O",["^ ","~:anonymous",true,"~:protocols",["^6",["~$cljs.spec.alpha/Spec","~$cljs.core/IMeta","~$cljs.spec.alpha/Specize","~$cljs.core/IWithMeta","~$cljs.core/ILookup"]],"~:skip-protocol-flag",["^6",["^1L","^1N","^1O"]],"~:factory","~:positional","^U",["^V",["^W",["^V",[["~$argspec","~$aform","~$retspec","~$rform","~$fnspec","~$fform","^1:","~$specs","~$meta34126"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha34125.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N","^1O"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha34125","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^1S","^1T","^1U","^1V","^1W","^1X","^1:","^1Y","^1Z"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",5,"^12",false,"^1Q","^1R","^Q",1343,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha34125","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^1S","^1T","^1U","^1V","^1W","^1X","^1:","^1Y","^1Z"]]]]],"^1P",["^6",["^1L","^1N","^1O"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha34125."],"~$explain-printer",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",235,"^R",7,"^S",235,"^T",22,"^U",["^V",["^W",["^V",[["~$ed"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"^=","~$cljs.spec.alpha/explain-printer","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",22,"^[",["^V",[["^22"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",235,"^13",["^6",["^14","~$clj-nil"]],"^S",235,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^22"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"~$op-explain",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1159,"^R",8,"^S",1159,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["^M","~$p","~$path","~$via","~$in","~$input"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/op-explain","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^M","~$p","^26","^27","^28","^29"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1159,"^13",["^6",["~$cljs.core/IVector","^14","^24"]],"^S",1159,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p","^26","^27","^28","^29"]]]]]],"~$Specize",["^ ","^O",["^ ","~:protocol-symbol",true,"^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",21,"^R",14,"^Q",131,"~:protocol-info",["^ ","~:methods",["^ ","~$specize*",[["~$_"],["~$_","^M"]]]],"^S",131,"^Y",null,"~:jsdoc",["^V",["@interface"]]],"^2=",true,"^=","^1M","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",21,"^R",1,"^Q",131,"^2>",["^ ","^2?",["^ ","^2@",[["~$_"],["~$_","^M"]]]],"~:info",null,"^S",131,"^1@","^14","~:impls",["^6",["^1<","~$cljs.spec.alpha/t_cljs$spec$alpha34146","~$cljs.spec.alpha/t_cljs$spec$alpha33918","~$cljs.core/Keyword","~$cljs.spec.alpha/t_cljs$spec$alpha33826","~$cljs.spec.alpha/t_cljs$spec$alpha33944","~$cljs.spec.alpha/t_cljs$spec$alpha33860","~$default","~$cljs.spec.alpha/t_cljs$spec$alpha33837","~$cljs.spec.alpha/t_cljs$spec$alpha33773","~$cljs.core/PersistentHashSet","~$cljs.spec.alpha/t_cljs$spec$alpha33851","~$cljs.core/PersistentTreeSet","~$cljs.core/Symbol","~$cljs.spec.alpha/t_cljs$spec$alpha33932","~$cljs.spec.alpha/t_cljs$spec$alpha34118","^20"]],"^Y",null,"^2A",["^V",["@interface"]]],"~$alt-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1044,"^R",19,"^S",1044,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["~$ks","~$ps","~$forms"]]]]],"^Y","Do not call this directly, use 'alt'"],"^=","~$cljs.spec.alpha/alt-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^2T","^2U","^2V"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1044,"^13","^14","^S",1044,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2T","^2U","^2V"]]]]],"^Y","Do not call this directly, use 'alt'"],"~$tagged-ret",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",656,"^R",8,"^S",656,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["~$tag","~$ret"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/tagged-ret","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^2Y","^2Z"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",656,"^13","~$cljs.core/MapEntry","^S",656,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^2Y","^2Z"]]]]]],"~$->t_cljs$spec$alpha33826",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^M","^19","^1:","~$cpred?","~$unc","~$meta33827"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33826.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33826","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^M","^19","^1:","^32","^33","^34"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",6,"^12",false,"^1Q","^1R","^Q",520,"^13","^2G","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^32","^33","^34"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33826."],"~$pvalid?",["^ ","^N",null,"^O",["^ ","^1E",true,"^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"~:top-fn",["^ ","^12",false,"^15",3,"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^11",["^V",[null,null]]],"^R",8,"^Q",380,"^S",380,"^U",["^V",["^W",["^V",[["^19","~$x"],["^19","~$x","^M"]]]]],"^Y","internal helper function that returns true when x is valid for spec."],"^1E",true,"^=","~$cljs.spec.alpha/pvalid?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^37",["^ ","^12",false,"^15",3,"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",380,"^S",380,"^15",3,"^16",true,"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^Y","internal helper function that returns true when x is valid for spec."],"~$->t_cljs$spec$alpha34149",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^M","^19","^1:","^X","~$meta34150"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha34149.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha34149","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^M","^19","^1:","^X","^3:"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",5,"^12",false,"^1Q","^1R","^Q",1411,"^13","^1<","^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^X","^3:"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha34149."],"~$def-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",306,"^R",19,"^S",306,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"^=","~$cljs.spec.alpha/def-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["~$k","^M","^X"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",306,"^S",306,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"~$*explain-out*",["^ ","^=","~$cljs.spec.alpha/*explain-out*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",262,"^R",1,"^S",262,"^T",29,"^1>",true,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",262,"^R",16,"^S",262,"^T",29,"^1>",true]],"~$*runtime-asserts*",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1479,"^R",3,"^S",1479,"^T",20,"^1E",true,"^1>",true],"^1E",true,"^=","~$cljs.spec.alpha/*runtime-asserts*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^R",1,"^1>",true,"^Q",1477,"^S",1479,"^1@","~$boolean"],"~$regex-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1291,"^R",19,"^S",1291,"^T",34,"^18",true,"^U",["^V",["^W",["^V",[["~$re","^1:"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"^=","~$cljs.spec.alpha/regex-spec-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",34,"^[",["^V",[["^3D","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1291,"^13","^2R","^S",1291,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^3D","^1:"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"~$merge-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",813,"^R",19,"^S",813,"^T",34,"^18",true,"^U",["^V",["^W",["^V",[["^2V","~$preds","^1:"]]]]],"^Y","Do not call this directly, use 'merge'"],"^=","~$cljs.spec.alpha/merge-spec-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",34,"^[",["^V",[["^2V","^3G","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",813,"^13","^2Q","^S",813,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2V","^3G","^1:"]]]]],"^Y","Do not call this directly, use 'merge'"],"~$explain-data*",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",219,"^R",7,"^S",219,"^T",20,"^U",["^V",["^W",["^V",[["^X","^26","^27","^28","~$x"]]]]]],"^=","~$cljs.spec.alpha/explain-data*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^X","^26","^27","^28","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",219,"^13",["^6",["^1G","^24"]],"^S",219,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^26","^27","^28","~$x"]]]]]],"~$add-ret",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1110,"^R",8,"^S",1110,"^T",15,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/add-ret","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p","~$r","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1110,"^13",["^6",[null,"^14"]],"^S",1110,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"~$explain-pred-list",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",738,"^R",8,"^S",738,"^T",25,"^1E",true,"^U",["^V",["^W",["^V",[["^2V","^3G","^26","^27","^28","~$x"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/explain-pred-list","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",25,"^[",["^V",[["^2V","^3G","^26","^27","^28","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",738,"^13",["^6",["^2;","^14","^24"]],"^S",738,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2V","^3G","^26","^27","^28","~$x"]]]]]],"~$MAX_INT",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",19,"^R",14,"^S",19,"^T",21,"~:const",true],"^=","~$cljs.spec.alpha/MAX_INT","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",21,"~:const-expr",["^ ","~:op","^3P","~:val",9007199254740991,"~:env",["^ ","~:context","~:expr"],"~:form",9007199254740991,"^1@","^1A"],"^R",1,"^3P",true,"^Q",19,"^S",19,"^1@","^1A"],"~$check-asserts",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1487,"^R",7,"^S",1487,"^T",20,"^U",["^V",["^W",["^V",[["~$flag"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"^=","~$cljs.spec.alpha/check-asserts","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^3Z"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1487,"^S",1487,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^3Z"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"~$alt2",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1042,"^R",8,"^S",1042,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["~$p1","~$p2"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/alt2","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^41","^42"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1042,"^13",["^6",[null,"^14"]],"^S",1042,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^41","^42"]]]]]],"~$and-k-gen",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",417,"^R",8,"^S",417,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"^1E",true,"^=","~$cljs.spec.alpha/and-k-gen","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$s"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",417,"^13","^14","^S",417,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"~$assert*",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1495,"^R",7,"^S",1495,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"^=","~$cljs.spec.alpha/assert*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1495,"^S",1495,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"~$fn-sym",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",123,"^R",7,"^S",123,"^T",13,"^U",["^V",["^W",["^V",[["~$f-n"]]]]]],"^=","~$cljs.spec.alpha/fn-sym","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^49"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",123,"^13",["^6",["^14","^24"]],"^S",123,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^49"]]]]]],"~$inst-in-range?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1442,"^R",7,"^S",1442,"^T",21,"^U",["^V",["^W",["^V",[["~$start","~$end","~$inst"]]]]],"^Y","Return true if inst at or after start and before end"],"^=","~$cljs.spec.alpha/inst-in-range?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",21,"^[",["^V",[["^4<","^4=","^4>"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1442,"^13","^3B","^S",1442,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^4<","^4=","^4>"]]]]],"^Y","Return true if inst at or after start and before end"],"~$registry-ref",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",47,"^R",20,"^S",47,"^T",32,"^1E",true],"^1E",true,"^=","~$cljs.spec.alpha/registry-ref","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",32,"^R",1,"^Q",47,"^S",47,"^1@","^14"],"~$accept?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",979,"^R",8,"^S",979,"^T",15,"^1E",true,"^U",["^V",["^W",["^V",[[["^ ","~:keys",["~:cljs.spec.alpha/op"]]]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/accept?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p__33993"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",979,"^13","^3B","^S",979,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^4C",["^4D"]]]]]]]],"~$and-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",749,"^R",19,"^S",749,"^T",32,"^18",true,"^U",["^V",["^W",["^V",[["^2V","^3G","^1:"]]]]],"^Y","Do not call this directly, use 'and'"],"^=","~$cljs.spec.alpha/and-spec-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",32,"^[",["^V",[["^2V","^3G","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",749,"^13","^2E","^S",749,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2V","^3G","^1:"]]]]],"^Y","Do not call this directly, use 'and'"],"~$accept",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",977,"^R",8,"^S",977,"^T",14,"^1E",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/accept","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",977,"^13","^1G","^S",977,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"~$recur-limit?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",351,"^R",8,"^S",351,"^T",20,"^1E",true,"^U",["^V",["^W",["^V",[["~$rmap","~$id","^26","~$k"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/recur-limit?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^4L","^4M","^26","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",351,"^13","^3B","^S",351,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^4L","^4M","^26","~$k"]]]]]],"~$describe*",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",45,"^R",4,"^S",45,"^T",13,"~:protocol","^1K","^Y",null,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^4P","^1K","^=","~$cljs.spec.alpha/describe*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",45,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y",null],"~$map-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",423,"^R",19,"^S",423,"^T",32,"^18",true,"^U",["^V",["^W",["^V",[[["^ ","^4C",["~$req-un","~$opt-un","~$keys-pred","~$pred-exprs","~$opt-keys","~$req-specs","~$req","~$req-keys","~$opt-specs","~$pred-forms","~$opt","^1:"],"~:as","~$argm"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"^=","~$cljs.spec.alpha/map-spec-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",32,"^[",["^V",[["~$p__33770"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",423,"^13","^2L","^S",423,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^4C",["^4S","^4T","^4U","^4V","^4W","^4X","^4Y","^4Z","^4[","^50","^51","^1:"],"^52","^53"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"~$reg-resolve!",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",66,"^R",8,"^S",66,"^T",20,"^1E",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"^1E",true,"^=","~$cljs.spec.alpha/reg-resolve!","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",66,"^13",["^6",[null,"^14"]],"^S",66,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"~$t_cljs$spec$alpha33932",["^ ","~:num-fields",4,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2Q","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","~:type",true,"^1I",true,"^R",3,"^Q",816,"~:record",false,"^1@","~$function","^1P",["^6",["^1L","^1N"]]],"~$re-explain",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1265,"^R",8,"^S",1265,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["^26","^27","^28","^3D","^29"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/re-explain","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^26","^27","^28","^3D","^29"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1265,"^13",["^6",["^2;","^14","^24"]],"^S",1265,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^26","^27","^28","^3D","^29"]]]]]],"~$t_cljs$spec$alpha34118",["^ ","^59",3,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2R","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",3,"^Q",1294,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$alts",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1041,"^R",8,"^S",1041,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["~$&","^2U"]]]]],"^37",["^ ","^12",true,"^15",0,"^[",[["^V",["^2U"]]],"^U",["^V",[["~$&","^2U"]]],"^11",["^V",[null]]]],"^1E",true,"^=","~$cljs.spec.alpha/alts","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^37",["^ ","^12",true,"^15",0,"^[",[["^V",["^2U"]]],"^U",["^V",[["~$&","^2U"]]],"^11",["^V",[null]]],"^[",[["^V",["^2U"]]],"^10",null,"^11",["^V",[null]],"^R",1,"^12",true,"^Q",1041,"^13","^14","^S",1041,"^15",0,"^16",true,"^U",["^V",[["~$&","^2U"]]]],"~$->t_cljs$spec$alpha34118",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^3D","^1:","~$meta34119"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha34118.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha34118","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^3D","^1:","^5C"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",3,"^12",false,"^1Q","^1R","^Q",1294,"^13","^2R","^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^3D","^1:","^5C"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha34118."],"~$->t_cljs$spec$alpha34146",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^X","~$meta34147"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha34146.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha34146","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^X","^5F"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",5,"^12",false,"^1Q","^1R","^Q",1391,"^13","^2D","^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^5F"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha34146."],"~$with-name",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",85,"^R",8,"^S",85,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["^X","~$name"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/with-name","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^X","^5I"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",85,"^13",["^6",[null,"~$clj","^14","~$cljs.core/MetaFn","^24"]],"^S",85,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^5I"]]]]]],"~$explain",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",270,"^R",7,"^S",270,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"^=","~$cljs.spec.alpha/explain","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",270,"^13","^14","^S",270,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"~$spec-name",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",93,"^R",8,"^S",93,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/spec-name","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",93,"^13",["^6",[null,"^14","^24"]],"^S",93,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"~$map-spec",["^ ","^=","~$cljs.spec.alpha/map-spec","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",335,"^R",1,"^S",335,"^T",18,"~:declared",true,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",335,"^R",10,"^S",335,"^T",18,"^5S",true]],"~$t_cljs$spec$alpha33837",["^ ","^59",9,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2K","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",6,"^Q",556,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$with-gen*",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",44,"^R",4,"^S",44,"^T",13,"^4P","^1K","^Y",null,"^U",["^V",["^W",["^V",[["^X","^1:"]]]]]],"^4P","^1K","^=","~$cljs.spec.alpha/with-gen*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X","^1:"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",44,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1:"]]]]],"^Y",null],"~$t_cljs$spec$alpha34149",["^ ","^59",5,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^1<","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",5,"^Q",1411,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$k-gen",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",397,"^R",8,"^S",397,"^T",13,"^1E",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"^1E",true,"^=","~$cljs.spec.alpha/k-gen","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",397,"^13",["^6",["^14","^24"]],"^S",397,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"~$or-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",659,"^R",19,"^S",659,"^T",31,"^18",true,"^U",["^V",["^W",["^V",[["^:","^2V","^3G","^1:"]]]]],"^Y","Do not call this directly, use 'or'"],"^=","~$cljs.spec.alpha/or-spec-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",31,"^[",["^V",[["^:","^2V","^3G","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",659,"^13","^2I","^S",659,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^:","^2V","^3G","^1:"]]]]],"^Y","Do not call this directly, use 'or'"],"~$specize",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",159,"^R",8,"^S",159,"^T",15,"^1E",true,"^U",["^V",["^W",["^V",[["~$s"],["~$s","^M"]]]]],"^37",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]]],"^1E",true,"^=","~$cljs.spec.alpha/specize","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^37",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["~$s","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",159,"^S",159,"^15",2,"^16",true,"^U",["^V",[["~$s"],["~$s","^M"]]]],"~$*fspec-iterations*",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",27,"^R",16,"^S",27,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*fspec-iterations*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",27,"^S",27,"^1@","^1A","^Y","The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"],"~$Spec",["^ ","^O",["^ ","^2=",true,"^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^R",14,"^Q",39,"^2>",["^ ","^2?",["^ ","~$conform*",[["^X","~$x"]],"~$unform*",[["^X","~$y"]],"~$explain*",[["^X","^26","^27","^28","~$x"]],"~$gen*",[["^X","~$overrides","^26","^4L"]],"^5U",[["^X","^1:"]],"^4O",[["^X"]]]],"^S",39,"^Y",null,"^2A",["^V",["@interface"]]],"^2=",true,"^=","^1K","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^R",1,"^Q",39,"^2>",["^ ","^2?",["^ ","^65",[["^X","~$x"]],"^66",[["^X","~$y"]],"^67",[["^X","^26","^27","^28","~$x"]],"^68",[["^X","^69","^26","^4L"]],"^5U",[["^X","^1:"]],"^4O",[["^X"]]]],"^2B",null,"^S",39,"^1@","^14","^2C",["^6",["^1<","^2D","^2E","^2G","^2H","^2I","^2K","^2L","^2N","^2Q","^2R","^20"]],"^Y",null,"^2A",["^V",["@interface"]]],"~$unform",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",174,"^R",7,"^S",174,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"^=","~$cljs.spec.alpha/unform","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",174,"^13","^14","^S",174,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"~$valid?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",371,"^R",7,"^S",371,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"],["^X","~$x","^M"]]]]],"^Y","Helper function that returns true when x is valid for spec.","^37",["^ ","^12",false,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/valid?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^37",["^ ","^12",false,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",371,"^S",371,"^15",3,"^16",true,"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^Y","Helper function that returns true when x is valid for spec."],"~$->t_cljs$spec$alpha33837",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^M","~$mmvar","~$retag","^1:","^4M","~$predx","~$dval","^2Y","~$meta33838"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33837.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33837","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^M","^6?","^6@","^1:","^4M","^6A","^6B","^2Y","^6C"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",6,"^12",false,"^1Q","^1R","^Q",556,"^13","^2K","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^M","^6?","^6@","^1:","^4M","^6A","^6B","^2Y","^6C"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33837."],"^F",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",293,"^R",7,"^S",293,"^T",10,"^U",["^V",["^W",["^V",[["^X"],["^X","^69"]]]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","^37",["^ ","^12",false,"^15",2,"^[",["^V",[["^X"],["^X","^69"]]],"^U",["^V",[["^X"],["^X","^69"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/gen","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",10,"^37",["^ ","^12",false,"^15",2,"^[",["^V",[["^X"],["^X","^69"]]],"^U",["^V",[["^X"],["^X","^69"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X"],["^X","^69"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",293,"^S",293,"^15",2,"^16",true,"^U",["^V",[["^X"],["^X","^69"]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"],"~$nonconforming",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1386,"^R",7,"^S",1386,"^T",20,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^=","~$cljs.spec.alpha/nonconforming","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1386,"^13","^2D","^S",1386,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"~$->t_cljs$spec$alpha33932",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^2V","^3G","^1:","~$meta33933"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33932.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33932","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^2V","^3G","^1:","^6I"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",3,"^12",false,"^1Q","^1R","^Q",816,"^13","^2Q","^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2V","^3G","^1:","^6I"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33932."],"^66",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",41,"^R",4,"^S",41,"^T",11,"^4P","^1K","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]]],"^4P","^1K","^=","~$cljs.spec.alpha/unform*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",11,"^[",["^V",[["^X","~$y"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",41,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]],"^Y",null],"~$->sym",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",323,"^R",8,"^S",323,"^T",13,"^1E",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"^1E",true,"^=","~$cljs.spec.alpha/->sym","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",323,"^13",["^6",[null,"^14"]],"^S",323,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"~$abbrev",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",187,"^R",7,"^S",187,"^T",13,"^U",["^V",["^W",["^V",[["^M"]]]]]],"^=","~$cljs.spec.alpha/abbrev","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",187,"^13",["^6",[null,"^14"]],"^S",187,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^M"]]]]]],"~$regex?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",80,"^R",7,"^S",80,"^T",13,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"^=","~$cljs.spec.alpha/regex?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",80,"^13",["^6",[null,"^14"]],"^S",80,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"~$t_cljs$spec$alpha33773",["^ ","^59",19,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2L","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",5,"^Q",430,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$t_cljs$spec$alpha33918",["^ ","^59",6,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2E","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",5,"^Q",780,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$or-k-gen",["^ ","^N",null,"^O",["^ ","^1E",true,"^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",16,"^37",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["~$min-count","~$s"]]],"^U",["^V",[["~$s"],["^6U","~$s"]]],"^11",["^V",[null,null]]],"^R",8,"^Q",406,"^S",406,"^U",["^V",["^W",["^V",[["~$s"],["^6U","~$s"]]]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"^1E",true,"^=","~$cljs.spec.alpha/or-k-gen","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",16,"^37",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["^6U","~$s"]]],"^U",["^V",[["~$s"],["^6U","~$s"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["^6U","~$s"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",406,"^S",406,"^15",2,"^16",true,"^U",["^V",[["~$s"],["^6U","~$s"]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"~$int-in-range?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1449,"^R",7,"^S",1449,"^T",20,"^U",["^V",["^W",["^V",[["^4<","^4=","~$val"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"^=","~$cljs.spec.alpha/int-in-range?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^4<","^4=","^6X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1449,"^13",["^6",["^3B","^14"]],"^S",1449,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^4<","^4=","^6X"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"~$dt",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",358,"^R",8,"^S",358,"^T",10,"^1E",true,"^U",["^V",["^W",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^32"]]]]],"^37",["^ ","^12",false,"^15",4,"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^32"]]],"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^32"]]],"^11",["^V",[null,null]]]],"^1E",true,"^=","~$cljs.spec.alpha/dt","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",10,"^37",["^ ","^12",false,"^15",4,"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^32"]]],"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^32"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^32"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",358,"^S",358,"^15",4,"^16",true,"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^32"]]]],"~$preturn",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1074,"^R",8,"^S",1074,"^T",15,"^1E",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/preturn","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1074,"^13",["^6",[null,"^14","^2F","^30","^24"]],"^S",1074,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$re-conform",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1252,"^R",8,"^S",1252,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","~$xs","^52","~$data"]]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/re-conform","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["~$p","~$p__34099"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1252,"^13",["^6",[null,"^14","^2F","^30","^24"]],"^S",1252,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","^73","^52","^74"]]]]]]],"~$spec?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",74,"^R",7,"^S",74,"^T",12,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"^=","~$cljs.spec.alpha/spec?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",74,"^13",["^6",[null,"^24"]],"^S",74,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"~$registry",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",318,"^R",7,"^S",318,"^T",15,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"^=","~$cljs.spec.alpha/registry","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",318,"^13","^14","^S",318,"^15",0,"^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"~$rep+impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1010,"^R",19,"^S",1010,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"^=","~$cljs.spec.alpha/rep+impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1010,"^13",["^6",["^14","^1G","^24"]],"^S",1010,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"~$->t_cljs$spec$alpha33944",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^M","~$max-count","~$p__33941","~$check?","^1:","~$gen-max","^19","~$cpred","~$map__33942","~$conform-keys","~$kind-form","~$addcv","~$cfns","~$describe-form","~$distinct","^X","~$kfn","~$gen-into","~$count","^6U","~$opts","~$kind","~$conform-all","~$conform-into","~$meta33945"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33944.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33944","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^M","^7>","^7?","^7@","^1:","^7A","^19","^7B","^7C","^7D","^7E","^7F","^7G","^7H","^7I","^X","^7J","^7K","^7L","^6U","^7M","^7N","^7O","^7P","^7Q"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",6,"^12",false,"^1Q","^1R","^Q",881,"^13","^2H","^15",25,"^16",true,"^U",["^V",["^W",["^V",[["^M","^7>","^7?","^7@","^1:","^7A","^19","^7B","^7C","^7D","^7E","^7F","^7G","^7H","^7I","^X","^7J","^7K","^7L","^6U","^7M","^7N","^7O","^7P","^7Q"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33944."],"~$deriv",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1123,"^R",8,"^S",1123,"^T",13,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/deriv","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1123,"^13",["^6",[null,"^14","^1G","^24"]],"^S",1123,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$t_cljs$spec$alpha33851",["^ ","^59",6,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2N","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",6,"^Q",600,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$->t_cljs$spec$alpha33860",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^:","^2V","^3G","^1:","^4M","~$kps","^1Y","~$cform","~$meta33861"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33860.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33860","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^:","^2V","^3G","^1:","^4M","^7W","^1Y","^7X","^7Y"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",5,"^12",false,"^1Q","^1R","^Q",697,"^13","^2I","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^:","^2V","^3G","^1:","^4M","^7W","^1Y","^7X","^7Y"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33860."],"~$deep-resolve",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",49,"^R",8,"^S",49,"^T",20,"^1E",true,"^U",["^V",["^W",["^V",[["~$reg","~$k"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/deep-resolve","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^80","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",49,"^S",49,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^80","~$k"]]]]]],"~$exercise",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1433,"^R",7,"^S",1433,"^T",15,"^U",["^V",["^W",["^V",[["^X"],["^X","~$n"],["^X","~$n","^69"]]]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","^37",["^ ","^12",false,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^69"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^69"]]],"^11",["^V",[null,null,null]]]],"^=","~$cljs.spec.alpha/exercise","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^37",["^ ","^12",false,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^69"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^69"]]],"^11",["^V",[null,null,null]]],"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^69"]]],"^10",null,"^11",["^V",[null,null,null]],"^R",1,"^12",false,"^Q",1433,"^S",1433,"^15",3,"^16",true,"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^69"]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"],"~$explain-data",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",226,"^R",7,"^S",226,"^T",19,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"^=","~$cljs.spec.alpha/explain-data","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",226,"^13",["^6",["^1G","^24"]],"^S",226,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"~$tuple-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",29,"^37",["^ ","^12",false,"^15",3,"^[",["^V",[["^2V","^3G"],["^2V","^3G","^1:"]]],"^U",["^V",[["^2V","^3G"],["^2V","^3G","^1:"]]],"^11",["^V",[null,null]]],"^18",true,"^R",19,"^Q",594,"^S",594,"^U",["^V",["^W",["^V",[["^2V","^3G"],["^2V","^3G","^1:"]]]]],"^Y","Do not call this directly, use 'tuple'"],"^=","~$cljs.spec.alpha/tuple-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",29,"^37",["^ ","^12",false,"^15",3,"^[",["^V",[["^2V","^3G"],["^2V","^3G","^1:"]]],"^U",["^V",[["^2V","^3G"],["^2V","^3G","^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^2V","^3G"],["^2V","^3G","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",594,"^S",594,"^15",3,"^16",true,"^U",["^V",[["^2V","^3G"],["^2V","^3G","^1:"]]],"^Y","Do not call this directly, use 'tuple'"],"~$multi-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",34,"^37",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^6?","^6@"],["^M","^6?","^6@","^1:"]]],"^U",["^V",[["^M","^6?","^6@"],["^M","^6?","^6@","^1:"]]],"^11",["^V",[null,null]]],"^18",true,"^R",19,"^Q",544,"^S",544,"^U",["^V",["^W",["^V",[["^M","^6?","^6@"],["^M","^6?","^6@","^1:"]]]]],"^Y","Do not call this directly, use 'multi-spec'"],"^=","~$cljs.spec.alpha/multi-spec-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",34,"^37",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^6?","^6@"],["^M","^6?","^6@","^1:"]]],"^U",["^V",[["^M","^6?","^6@"],["^M","^6?","^6@","^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^6?","^6@"],["^M","^6?","^6@","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",544,"^S",544,"^15",4,"^16",true,"^U",["^V",[["^M","^6?","^6@"],["^M","^6?","^6@","^1:"]]],"^Y","Do not call this directly, use 'multi-spec'"],"~$t_cljs$spec$alpha33826",["^ ","^59",6,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2G","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",6,"^Q",520,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$conform",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",168,"^R",7,"^S",168,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^=","~$cljs.spec.alpha/conform","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",168,"^13","^14","^S",168,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"~$->t_cljs$spec$alpha33851",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^2V","^3G","^1:","^1Y","~$cnt","~$meta33852"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33851.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33851","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^2V","^3G","^1:","^1Y","^8>","^8?"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",6,"^12",false,"^1Q","^1R","^Q",600,"^13","^2N","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2V","^3G","^1:","^1Y","^8>","^8?"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33851."],"~$t_cljs$spec$alpha33860",["^ ","^59",9,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2I","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",5,"^Q",697,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$t_cljs$spec$alpha34125",["^ ","^59",9,"^1J",["^6",["^1K","^1L","^1M","^1N","^1O"]],"^=","^20","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",5,"^Q",1343,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N","^1O"]]],"^68",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",43,"^R",4,"^S",43,"^T",8,"^4P","^1K","^Y",null,"^U",["^V",["^W",["^V",[["^X","^69","^26","^4L"]]]]]],"^4P","^1K","^=","~$cljs.spec.alpha/gen*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",8,"^[",["^V",[["^X","^69","^26","^4L"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",43,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^X","^69","^26","^4L"]]]]],"^Y",null],"~$fspec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1339,"^R",19,"^S",1339,"^T",29,"^18",true,"^U",["^V",["^W",["^V",[["^1S","^1T","^1U","^1V","^1W","^1X","^1:"]]]]],"^Y","Do not call this directly, use 'fspec'"],"^=","~$cljs.spec.alpha/fspec-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",29,"^[",["^V",[["^1S","^1T","^1U","^1V","^1W","^1X","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1339,"^13","^20","^S",1339,"^15",7,"^16",true,"^U",["^V",["^W",["^V",[["^1S","^1T","^1U","^1V","^1W","^1X","^1:"]]]]],"^Y","Do not call this directly, use 'fspec'"],"~$t_cljs$spec$alpha33944",["^ ","^59",25,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2H","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",6,"^Q",881,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$->t_cljs$spec$alpha33773",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["~$keys->specnames","^51","^4S","^4T","^1:","^4V","^4U","^53","^4W","^55","^4X","^4Y","^4M","^4Z","^4[","~$map__33771","~$k->s","^50","~$meta33774"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33773.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33773","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^8H","^51","^4S","^4T","^1:","^4V","^4U","^53","^4W","^55","^4X","^4Y","^4M","^4Z","^4[","^8I","^8J","^50","^8K"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",5,"^12",false,"^1Q","^1R","^Q",430,"^13","^2L","^15",19,"^16",true,"^U",["^V",["^W",["^V",[["^8H","^51","^4S","^4T","^1:","^4V","^4U","^53","^4W","^55","^4X","^4Y","^4M","^4Z","^4[","^8I","^8J","^50","^8K"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33773."],"~$inck",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",355,"^R",8,"^S",355,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/inck","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["~$m","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",355,"^13","^14","^S",355,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"~$*coll-check-limit*",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",31,"^R",16,"^S",31,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*coll-check-limit*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",31,"^S",31,"^1@","^1A","^Y","The number of items validated in a collection spec'ed with 'every'"],"~$get-spec",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",330,"^R",7,"^S",330,"^T",15,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"^=","~$cljs.spec.alpha/get-spec","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",330,"^13","^14","^S",330,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"~$gensub",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",282,"^R",8,"^S",282,"^T",14,"^1E",true,"^U",["^V",["^W",["^V",[["^X","^69","^26","^4L","^M"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/gensub","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","^69","^26","^4L","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",282,"^13","^14","^S",282,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^69","^26","^4L","^M"]]]]]],"~$the-spec",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",116,"^R",8,"^S",116,"^T",16,"^1E",true,"^U",["^V",["^W",["^V",[["~$spec-or-k"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"^1E",true,"^=","~$cljs.spec.alpha/the-spec","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",16,"^[",["^V",[["^8V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",116,"^13",["^6",[null,"^5K","^3B","^14","^5L","^24"]],"^S",116,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8V"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"~$coll-prob",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",793,"^R",8,"^S",793,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["~$x","^7J","~$kform","^7I","^7L","^6U","^7>","^26","^27","^28"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/coll-prob","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$x","^7J","^8Y","^7I","^7L","^6U","^7>","^26","^27","^28"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",793,"^13",["^6",["^2;","^14","^24"]],"^S",793,"^15",10,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^7J","^8Y","^7I","^7L","^6U","^7>","^26","^27","^28"]]]]]],"~$every-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",29,"^37",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^19","^7M"],["^M","^19",["^ ","^7P","~:into","^7H","~:cljs.spec.alpha/describe","^4C",["^7N","~:cljs.spec.alpha/kind-form","^7L","^7>","^6U","^7I","^7A","~:cljs.spec.alpha/kfn","~:cljs.spec.alpha/cpred","^7D","~:cljs.spec.alpha/conform-all"],"~:or",["^ ","^7A",20],"^52","^7M"],"^1:"]]],"^U",["^V",[["^M","^19","^7M"],["^M","^19",["^ ","^7P","^90","^7H","^91","^4C",["^7N","^92","^7L","^7>","^6U","^7I","^7A","^93","^94","^7D","^95"],"^96",["^ ","^7A",20],"^52","^7M"],"^1:"]]],"^11",["^V",[null,null]]],"^18",true,"^R",19,"^Q",843,"^S",843,"^U",["^V",["^W",["^V",[["^M","^19","^7M"],["^M","^19",["^ ","^7P","^90","^7H","^91","^4C",["^7N","^92","^7L","^7>","^6U","^7I","^7A","^93","^94","^7D","^95"],"^96",["^ ","^7A",20],"^52","^7M"],"^1:"]]]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"^=","~$cljs.spec.alpha/every-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",29,"^37",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^19","^7M"],["^M","^19",["^ ","^7P","^90","^7H","^91","^4C",["^7N","^92","^7L","^7>","^6U","^7I","^7A","^93","^94","^7D","^95"],"^96",["^ ","^7A",20],"^52","^7M"],"^1:"]]],"^U",["^V",[["^M","^19","^7M"],["^M","^19",["^ ","^7P","^90","^7H","^91","^4C",["^7N","^92","^7L","^7>","^6U","^7I","^7A","^93","^94","^7D","^95"],"^96",["^ ","^7A",20],"^52","^7M"],"^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^19","^7M"],["^M","^19",["^ ","^7P","^90","^7H","^91","^4C",["^7N","^92","^7L","^7>","^6U","^7I","^7A","^93","^94","^7D","^95"],"^96",["^ ","^7A",20],"^52","^7M"],"^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",843,"^S",843,"^15",4,"^16",true,"^U",["^V",[["^M","^19","^7M"],["^M","^19",["^ ","^7P","^90","^7H","^91","^4C",["^7N","^92","^7L","^7>","^6U","^7I","^7A","^93","^94","^7D","^95"],"^96",["^ ","^7A",20],"^52","^7M"],"^1:"]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"~$accept-nil?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1060,"^R",8,"^S",1060,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/accept-nil?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1060,"^13",["^6",["^3B","^14","^24"]],"^S",1060,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$maybe-spec",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",105,"^R",8,"^S",105,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["^8V"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"^1E",true,"^=","~$cljs.spec.alpha/maybe-spec","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^8V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",105,"^13",["^6",[null,"^5K","^3B","^14","^5L","^24"]],"^S",105,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8V"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"~$spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",28,"^37",["^ ","^12",false,"^15",5,"^[",["^V",[["^M","^19","^1:","^32"],["^M","^19","^1:","^32","^33"]]],"^U",["^V",[["^M","^19","^1:","^32"],["^M","^19","^1:","^32","^33"]]],"^11",["^V",[null,null]]],"^18",true,"^R",19,"^Q",511,"^S",511,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^32"],["^M","^19","^1:","^32","^33"]]]]],"^Y","Do not call this directly, use 'spec'"],"^=","~$cljs.spec.alpha/spec-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",28,"^37",["^ ","^12",false,"^15",5,"^[",["^V",[["^M","^19","^1:","^32"],["^M","^19","^1:","^32","^33"]]],"^U",["^V",[["^M","^19","^1:","^32"],["^M","^19","^1:","^32","^33"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^19","^1:","^32"],["^M","^19","^1:","^32","^33"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",511,"^S",511,"^15",5,"^16",true,"^U",["^V",[["^M","^19","^1:","^32"],["^M","^19","^1:","^32","^33"]]],"^Y","Do not call this directly, use 'spec'"],"~$invalid?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",163,"^R",7,"^S",163,"^T",15,"^U",["^V",["^W",["^V",[["^2Z"]]]]],"^Y","tests the validity of a conform return value"],"^=","~$cljs.spec.alpha/invalid?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^2Z"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",163,"^13","^3B","^S",163,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^2Z"]]]]],"^Y","tests the validity of a conform return value"],"~$amp-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1015,"^R",19,"^S",1015,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^3D","~$re-form","^3G","^50"]]]]],"^Y","Do not call this directly, use '&'"],"^=","~$cljs.spec.alpha/amp-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^3D","^9A","^3G","^50"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1015,"^13","^1G","^S",1015,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^3D","^9A","^3G","^50"]]]]],"^Y","Do not call this directly, use '&'"],"~$->t_cljs$spec$alpha33918",["^ ","^N",null,"^O",["^ ","^1I",true,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^1P",["^6",["^1L","^1N"]],"^1Q","^1R","^U",["^V",["^W",["^V",[["^2V","^3G","^1:","^1Y","^7X","~$meta33919"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33918.","^P",null],"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha33918","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^[",["^V",[["^2V","^3G","^1:","^1Y","^7X","^9D"]]],"^10",null,"^11",["^V",[null,null]],"^1I",true,"^R",5,"^12",false,"^1Q","^1R","^Q",780,"^13","^2E","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2V","^3G","^1:","^1Y","^7X","^9D"]]]]],"^1P",["^6",["^1L","^1N"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha33918."],"~$pcat*",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",982,"^R",8,"^S",982,"^T",13,"^1E",true,"^U",["^V",["^W",["^V",[[["~#cmap",[["^41","~$&","~$pr","^52","^2U"],"~:ps",["~$k1","~$&","~$kr","^52","^2T"],"~:ks",["~$f1","~$&","~$fr","^52","^2V"],"~:forms","^2Z","~:ret","~$rep+","~:rep+"]]]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/pcat*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$p__33996"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",982,"^13",["^6",["^14","^1G","^24"]],"^S",982,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^9G",[["^41","~$&","^9H","^52","^2U"],"^9I",["^9J","~$&","^9K","^52","^2T"],"^9L",["^9M","~$&","^9N","^52","^2V"],"^9O","^2Z","^9P","^9Q","^9R"]]]]]]]],"~$alt*",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1029,"^R",8,"^S",1029,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["^2U","^2T","^2V"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/alt*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^2U","^2T","^2V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1029,"^13",["^6",["^14","^1G","^24"]],"^S",1029,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2U","^2T","^2V"]]]]]],"~$cat-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",994,"^R",19,"^S",994,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^2T","^2U","^2V"]]]]],"^Y","Do not call this directly, use 'cat'"],"^=","~$cljs.spec.alpha/cat-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^2T","^2U","^2V"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",994,"^13",["^6",["^14","^1G","^24"]],"^S",994,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2T","^2U","^2V"]]]]],"^Y","Do not call this directly, use 'cat'"],"~$macroexpand-check",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",337,"^R",8,"^S",337,"^T",25,"^1E",true,"^U",["^V",["^W",["^V",[["~$v","~$args"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/macroexpand-check","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",25,"^[",["^V",[["~$v","^9Z"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",337,"^13","^24","^S",337,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$v","^9Z"]]]]]],"~$reg-resolve",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",55,"^R",8,"^S",55,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"^1E",true,"^=","~$cljs.spec.alpha/reg-resolve","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",55,"^13",["^6",[null,"^14"]],"^S",55,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"~$explain-str",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",275,"^R",7,"^S",275,"^T",18,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"^=","~$cljs.spec.alpha/explain-str","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",275,"^13","^14","^S",275,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"~$*compile-asserts*",["^ ","^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1474,"^R",3,"^S",1474,"^T",20,"^1>",true,"^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"^=","~$cljs.spec.alpha/*compile-asserts*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",20,"^R",1,"^1>",true,"^Q",1467,"^S",1474,"^1@","^3B","^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"~$with-gen",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",211,"^R",7,"^S",211,"^T",15,"^U",["^V",["^W",["^V",[["^X","~$gen-fn"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^=","~$cljs.spec.alpha/with-gen","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^X","^:7"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",211,"^13","^14","^S",211,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^:7"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^65",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",40,"^R",4,"^S",40,"^T",12,"^4P","^1K","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]]],"^4P","^1K","^=","~$cljs.spec.alpha/conform*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",40,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y",null],"~$check-asserts?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1482,"^R",16,"^S",1482,"^T",30,"^1@","^3B","^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"^=","~$cljs.spec.alpha/check-asserts?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",30,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1482,"^13","^3B","^S",1482,"^15",0,"^1@","^3B","^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"~$noret?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1052,"^R",8,"^S",1052,"^T",14,"^1E",true,"^U",["^V",["^W",["^V",[["^41","~$pret"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/noret?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^41","^:="]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1052,"^13",["^6",["^3B","^14","^24"]],"^S",1052,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^41","^:="]]]]]],"~$rep-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1006,"^R",19,"^S",1006,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"^=","~$cljs.spec.alpha/rep-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1006,"^13",["^6",["^14","^24"]],"^S",1006,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"~$op-describe",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1143,"^R",8,"^S",1143,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/op-describe","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1143,"^13",["^6",[null,"^5K","^14","^24"]],"^S",1143,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$describe",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",206,"^R",7,"^S",206,"^T",15,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"^=","~$cljs.spec.alpha/describe","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",206,"^13",["^6",[null,"^14"]],"^S",206,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"~$explain-1",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",387,"^R",8,"^S",387,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["^M","^19","^26","^27","^28","~$v"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/explain-1","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^M","^19","^26","^27","^28","~$v"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",387,"^13",["^6",["^2;","^14"]],"^S",387,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^26","^27","^28","~$v"]]]]]],"~$explain-out",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",264,"^R",7,"^S",264,"^T",18,"^U",["^V",["^W",["^V",[["^22"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"^=","~$cljs.spec.alpha/explain-out","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^22"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",264,"^13","^14","^S",264,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^22"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"~$re-gen",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1214,"^R",8,"^S",1214,"^T",14,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","^69","^26","^4L","~$f"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/re-gen","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["~$p","^69","^26","^4L","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1214,"^13",["^6",["^14","^24"]],"^S",1214,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^69","^26","^4L","~$f"]]]]]],"~$filter-alt",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1020,"^R",8,"^S",1020,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["^2U","^2T","^2V","~$f"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/filter-alt","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^2U","^2T","^2V","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1020,"^13","^2;","^S",1020,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2U","^2T","^2V","~$f"]]]]]],"~$and-preds",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",726,"^R",8,"^S",726,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["~$x","^3G","^2V"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/and-preds","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$x","^3G","^2V"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",726,"^13",["^6",[null,"^2F"]],"^S",726,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^3G","^2V"]]]]]],"~$call-valid?",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1318,"^R",8,"^S",1318,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$f","^1Y","^9Z"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/call-valid?","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$f","^1Y","^9Z"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1318,"^13",["^6",["^3B","^14","^24"]],"^S",1318,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^1Y","^9Z"]]]]]],"~$op-unform",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1089,"^R",8,"^S",1089,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/op-unform","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1089,"^13",["^6",["^2;","^14"]],"^S",1089,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$rep*",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",999,"^R",8,"^S",999,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["^41","^42","^2Z","~$splice","^M"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/rep*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^41","^42","^2Z","^:T","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",999,"^13",["^6",["^14","^24"]],"^S",999,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^41","^42","^2Z","^:T","^M"]]]]]],"^2@",["^ ","^N",null,"^O",["^ ","^4P","^1M","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^37",["^ ","^12",false,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^R",4,"^Q",132,"^S",132,"^U",["^V",["^W",["^V",[["~$_"],["~$_","^M"]]]]],"^Y",null],"^4P","^1M","^=","~$cljs.spec.alpha/specize*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^37",["^ ","^12",false,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$_"],["~$_","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",131,"^S",132,"^15",2,"^16",true,"^U",["^V",[["~$_"],["~$_","^M"]]],"^Y",null],"~$t_cljs$spec$alpha34146",["^ ","^59",2,"^1J",["^6",["^1K","^1L","^1M","^1N"]],"^=","^2D","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^5:",true,"^1I",true,"^R",5,"^Q",1391,"^5;",false,"^1@","^5<","^1P",["^6",["^1L","^1N"]]],"~$maybe-impl",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1048,"^R",19,"^S",1048,"^T",29,"^18",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"^=","~$cljs.spec.alpha/maybe-impl","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",29,"^[",["^V",[["~$p","^M"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1048,"^13","^14","^S",1048,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"~$pcat",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",992,"^R",8,"^S",992,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["~$&","^2U"]]]]],"^37",["^ ","^12",true,"^15",0,"^[",[["^V",["^2U"]]],"^U",["^V",[["~$&","^2U"]]],"^11",["^V",[null]]]],"^1E",true,"^=","~$cljs.spec.alpha/pcat","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^37",["^ ","^12",true,"^15",0,"^[",[["^V",["^2U"]]],"^U",["^V",[["~$&","^2U"]]],"^11",["^V",[null]]],"^[",[["^V",["^2U"]]],"^10",null,"^11",["^V",[null]],"^R",1,"^12",true,"^Q",992,"^13","^14","^S",992,"^15",0,"^16",true,"^U",["^V",[["~$&","^2U"]]]],"^67",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",42,"^R",4,"^S",42,"^T",12,"^4P","^1K","^Y",null,"^U",["^V",["^W",["^V",[["^X","^26","^27","^28","~$x"]]]]]],"^4P","^1K","^=","~$cljs.spec.alpha/explain*","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^X","^26","^27","^28","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",42,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^26","^27","^28","~$x"]]]]],"^Y",null],"~$validate-fn",["^ ","^N",null,"^O",["^ ","^P","/home/ru/clojure/simpro-scene/resources/public/js/workshop2/cljs/spec/alpha.cljs","^Q",1329,"^R",8,"^S",1329,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$f","^1Y","~$iters"]]]]],"^Y","returns f if valid, else smallest"],"^1E",true,"^=","~$cljs.spec.alpha/validate-fn","^P","resources/public/js/workshop2/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$f","^1Y","^;2"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1329,"^13",["^6",[null,"^14"]],"^S",1329,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^1Y","^;2"]]]]],"^Y","returns f if valid, else smallest"]],"~:cljs.spec/registry-ref",[["~:cljs.spec.alpha/kvs->map",["^V",["~$cljs.spec.alpha/conformer",["^V",["~$fn*",["~$p1__34140#"],["^V",["~$cljs.core/zipmap",["^V",["~$cljs.core/map","~:cljs.spec.alpha/k","^;8"]],["^V",["^;:","~:cljs.spec.alpha/v","^;8"]]]]]],["^V",["^;7",["~$p1__34141#"],["^V",["^;:",["^V",["~$cljs.core/fn",[["~$k","~$v"]],["^ ","^;;","~$k","^;<","~$v"]]],"^;="]]]]]]]],"~:require-macros",["^ ","~$c","^A","^A","^A","~$s","^>","^>","^>","^F","^G","^G","^G"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^M","^2Y","^7>","~:args","~:cljs.spec.alpha/failure","~$cljs.spec.alpha/*","~:max-tries","~:path","~:req-un","~:opt-un","^33","~$cljs.spec.alpha/+","~:p2","^9P","~:cljs.spec.alpha/unknown","~$cljs.core/sequential?","~:cljs.spec.alpha/value","~:gfn","~:cljs.spec.alpha/recursion-limit","~:cljs.spec.alpha/name","~:pred-exprs","^90","~:keys-pred","~:gen-max","~:shrunk","~:fn","~$cljs.spec.alpha/alt","~$cljs.core/vector?","^6A","^9R","~$cljs.core/=","~:opt-keys","^1T","^8H","~:cljs.spec.alpha/rep","~:pred","^6B","^7?","~:splice","^7@","^2V","^51","~:cljs.spec.alpha/accept","^1S","~:else","^9L","~$cljs.core/count","~$cljs.spec.alpha/and","^4S","^4T","~$cljs.spec.alpha/cat","~:_","^6C","^92","~:maybe","~:via","~$cljs.spec.alpha/every","^1Z","~:req-specs","~$cljs.spec.alpha/or","^1:","~:cljs.spec.alpha/gfn","^7A","^1W","~$v","~:cljs.spec.alpha/spec","^4V","~:conform-keys","^4U","^;8","^32","~$cljs.spec.alpha/fspec","^53","~$fn","~:amp","^5F","^3T","^1X","^4D","~$cljs.spec.alpha/nilable","^4W","^;<","~$cljs.spec.alpha/tuple","^55","^19","~$cljs.core/map?","^94","~:p1","^;9","~:cljs.spec.alpha/problems","^7B","~$%","^;:","^;5","~$method","~:distinct","^4X","^8","~$cljs.spec.alpha/keys","^7C","^;=","^3D","^7D","^7W","~:reason","~$cljs.spec.alpha/merge","~:cljs.spec.alpha/invalid","^3G","^7E","~:req","^7F","^7G","~$nil?","~:assertion-failed","^3:","^;7","~$cljs.core/<=","^6G","~:cljs.spec.alpha/amp","~:id","^8?","^7H","~:min-count","~:kind","~:smallest","^34","~$cljs.core/set?","~:count","^8>","^7Y","~$cljs.core/nil?","^6?","~:req-keys","^6@","~$k","^;;","^;>","~$cljs.core/list?","^7I","^8K","^1U","~:opt-specs","~:cljs.spec.alpha/args","^1V","~$ifn?","~:pred-forms","^4Y","^X","^:","~$distinct?","~:max-count","^7J","^93","~:max-elements","^7K","^6I","^5C","~$cljs.spec.alpha/multi-spec","~$cljs.core/coll?","^9D","^4M","~:num-elements","^1Y","^7L","^4Z","~$apply","^6U","^7M","^7N","^7X","~:min-elements","^4[","^7O","^95","~:cljs.spec.alpha/alt","~$cljs.core/or","^8I","^9O","~:cljs.spec.alpha/pred","^;","~:cljs.spec.alpha/nil","^9I","^8J","^;6","~:in","^91","^7P","~:accept","~$cljs.spec.alpha/&","~:opt","^7Q","~:cljs.spec.alpha/pcat","^50","~$cljs.spec.alpha/?"]],"~:order",["^4D","^;P","^;K","^<K","^<?","~~:_","^=C","^;V","^=?","^;>","^=;","^<W","^;L","^3D","^5C","^;U","^<T","^;T","^=8","^=0","^<>","^1S","^1T","^1U","^1V","^1W","^1X","^1Z","^;5","^;6","^;7","^;8","^;9","^;:","^;;","^;<","^;=","~$k","~$v","^6G","^5F","^=<","^<M","^<A","^3:","^;C","^<N"]],"^Y",null]