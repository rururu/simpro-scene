; Mon Sep 21 20:58:37 MSK 2020
; 
;+ (version "3.5")
;+ (build "Build 663")

([BrigBern_Class0] of  WorkingPrograms

	(butt-load-progs "Load Programs/protege.core/ldns")
	(cloPrograms
		[Clojure_Class10000]
		[RuleEngine_Class30000]
		[BrigBern_Class7])
	(title "OSMRoads Programs"))

([BrigBern_Class1] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [BrigBern_Class0])
	(%3ACREATION-TIMESTAMP "2018.01.08 22:17:43.977 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class10000] of  CloFunction

	(source "(let [[w s e n] bbx]\n  (str \"https://overpass.kumi.systems/api/interpreter?data=[out:json];(way[\" way-type \"](\" s \",\" w \",\" n \",\" e \"););out%20body;%3E;out%20skel%20qt;\"))")
	(title "way-api-url [bbx way-type]"))

([BrigBern_Class10001] of  CloFunction

	(source "(let [d (/ rad 60)\n       bbx [(- lon d) (- lat d) (+ lon d) (+ lat d)]]\n  (vreset! OSM-DATA (way-data bbx way-type)))")
	(title "get-way-data [[lat lon] rad way-type]"))

([BrigBern_Class10006] of  CloFunction

	(source "(try\n  (let [url (way-api-url bbx way-type)\n         ;;_ (println :URL url)\n         jsn (json/read-str (slurp url) :key-fn keyword)]\n      jsn)\n  (catch Exception e\n    (println e)\n    nil))")
	(title "way-data [bbx way-type]"))

([BrigBern_Class13] of  CloFunction

	(source "(filter #(some? (get-in % kk)) data)")
	(title "filter-kk [kk data]"))

([BrigBern_Class130000] of  CloVar

	(source "[]")
	(title "PATH"))

([BrigBern_Class130008] of  CloFunction

	(source "(< (count (.getReferences inst)) 2)")
	(title "unref [inst]"))

([BrigBern_Class130280] of  CloFunction

	(source "(def PATH [])\n(ssv inst \"status\" \"CLEAR\")")
	(title "clear-path [hm inst]"))

([BrigBern_Class130319] of  CloFunction

	(source "(doseq [ins (cls-instances cls)]\n  (when (unref ins)\n    (delin ins)\n    (print \".\")))\n(println)")
	(title "delete-unref [cls]"))

([BrigBern_Class130330] of  CloFunction

	(source "(doseq [ins (cls-instances cls)]\n  (if (unref ins)\n    (.show *prj* ins)))")
	(title "find-unref [cls]"))

([BrigBern_Class14] of  CloFunction

	(source "(filter #(= (get-in % kk) v) data)")
	(title "filter-kkv [kk v data]"))

([BrigBern_Class15] of  CloFunction

	(source "(filter #(not= (get-in % kk) v) data)")
	(title "filter-kkv-not [kk v data]"))

([BrigBern_Class16] of  CloFunction

	(source "(sort (set (mapcat keys data)))")
	(title "tags [data]"))

([BrigBern_Class19] of  CloFunction

	(source "(let [sta (for [t (tags @OSM-DATA)]\n	(let [fl (filter-kk t @OSM-DATA)]\n	  [t (count fl)]))\n        sta  (filter #(> (second %) 0) sta)]\n  (sort second sta))")
	(title "tag-stat []"))

([BrigBern_Class2] of  Run

	(butt-ass-inss "Assert Instances/ru.rules/ass-inss")
	(butt-fire "Fire/ru.rules/fire-all-rules")
	(butt-run "Run/ru.rules/run-engine")
	(butt-step "Step/ru.rules/step-engine")
	(mode run)
	(steps 1)
	(title "OSMRoadsRun"))

([BrigBern_Class20] of  CloVar

	(source "(volatile! [])")
	(title "OSM-DATA"))

([BrigBern_Class20000] of  CloFunction

	(source "(reduce #(assoc %1 \n	     (:id %2) \n	     [(:lat %2) (:lon %2)]) \n	{} nodes)")
	(title "id-points [nodes]"))

([BrigBern_Class20001] of  CloFunction

	(source "(reduce #(assoc %1 \n	     (:id %2) \n	     (map (fn[x] (idp x)) (:nodes %2))) \n	{} ways)")
	(title "id-way-points [idp ways]"))

([BrigBern_Class20002] of  CloFunction

	(source "(if-let [els (seq (:elements data))]\n  (filter-kkv [:type] \"node\" els))")
	(title "nodes [data]"))

([BrigBern_Class20003] of  CloFunction

	(source "(let [id (str id)\n       [[la1 lo1] [la2 lo2]] [(first pts) (last pts)]\n       [lat1 lon1] [(MapOb/getDegMin la1) (MapOb/getDegMin lo1)]\n       [lat2 lon2] [(MapOb/getDegMin la2) (MapOb/getDegMin lo2)]\n       poi (foc \"OMTPoly\" \"label\" id)]\n    (ssv poi \"description\" id)\n    (ssv poi \"latitude\" lat1)\n    (ssv poi \"longitude\" lon1)\n    (ssv poi \"lineColor\" W-COLOR)\n    (ssv poi \"line\" (fifos \"Line\" \"label\" \"L3\"))\n    (ssvs poi \"points\" [(str lat1 \" \" lon1) (str lat2 \" \" lon2)])\n    (OMT/getOrAdd poi)\n    poi)")
	(title "create-line [[id pts]]"))

([BrigBern_Class20004] of  CloFunction

	(source "(if-let [els (seq (:elements data))]\n  (let [idp (id-points (nodes data))]\n    (->> (filter-kkv [:type] \"way\" els)\n      (filter-kkv [:tags (keyword way-type)] way-subtype)\n      (id-way-points idp))))")
	(title "filter-data [data way-type way-subtype]"))

([BrigBern_Class3] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [BrigBern_Class2])
	(%3ACREATION-TIMESTAMP "2018.01.08 22:18:35.062 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class30000] of  CloFunction

	(source "(let [rmma (proxy [RuMapMouseAdapter] []\n	(mouseLeftButtonAction [mo llp runa]\n                        (println MODE mo llp runa)\n	  (condp = MODE\n	    'ADD (add-way llp)\n	    'REMOVE (remove-way mo)\n	    (println (or (if mo (.getName mo)) (seq llp))))\n	  true))\n       pgs (seq (OMT/getPlaygrounds))]\n  (.setRuMapMouseAdapter (first pgs) rmma)\n  (def RMMA true))")
	(title "set-mouse-adapter []"))

([BrigBern_Class40000] of  CloFunction

	(source "(let [dw (crin \"Dirway\")\n       way (crin \"Way\")]\n  (ssv way \"id\" (str id))\n  (ssv way \"poly\" lin)\n  (ssv way \"source\" (str (vec pts)))\n  (ssv dw \"direction\" dir)\n  (ssv dw \"way\" way)\n  dw)")
	(title "create-dirway [[dir [id pts] lin]]"))

([BrigBern_Class40001] of  CloVar

	(source "\"FORWARD\"")
	(title "F"))

([BrigBern_Class40002] of  CloVar

	(source "\"BACKWARD\"")
	(title "B"))

([BrigBern_Class40005] of  CloFunction

	(source "(if (not RMMA)\n  (set-mouse-adapter))\n(let [mp (into {} hm)\n       sel (seq (selection mp \"tagvalue\"))]\n  (if (empty? sel)\n    (ssv inst \"status\" \"Select tagvalue for ways!\")\n    (let [[wt wst] (read-string (sv (first sel) \"value\"))]\n      (println :WAY-TYPE wt :WAY-SUBTYPE wst)\n      (def WAY-TYPE wt)\n      (def WAY-SUBTYPE wst)\n      (def MODE 'ADD)\n      (def RADIUS (sv inst \"radius\"))\n      (ssv inst \"status\" \"MODE ADD\"))))")
	(title "mode-add [hm inst]"))

([BrigBern_Class40006] of  CloFunction

	(source "(if (= MODE 'ADD)\n  (do (def MODE 'REMOVE)\n    (ssv inst \"status\" \"MODE REMOVE\"))\n  (ssv inst \"status\" \"Add ways before\"))")
	(title "mode-remove [hm inst]"))

([BrigBern_Class40008] of  CloVar

	(source "false")
	(title "RMMA"))

([BrigBern_Class40011] of  CloVar

	(source "nil")
	(title "MODE"))

([BrigBern_Class40012] of  CloFunction

	(source "(println :MODE MODE)\n(get-way-data (seq llp) RADIUS WAY-TYPE)\n(if (nil? @OSM-DATA)\n  (println :NO-DATA)\n  (let [ipss (filter-data @OSM-DATA WAY-TYPE WAY-SUBTYPE)]\n    (if (empty? ipss)\n      (println \"Try in other location..\")\n      (if (empty? PATH)\n        (do (def PATH (vec (map #(vector nil % (create-line %)) ipss)))\n          (println \"Initial\" (count PATH) \"ways..\"))\n        (let [[ldir lips llin] (last PATH)\n               [sdi [ld nd] ips :as short] (nearest-to lips ipss)]\n          (if (nil? short)\n            (println \"No continuation!\")\n            (let [lin (create-line ips)]\n              (def PATH         \n                (if (= (count PATH) 1)\n                  [[ld lips llin] [nd ips lin]]\n                  (conj PATH [nd ips lin])))\n              (println \"In PATH\" (count PATH) \"ways..\")))) ))))")
	(title "add-way [llp]"))

([BrigBern_Class40013] of  CloFunction

	(source "(println :MODE MODE)\n(if-let [lp (last PATH)]\n  (if (some? (first lp))\n    (do (OMT/removeMapOb (nth lp 2) true)\n      (def PATH (vec (butlast PATH)))\n      (println \"Remains\" (count PATH) \"ways..\")) \n    (if (nil? mo)\n      (println \"Try again in other place of line..\")\n      (let [id (.getName mo)]\n        (OMT/removeMapOb mo true)\n        (def PATH (vec (filter #(not= (str (first (second %))) id) PATH)))\n        (println \"Removed from PATH way\" id \",\" \"remains\" (count PATH))))))")
	(title "remove-way [mo]"))

([BrigBern_Class40015] of  CloVar

	(source "0")
	(title "RADIUS"))

([BrigBern_Class40018] of  CloVar

	(source "\"FFFF0000\"")
	(title "W-COLOR"))

([BrigBern_Class5] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.01.08 22:19:32.135 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class60002] of  Display

	(source "<html>Select tagvalue for ways!<br>"))

([BrigBern_Class60118] of  CloFunction

	(source "(if (not (empty? PATH))\n  (let [mp (into {} hm)\n         ri (crin (mp \"road-subclass\"))]\n    (ssv ri \"from1\" (mp \"from1\"))\n    (ssv ri \"to1\" (mp \"to1\"))\n    (ssvs ri \"dirways\" (map create-dirway PATH))\n    (.show *prj* ri)\n    (def MODE 'CREATE)\n    (ssv inst \"status\" (str \"MODE CREATE, in PATH \" (count PATH) \" ways.\")))\n  (ssv inst \"status\" \"Add ways before!\"))")
	(title "create-road [hm inst]"))

([BrigBern_Class7] of  CloProgram

	(cloFunctions
		[BrigBern_Class130008]
		[BrigBern_Class10000]
		[BrigBern_Class10006]
		[BrigBern_Class10001]
		[BrigBern_Class16]
		[BrigBern_Class13]
		[BrigBern_Class14]
		[BrigBern_Class15]
		[BrigBern_Class19]
		[BrigBern_Class20002]
		[BrigBern_Class20000]
		[BrigBern_Class20001]
		[BrigBern_Class20004]
		[BrigBern_Class20003]
		[BrigBern_Class70001]
		[BrigBern_Class70000]
		[BrigBern_Class40000]
		[BrigBern_Class40012]
		[BrigBern_Class40013]
		[BrigBern_Class30000]
		[BrigBern_Class40005]
		[BrigBern_Class40006]
		[BrigBern_Class130280]
		[BrigBern_Class60118]
		[BrigBern_Class130319]
		[BrigBern_Class130330]
		[OSMRoads_Class10002]
		[OSMRoads_Class10005])
	(cloNamespace [BrigBern_Class8])
	(cloVars
		[BrigBern_Class20]
		[BrigBern_Class80011]
		[BrigBern_Class80012]
		[BrigBern_Class40008]
		[BrigBern_Class40011]
		[BrigBern_Class40015]
		[BrigBern_Class40018]
		[BrigBern_Class40001]
		[BrigBern_Class40002]
		[BrigBern_Class130000])
	(title "OSM Data"))

([BrigBern_Class70000] of  CloFunction

	(source "(loop [pool (rest from) sdi-dir-ips (shortest-dist ips (first from))]\n  (cond\n    (empty? pool) sdi-dir-ips\n    (nil? sdi-dir-ips)\n      (recur (rest (rest pool)) (shortest-dist ips (first (rest from))))\n    (= ips (first pool)) (recur (rest pool) sdi-dir-ips)\n    true\n      (let [[nsdi ndir nips :as short] (shortest-dist ips (first pool))]\n        (if (< nsdi (first sdi-dir-ips))\n          (recur (rest pool) short)\n          (recur (rest pool) sdi-dir-ips)))))")
	(title "nearest-to [ips from]"))

([BrigBern_Class70001] of  CloFunction

	(source "(if (not= ips1 ips2)\n  (let [llp1 (second ips1)\n         llp2 (second ips2)\n         [[la11 lo11] [la12 lo12]] [(first llp1) (last llp1)]\n         [[la21 lo21] [la22 lo22]] [(first llp2) (last llp2)]\n         dis-var {(MapOb/distanceNM la11 lo11 la21 lo21) [B F]	;; f1 f2\n                     (MapOb/distanceNM la11 lo11 la22 lo22) [B B]	;; f1 l2\n                     (MapOb/distanceNM la12 lo12 la21 lo21) [F F]	;; l1 f2\n                     (MapOb/distanceNM la12 lo12 la22 lo22) [F B]}	;; l1 l2\n        sdi (apply min (keys dis-var))\n        dir (dis-var sdi)]\n    [sdi dir ips2]))")
	(title "shortest-dist [ips1 ips2]"))

([BrigBern_Class8] of  CloNamespace

	(source "(:use protege.core) \n(:require\n   [clojure.data.json :as json])\n(:import\n  ru.igis.omtab.MapOb\n  ru.igis.omtab.OMT\n  ru.igis.omtab.OMTPoly\n  ru.igis.omtab.gui.RuMapMouseAdapter\n  edu.stanford.smi.protege.ui.DisplayUtilities)")
	(title "osm.data"))

([BrigBern_Class80011] of  CloVar

	(source "\"railway\"")
	(title "WAY-TYPE"))

([BrigBern_Class80012] of  CloVar

	(source "\"rail\"")
	(title "WAY-SUBTYPE"))

([BrigBern_Class80016] of  Tagvalue

	(value "[\"railway\" \"rail\"]"))

([BrigBern_Class80017] of  Tagvalue

	(value "[\"highway\" \"motorway\"]"))

([BrigBern_Class90003] of  Tagvalue

	(value "[\"highway\" \"primary\"]"))

([OSMRoads_Class10000] of  CloFuncall

	(source "osm.data/PATH"))

([OSMRoads_Class100006] of  Tagvalue

	(value "[\"highway\" \"service\"]"))

([OSMRoads_Class10001] of  Tagvalue

	(value "[\"highway\" \"unclassified\"]"))

([OSMRoads_Class10002] of  CloFunction

	(source "(if-let [sel (seq (DisplayUtilities/pickInstances nil *kb* [(cls \"Road\")]))]\n  (doseq [rd sel]\n    (doseq [dw (svs rd \"dirways\")]\n       (-> (sv dw \"way\")\n         (sv \"poly\")\n         OMT/getOrAdd))))")
	(title "show-roads [hm inst]"))

([OSMRoads_Class10004] of  RoadControl

	(but-add "Mode Add/osm.data/mode-add")
	(but-clear "Clear/osm.data/clear-path")
	(but-cre "Create Road/osm.data/create-road")
	(but-hide-roads "Hide Roads/osm.data/hide-roads")
	(but-rem "Mode Remove/osm.data/mode-remove")
	(but-show-roads "Show Existing Roads/osm.data/show-roads")
	(from1 "Aboyne")
	(radius 0.01)
	(road-subclass Motoroad)
	(status "MODE CREATE, in PATH 65 ways.")
	(tagvalue
		[BrigBern_Class80016]
		[OSMRoads_Class40001]
		[BrigBern_Class80017]
		[BrigBern_Class90003]
		[OSMRoads_Class10001]
		[OSMRoads_Class20142]
		[OSMRoads_Class60003]
		[OSMRoads_Class70000]
		[OSMRoads_Class100006])
	(title "Roads Control")
	(to1 "Aberdeen Harbour"))

([OSMRoads_Class10005] of  CloFunction

	(source "(if-let [sel (seq (DisplayUtilities/pickInstances nil *kb* [(cls \"Road\")]))]\n  (doseq [rd sel]\n    (doseq [dw (svs rd \"dirways\")]\n       (OMT/removeMapOb \n         (-> (sv dw \"way\")\n           (sv \"poly\"))\n         false))))")
	(title "hide-roads [hm inst]"))

([OSMRoads_Class120000] of  CloFuncall

	(source "(in-ns 'osm.data)"))

([OSMRoads_Class120001] of  CloFuncall

	(source "(get-way-data [43.755 7.448] 02 \"railway\")"))

([OSMRoads_Class120008] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.04.05 21:36:41.369 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class150000] of  CloFuncall

	(source "OSM-DATA"))

([OSMRoads_Class150001] of  CloFuncall

	(source "(get-way-data [43.773 7.493] 0.01 [\"railway\" \"rail\"])"))

([OSMRoads_Class150002] of  CloFuncall

	(source "(get-way-data [43.773 7.493] 0.01 \"railway\")"))

([OSMRoads_Class20021] of  Tagvalue

	(value "[\"highway\" \"primary\"]"))

([OSMRoads_Class20142] of  Tagvalue

	(value "[\"highway\" \"path\"]"))

([OSMRoads_Class20164] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.02.11 18:18:16.208 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class30005] of  Table2

	(column1
		"object"
		"run"
		"parent"
		"instance"
		"scale"
		"next_actions"
		"title"
		"status"
		"id")
	(column2
		"SimpleInstance(BrigBern_Class100001 of [Cls(NavOb)])"
		"{}"
		"Tsk24747"
		"SimpleInstance(OSMRoads_Class30003 of [Cls(FlightView)])"
		"100000"
		"[#object[edu.stanford.smi.protege.model.DefaultSimpleInstance 0x5d00e1c6 \"SimpleInstance(OSMRoads_Class20160 of [Cls(GoRoad)])\"]]"
		"Follow Car"
		"FAILED"
		":?")
	(title "FlightView 12"))

([OSMRoads_Class40001] of  Tagvalue

	(value "[\"railway\" \"narrow_gauge\"]"))

([OSMRoads_Class43] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.02.05 20:57:54.978 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class50002] of  CloFuncall

	(source "osm.data/OSM-DATA"))

([OSMRoads_Class60003] of  Tagvalue

	(value "\"highway\" \"tertiary\""))

([OSMRoads_Class70000] of  Tagvalue

	(value "[\"highway\" \"residential\"]"))

([OSMRoads_Class70130] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.03.24 21:56:02.306 MSK")
	(%3ACREATOR "ru"))
