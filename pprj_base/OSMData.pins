; Wed Dec 30 21:57:54 MSK 2020
; 
;+ (version "3.5")
;+ (build "Build 663")

([BrigBern_Class1] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.01.08 22:17:43.977 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class10000] of  CloFunction

	(source "(let [[w s e n] bbx]\n  (str SERVER \n        \"?data=[out:json];(\" \n        kind \n        \"[\"\n        kind-type \n        \"](\" \n        s \n        \",\" \n        w\n        \",\"\n        n\n        \",\"\n        e \n        \"););out%20body;%3E;out%20skel%20qt;\"))")
	(title "osm-api-url [bbx kind kind-type]"))

([BrigBern_Class10006] of  CloFunction

	(source "(try\n  (let [url (osm-api-url bbx kind kind-type)\n         ;;_ (println :URL url)\n         jsn (json/read-str (slurp url) :key-fn keyword)]\n      jsn)\n  (catch Exception e\n    (println e)\n    nil))")
	(title "osm-data [bbx kind kind-type]"))

([BrigBern_Class13] of  CloFunction

	(source "(filter #(some? (get-in % kk)) data)")
	(title "filter-kk [kk data]"))

([BrigBern_Class130000] of  CloVar

	(source "(defonce PATH [])")
	(title "defoncePATH"))

([BrigBern_Class130008] of  CloFunction

	(source "(< (count (.getReferences inst)) 2)")
	(title "unref [inst]"))

([BrigBern_Class130280] of  CloFunction

	(source "(def PATH [])\n(ssv inst \"status\" \"CLEAR\")")
	(title "clear-path [hm inst]"))

([BrigBern_Class130319] of  CloFunction

	(source "(doseq [ins (cls-instances cls)]\n  (when (unref ins)\n    (delin ins)\n    (print \".\")))\n(println)")
	(title "delete-unref [cls]"))

([BrigBern_Class130330] of  CloFunction

	(source "(doseq [ins (cls-instances cls)]\n  (if (unref ins)\n    (.show *prj* ins)))")
	(title "find-unref [cls]"))

([BrigBern_Class14] of  CloFunction

	(source "(filter #(= (get-in % kk) v) data)")
	(title "filter-kkv [kk v data]"))

([BrigBern_Class15] of  CloFunction

	(source "(filter #(not= (get-in % kk) v) data)")
	(title "filter-kkv-not [kk v data]"))

([BrigBern_Class16] of  CloFunction

	(source "(sort (set (mapcat keys data)))")
	(title "tags [data]"))

([BrigBern_Class19] of  CloFunction

	(source "(let [sta (for [t (tags odata)]\n	(let [fl (filter-kk t odata)]\n	  [t (count fl)]))\n        sta  (filter #(> (second %) 0) sta)]\n  (sort second sta))")
	(title "tag-stat [odata]"))

([BrigBern_Class20] of  CloVar

	(source "\"way\"")
	(title "KIND"))

([BrigBern_Class20000] of  CloFunction

	(source "(reduce #(assoc %1 \n	     (:id %2) \n	     [(:lat %2) (:lon %2)]) \n	{} nodes)")
	(title "id-points [nodes]"))

([BrigBern_Class20001] of  CloFunction

	(source "(reduce #(assoc %1 \n	     (:id %2) \n	     (map (fn[x] (idp x)) (:nodes %2))) \n	{} ways)")
	(title "id-osm-points [idp ways]"))

([BrigBern_Class20002] of  CloFunction

	(source "(if-let [els (seq (:elements data))]\n  (filter-kkv [:type] \"node\" els))")
	(title "nodes [data]"))

([BrigBern_Class20003] of  CloFunction

	(source "(let [id (str id)\n       [[la1 lo1] [la2 lo2]] [(first pts) (last pts)]\n       [lat1 lon1] [(MapOb/getDegMin la1) (MapOb/getDegMin lo1)]\n       [lat2 lon2] [(MapOb/getDegMin la2) (MapOb/getDegMin lo2)]\n       poi (foc \"OMTPoly\" \"label\" id)]\n    (ssv poi \"description\" id)\n    (ssv poi \"latitude\" lat1)\n    (ssv poi \"longitude\" lon1)\n    (ssv poi \"lineColor\" \"FF009900\")\n    (ssv poi \"line\" (fifos \"Line\" \"label\" \"L3\"))\n    (ssvs poi \"points\" [(str lat1 \" \" lon1) (str lat2 \" \" lon2)])\n    (OMT/getOrAdd poi)\n    poi)")
	(title "create-line [[id pts]]"))

([BrigBern_Class20004] of  CloFunction

	(source "(if-let [els (seq (:elements data))]\n  (let [idp (id-points (nodes data))]\n    (->> (filter-kkv [:type] kind els)\n      (filter-kkv [:tags (keyword kind-type)] kind-subtype)\n      (id-osm-points idp))))")
	(title "filter-data [data kind kind-type kind-subtype]"))

([BrigBern_Class3] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.01.08 22:18:35.062 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class30000] of  CloFunction

	(source "(let [rmma (proxy [RuMapMouseAdapter] []\n	(mouseLeftButtonAction [mo llp runa]\n                            (println MODE mo (seq llp) (.getName runa))\n	  (condp = MODE\n	    'ADD (add-way llp)\n	    'REMOVE (remove-way mo)\n                              'NODES (mk-node (reverse llp))\n	    (println (or (if mo (.getName mo)) (seq llp))))\n	  true))\n       pgs (seq (OMT/getPlaygrounds))]\n  (.setRuMapMouseAdapter (first pgs) rmma)\n  rmma)")
	(title "set-mouse-adapter []"))

([BrigBern_Class40000] of  CloFunction

	(source "(let [dw (crin \"Dirway\")\n       way (foc \"Way\" \"id\" id)]\n  (ssv way \"poly\" lin)\n  (ssv way \"source\" (str (vec pts)))\n  (ssv dw \"direction\" dir)\n  (ssv dw \"way\" way)\n  dw)")
	(title "create-dirway [[dir [id pts] lin]]"))

([BrigBern_Class40005] of  CloFunction

	(source "(if (nil? RMMA)\n  (def RMMA (set-mouse-adapter)))\n(let [srv (get-server)]\n  (f/set-server srv)\n  (def MODE 'ADD)\n  (ssv inst \"status\" (str \"MODE \" MODE))\n  (println \n    :MODE MODE \n    :SERVER srv\n    :KIND (get-kind)\n    :TAGS (get-kind-type) (get-kind-subtype) \n    :RADIUS (get-radius)))")
	(title "mode-add [hm inst]"))

([BrigBern_Class40006] of  CloFunction

	(source "(if (= MODE 'ADD)\n  (do (def MODE 'REMOVE)\n    (ssv inst \"status\" \"MODE REMOVE\"))\n  (ssv inst \"status\" \"Add ways before\"))")
	(title "mode-remove [hm inst]"))

([BrigBern_Class40008] of  CloVar

	(source "(defonce RMMA nil)")
	(title "defonceRMMA"))

([BrigBern_Class40011] of  CloVar

	(source "(defonce MODE nil)")
	(title "defonceMODE"))

([BrigBern_Class40012] of  CloFunction

	(source "(println :MODE MODE)\n(let [k (get-kind)\n       kt (get-kind-type)\n       kst (get-kind-subtype)\n       rad (get-radius)\n       box (f/bbx (reverse llp) rad)\n       oda (f/osm-data box k kt)\n       ipss (f/filter-data oda k kt kst)]\n  (if (empty? ipss)\n    (println \"Try in other location..\")\n    (if (empty? PATH)\n      (do (def PATH (vec (map #(vector nil % (create-line %)) ipss)))\n        (println \"Initial\" (count PATH) \"ways..\"))\n      (let [[ldir lips llin] (last PATH)\n             [sdi [ld nd] ips :as short] (f/nearest-to lips ipss)]\n        (if (nil? short)\n          (println \"No continuation!\")\n          (let [lin (create-line ips)]\n            (def PATH         \n              (if (= (count PATH) 1)\n                [[ld lips llin] [nd ips lin]]\n                (conj PATH [nd ips lin])))\n            (println \"In PATH\" (count PATH) \"ways..\"))) ) )))")
	(title "add-way [llp]"))

([BrigBern_Class40013] of  CloFunction

	(source "(println :MODE MODE)\n(if-let [lp (last PATH)]\n  (if (some? (first lp))\n    (do (OMT/removeMapOb (nth lp 2) true)\n      (def PATH (vec (butlast PATH)))\n      (println \"Remains\" (count PATH) \"ways..\")) \n    (if (nil? mo)\n      (println \"Try again in other place of line..\")\n      (let [id (.getName mo)]\n        (OMT/removeMapOb mo true)\n        (def PATH (vec (filter #(not= (str (first (second %))) id) PATH)))\n        (println \"Removed from PATH way\" id \",\" \"remains\" (count PATH))))))")
	(title "remove-way [mo]"))

([BrigBern_Class40015] of  CloVar

	(source ";; 50 meters\n0.0005")
	(title "RADIUS"))

([BrigBern_Class5] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.01.08 22:19:32.135 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class60118] of  CloFunction

	(source "(if (not (empty? PATH))\n  (let [mp (into {} hm)\n         ri (crin (mp \"road-subclass\"))]\n    (ssv ri \"from1\" (mp \"from1\"))\n    (ssv ri \"to1\" (mp \"to1\"))\n    (ssvs ri \"dirways\" (map create-dirway PATH))\n    (.show *prj* ri)\n    (def MODE 'CREATE)\n    (ssv inst \"status\" (str \"MODE CREATE, in PATH \" (count PATH) \" ways.\")))\n  (ssv inst \"status\" \"Add ways before!\"))")
	(title "create-road [hm inst]"))

([BrigBern_Class7] of  CloProgram

	(cloFunctions
		[BrigBern_Class130008]
		[BrigBern_Class130330]
		[BrigBern_Class130319]
		[BrigBern_Class20003]
		[BrigBern_Class40000]
		[OSMData_Class50008]
		[OSMData_Class40007]
		[OSMData_Class50012]
		[OSMData_Class50011]
		[OSMData_Class50010]
		[OSMData_Class50014]
		[OSMData_Class70000]
		[OSMData_Class50016]
		[BrigBern_Class40012]
		[OSMData_Class60109]
		[OSMData_Class50013]
		[BrigBern_Class40013]
		[OSMData_Class20004]
		[OSMData_Class20003]
		[OSMData_Class10027]
		[OSMData_Class0]
		[OSMData_Class10028]
		[OSMData_Class1]
		[BrigBern_Class30000]
		[OSMData_Class30034]
		[BrigBern_Class40005]
		[BrigBern_Class40006]
		[BrigBern_Class130280]
		[OSMRoads_Class10002]
		[OSMRoads_Class10005]
		[BrigBern_Class60118]
		[OSMData_Class10003]
		[OSMData_Class80000]
		[OSMData_Class50000]
		[OSMData_Class60000])
	(cloNamespace [BrigBern_Class8])
	(cloVars
		[BrigBern_Class20]
		[BrigBern_Class80011]
		[BrigBern_Class80012]
		[BrigBern_Class40015]
		[BrigBern_Class40011]
		[BrigBern_Class130000]
		[BrigBern_Class40008])
	(title "OSM Ontology"))

([BrigBern_Class70000] of  CloFunction

	(source "(loop [pool (rest from) sdi-dir-ips (shortest-dist ips (first from))]\n  (cond\n    (empty? pool) sdi-dir-ips\n    (nil? sdi-dir-ips)\n      (recur (rest (rest pool)) (shortest-dist ips (first (rest from))))\n    (= ips (first pool)) (recur (rest pool) sdi-dir-ips)\n    true\n      (let [[nsdi ndir nips :as short] (shortest-dist ips (first pool))]\n        (if (< nsdi (first sdi-dir-ips))\n          (recur (rest pool) short)\n          (recur (rest pool) sdi-dir-ips)))))")
	(title "nearest-to [ips from]"))

([BrigBern_Class70001] of  CloFunction

	(source "(if (not= ips1 ips2)\n  (let [llp1 (second ips1)\n         llp2 (second ips2)\n         [f1 l1] [(first llp1) (last llp1)]\n         [f2 l2] [(first llp2) (last llp2)]\n         dis-var {(simple-dist f1 f2) [\"BACKWARD\" \"FORWARD\"]\n                       (simple-dist f1 l2) [\"BACKWARD\" \"BACKWARD\"]\n                       (simple-dist l1 f2) [\"FORWARD\" \"FORWARD\"]\n                       (simple-dist l1 l2) [\"FORWARD\" \"BACKWARD\"]}\n        sdi (apply min (keys dis-var))\n        dir (dis-var sdi)]\n    [sdi dir ips2]))")
	(title "shortest-dist [ips1 ips2]"))

([BrigBern_Class8] of  CloNamespace

	(source "(:use protege.core) \n(:require\n  [osm.func :as f])\n(:import\n  ru.igis.omtab.MapOb\n  ru.igis.omtab.OMT\n  ru.igis.omtab.OMTPoly\n  ru.igis.omtab.gui.RuMapMouseAdapter\n  edu.stanford.smi.protege.ui.DisplayUtilities)")
	(title "osm.onto"))

([BrigBern_Class80011] of  CloVar

	(source "\"railway\"")
	(title "KIND-TYPE"))

([BrigBern_Class80012] of  CloVar

	(source "\"rail\"")
	(title "KIND-SUBTYPE"))

([BrigBern_Class80016] of  Tagvalue

	(value "[\"railway\" \"rail\"]"))

([BrigBern_Class80017] of  Tagvalue

	(value "[\"highway\" \"motorway\"]"))

([BrigBern_Class90003] of  Tagvalue

	(value "[\"highway\" \"primary\"]"))

([OSMData_Class0] of  CloFunction

	(source "(show-mapob nil inst)\n(doseq [egi (svs inst \"edges\")]\n (show-mapob nil egi))")
	(title "show-node [hm inst]"))

([OSMData_Class1] of  CloFunction

	(source "(hide-mapob nil inst)\n(doseq [egi (svs inst \"edges\")]\n (hide-mapob nil egi))")
	(title "hide-node [hm inst]"))

([OSMData_Class10000] of  CloFunction

	(source ";; Result fom -Pi to Pi\n(let [sx (- x2 x1)\n       sy (- y2 y1)]\n  (Math/atan2 sy sx))")
	(title "simple-dir [[x1 y1] [x2 y2]]"))

([OSMData_Class10003] of  CloFunction

	(source "(if-let [noi (sv inst \"node\")]\n  (ssvs inst \"nodes\" (map mk-node (star-points noi)))\n  (println \"Fill node slot!\"))")
	(title "connected-nodes [hm inst]"))

([OSMData_Class10004] of  CloFunction

	(source "(let [sx (- x2 x1)\n       sy (- y2 y1)]\n  (Math/sqrt (+ (* sx sx) (* sy sy))))")
	(title "simple-dist [[x1 y1] [x2 y2]]"))

([OSMData_Class10011] of  CloFunction

	(source "([id [clat clon] rad]\n  (show-bbx id [(- clon rad) (- clat rad) (+ clon rad) (+ clat rad)]))\n([id [w s e n]]\n(let [tsf (fn [[y x]]\n               (str (MapOb/getDegMin y) \" \" (MapOb/getDegMin x)))\n       id (str id)\n       clat (MapOb/getDegMin (/ (+ s n) 2))\n       clon (MapOb/getDegMin (/ (+ w e) 2))\n       pts [[n w] [n e] [s e] [s w] [n w]]\n       pts (map tsf pts)\n       poi (foc \"OMTPoly\" \"label\" id)]\n    (ssv poi \"latitude\" clat)\n    (ssv poi \"longitude\" clon)\n    (ssv poi \"lineColor\" \"FF00AA00\")\n    ;; (ssv poi \"line\" (fifos \"Line\" \"label\" \"L3\"))\n    (ssvs poi \"points\" pts)\n    (OMT/getOrAdd poi)\n    poi))")
	(title "show-bbx"))

([OSMData_Class10012] of  CloFunction

	(source ";; iLine = (id (x1 y1) (x2 y2)...)\n(let [box (bbx [x y] rad)\n       oda (osm-data box kind kind-type)\n       fda (filter-data oda kind kind-type kind-subtype)\n       fbe (filter #(or (in-bbx (first (second %)) box) (in-bbx (last (second %)) box)) (seq fda))]\n  (map #(cons (first %) (map reverse (second %))) fbe))")
	(title "iLines-with-beg-or-end-in-bbx [[x y] rad kind kind-type kind-subtype]"))

([OSMData_Class10027] of  CloFunction

	(source "(OMT/getOrAdd inst)")
	(title "show-mapob [hm inst]"))

([OSMData_Class10028] of  CloFunction

	(source "(if-let[moi (fifos \"MapOb\" \"label\" (sv inst \"label\"))]\n  (if-let [mo (OMT/getMapOb moi)]\n    (OMT/removeMapOb mo false)))")
	(title "hide-mapob [hm inst]"))

([OSMData_Class20000] of  CloVar

	(source "\"https://overpass-api.de/api/interpreter\"")
	(title "SERVER"))

([OSMData_Class20003] of  CloFunction

	(source "(if-let [ils (seq (f/iLines-with-beg-or-end-in-bbx \n                           xy (get-radius) (get-kind) (get-kind-type) (get-kind-subtype)))]\n  (let [ils (f/sort-iLines xy ils)\n         egs (map mk-edge ils)\n         ned (f/nearest-end xy (first ils))\n         noi (foc \"Node\" \"label\" (str \"N\" ned))\n         [x y] ned]\n    (ssv noi \"x\" (float x)) \n    (ssv noi \"y\" (float y)) \n    (ssv noi \"latitude\" (MapOb/getDegMin y))\n    (ssv noi \"longitude\" (MapOb/getDegMin x))\n    (ssv noi \"lineColor\" \"FFFF6800\")\n    (ssv noi \"fillColor\" \"FFFF6800\")\n    (ssv noi \"point-radius\" (int 4))\n    (ssv noi \"oval\" true)\n    (ssvs noi \"edges\" egs)\n    (when (is-show?)\n      (OMT/getOrAdd noi)\n      (println \"Created Node from\" (count egs) \"edges.\"))\n    noi)\n  (when (is-show?)\n    (println \"No edges\")\n    nil))")
	(title "mk-node [xy]"))

([OSMData_Class20004] of  CloFunction

	(source "(let [egi (foc \"Edge\" \"label\" (str (first iLine)))\n       ps (rest iLine)\n       [x y] [(float (ffirst ps)) (float (second (first ps)))]\n       [x2 y2] [(float (first (last ps))) (float (second (last ps)))]\n       [x3 y3] [(/ (Math/abs (+ x x2)) 2) (/ (Math/abs (+ y y2)) 2)]\n       tsf (fn [[x y]] (str (MapOb/getDegMin y) \" \" (MapOb/getDegMin x)))]\n  (ssv egi \"x\" x)\n  (ssv egi \"y\" y)\n  (ssv egi \"x2\" x2)\n  (ssv egi \"y2\" y2)\n  (ssvs egi \"xx\" (map #(str (first %)) ps))\n  (ssvs egi \"yy\" (map #(str (second %)) ps))\n  (ssvs egi \"points\" (map tsf ps))\n  (ssv egi \"latitude\" (MapOb/getDegMin y3))\n  (ssv egi \"longitude\" (MapOb/getDegMin x3))\n  (ssv egi \"lineColor\" \"FFFF6800\")\n  (ssv egi \"line\" (fifos \"Line\" \"label\" \"L2\"))\n  (if (is-show?)\n    (OMT/getOrAdd egi))\n  egi)")
	(title "mk-edge [iLine]"))

([OSMData_Class30000] of  Line

	(capDecoration BUTT)
	(dashPattern "6 6")
	(jointDecoration ROUND)
	(label "L3")
	(lineType STRAIGHT)
	(lineWidth "3"))

([OSMData_Class30004] of  CloFunction

	(source "(def SERVER url)")
	(title "set-server [url]"))

([OSMData_Class30005] of  CloVar

	(source "{\"KUMI\"\n  \"https://overpass.kumi.systems/api/interpreter\"\n  \"MAIN\"\n  \"https://overpass-api.de/api/interpreter\"\n  \"RUSSIAN\"\n  \"https://overpass.openstreetmap.ru/api/interpreter\"\n  \"FRENCH\"\n  \"https://overpass.openstreetmap.fr/api/interpreter\"\n  \"TAIWAN\"\n  \"https://overpass.nchc.org.tw/api/interpreter\"}")
	(title "SRV-MAP"))

([OSMData_Class30016] of  CloFunction

	(source "(and (> x w) (> y s) (< x e) (< y n))")
	(title "in-bbx [[y x] [w s e n]]"))

([OSMData_Class30034] of  CloFunction

	(source "(if (nil? RMMA)\n  (def RMMA (set-mouse-adapter)))\n(let [srv (get-server)]\n  (f/set-server srv)\n  (def MODE 'NODES)\n  (ssv inst \"status\" (str \"MODE \" MODE))\n  (println \n    :MODE MODE \n    :SERVER srv\n    :KIND (get-kind)\n    :TAGS (get-kind-type) (get-kind-subtype) \n    :RADIUS (get-radius)))")
	(title "mode-nodes [hm inst]"))

([OSMData_Class40000] of  RoadControl

	(kind way)
	(radius 0.001)
	(road-subclass Railroad)
	(server RUSSIAN)
	(show TRUE)
	(status "MODE NODES")
	(tagvalue [BrigBern_Class80016])
	(title "RoadControl"))

([OSMData_Class40007] of  CloFunction

	(source "(or (sv (get-control-center) \"kind\") KIND)")
	(title "get-kind []"))

([OSMData_Class40131] of  CloProgram

	(cloFunctions
		[OSMData_Class60051]
		[OSMData_Class30016]
		[OSMData_Class10004]
		[OSMData_Class10000]
		[OSMData_Class30004]
		[BrigBern_Class10000]
		[BrigBern_Class10006]
		[BrigBern_Class16]
		[BrigBern_Class13]
		[BrigBern_Class14]
		[BrigBern_Class15]
		[BrigBern_Class19]
		[BrigBern_Class20002]
		[BrigBern_Class20000]
		[BrigBern_Class20001]
		[BrigBern_Class20004]
		[OSMData_Class10012]
		[BrigBern_Class70001]
		[BrigBern_Class70000]
		[OSMData_Class60013]
		[OSMData_Class60020])
	(cloNamespace [OSMData_Class40132])
	(cloVars
		[OSMData_Class30005]
		[OSMData_Class20000])
	(title "OSM Functions"))

([OSMData_Class40132] of  CloNamespace

	(source "(:require\n   [clojure.data.json :as json])")
	(title "osm.func"))

([OSMData_Class50000] of  CloFunction

	(source "(cond\n  (empty? egs) egs\n  true (let [[d c] (edge-dir-cont xy (first egs))]\n           (cons d (edges-dirs c (rest egs)))))")
	(title "edges-dirs [xy egs]"))

([OSMData_Class50008] of  CloFunction

	(source "(fainst (cls-instances \"RoadControl\") nil)")
	(title "get-control-center []"))

([OSMData_Class50009] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2020.12.15 13:33:47.273 MSK")
	(%3ACREATOR "ru"))

([OSMData_Class50010] of  CloFunction

	(source "(or (sv (get-control-center) \"radius\") RADIUS)")
	(title "get-radius []"))

([OSMData_Class50011] of  CloFunction

	(source "(if-let [tvi (sv (get-control-center) \"tagvalue\")]\n  (second (read-string (sv tvi \"value\")))\n  KIND-SUBTYPE)")
	(title "get-kind-subtype []"))

([OSMData_Class50012] of  CloFunction

	(source "(if-let [tvi (sv (get-control-center) \"tagvalue\")]\n  (first (read-string (sv tvi \"value\")))\n  KIND-TYPE)")
	(title "get-kind-type []"))

([OSMData_Class50013] of  CloFunction

	(source "(letfn [(far-end [p1 e]\n             (let [p [(sv e \"x\") (sv e \"y\")]\n                    p2 [(sv e \"x2\") (sv e \"y2\")]]\n                (if (> (f/simple-dist p1 p) (f/simple-dist p1 p2))\n                  p1\n                  p2)))]\n  (let [p1 [(sv noi \"x\") (sv noi \"y\")]\n         egs (svs noi \"edges\")]\n    (map #(far-end p1 %) egs)))")
	(title "star-points [noi]"))

([OSMData_Class50014] of  CloFunction

	(source "(if-let [srv (sv (get-control-center) \"server\")]\n  (f/SRV-MAP srv)\n  f/SERVER)")
	(title "get-server []"))

([OSMData_Class50016] of  CloFunction

	(source "(is? (sv (get-control-center) \"show\"))")
	(title "is-show? []"))

([OSMData_Class60000] of  CloFunction

	(source "(map #(vector (read-string %1) (read-string %2)) (svs e \"yy\") (svs e \"xx\"))")
	(title "edge-pts [e]"))

([OSMData_Class60013] of  CloFunction

	(source "(let [mindis (fn[ps] (min (simple-dist xy (first ps)) (simple-dist xy (last ps))))\n       lst1 (map #(cons (mindis (rest %)) (cons (first %) (rest %))) iLines)\n       lst2 (sort-by first lst1)]\n  (map rest lst2))")
	(title "sort-iLines [xy iLines]"))

([OSMData_Class60020] of  CloFunction

	(source "(if (< (simple-dist xy (second iLine)) (simple-dist xy (last iLine)))\n  (second iLine)\n  (last iLine))")
	(title "nearest-end [xy iLine]"))

([OSMData_Class60051] of  CloFunction

	(source "(let [dy rad\n       dx (/ dy (Math/abs (Math/cos (Math/toRadians y))))]\n  [(- x dx) (- y dy) (+ x dx) (+ y dy)])")
	(title "bbx [[x y] rad]"))

([OSMData_Class60072] of  Line

	(capDecoration BUTT)
	(jointDecoration ROUND)
	(label "L2")
	(lineType STRAIGHT)
	(lineWidth "2"))

([OSMData_Class60109] of  CloFunction

	(source "(let [dw (crin \"Dirway\")\n       way (foc \"Way\" \"id\" (str id))]\n  (ssv way \"poly\" lin)\n  (ssv way \"source\" (str (vec pts)))\n  (ssv dw \"direction\" dir)\n  (ssv dw \"way\" way)\n  dw)")
	(title "create-dirway [[dir [id pts] lin]]"))

([OSMData_Class70000] of  CloFunction

	(source "(or (sv (get-control-center) \"road-subclass\") \"Railroad\")")
	(title "get-road-subclass []"))

([OSMData_Class80000] of  CloFunction

	(source "(let [xy1 [(sv e \"x\") (sv e \"y\")]\n      xy2 [(sv e \"x2\") (sv e \"y2\")]]\n  (if (< (f/simple-dist xy xy1)\n          (f/simple-dist xy xy2))\n    [\"FORWARD\" xy2]\n    [\"BACKWARD\" xy1]))")
	(title "edge-dir-cont [xy e]"))

([OSMRoads_Class100006] of  Tagvalue

	(value "[\"highway\" \"service\"]"))

([OSMRoads_Class10001] of  Tagvalue

	(value "[\"highway\" \"unclassified\"]"))

([OSMRoads_Class10002] of  CloFunction

	(source "(if-let [sel (seq (DisplayUtilities/pickInstances nil *kb* [(cls \"RoadSubclasses\")]))]\n  (doseq [rd sel]\n    (doseq [dw (svs rd \"dirways\")]\n       (-> (sv dw \"way\")\n         (sv \"poly\")\n         OMT/getOrAdd))))")
	(title "show-roads [hm inst]"))

([OSMRoads_Class10005] of  CloFunction

	(source "(if-let [sel (seq (DisplayUtilities/pickInstances nil *kb* [(cls \"RoadSubclasses\")]))]\n  (doseq [rd sel]\n    (doseq [dw (svs rd \"dirways\")]\n       (OMT/removeMapOb \n         (-> (sv dw \"way\")\n           (sv \"poly\"))\n         false))))")
	(title "hide-roads [hm inst]"))

([OSMRoads_Class120008] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.04.05 21:36:41.369 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class20021] of  Tagvalue

	(value "[\"highway\" \"primary\"]"))

([OSMRoads_Class20142] of  Tagvalue

	(value "[\"highway\" \"path\"]"))

([OSMRoads_Class20164] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.02.11 18:18:16.208 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class40001] of  Tagvalue

	(value "[\"railway\" \"narrow_gauge\"]"))

([OSMRoads_Class43] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.02.05 20:57:54.978 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class60003] of  Tagvalue

	(value "\"highway\" \"tertiary\""))

([OSMRoads_Class70000] of  Tagvalue

	(value "[\"highway\" \"residential\"]"))

([OSMRoads_Class70130] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.03.24 21:56:02.306 MSK")
	(%3ACREATOR "ru"))
