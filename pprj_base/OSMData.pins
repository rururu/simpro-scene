; Fri Dec 11 20:43:04 MSK 2020
; 
;+ (version "3.5")
;+ (build "Build 663")

([BrigBern_Class1] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.01.08 22:17:43.977 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class10000] of  CloFunction

	(source "(let [[w s e n] bbx]\n  (str SERVER \"?data=[out:json];(way[\" way-type \"](\" s \",\" w \",\" n \",\" e \"););out%20body;%3E;out%20skel%20qt;\"))")
	(title "way-api-url [bbx way-type]"))

([BrigBern_Class10001] of  CloFunction

	(source "(let [d (/ rad 60)\n       bbx [(- lon d) (- lat d) (+ lon d) (+ lat d)]]\n  (vreset! OSM-DATA (way-data bbx way-type)))")
	(title "get-way-data [[lat lon] rad way-type]"))

([BrigBern_Class10006] of  CloFunction

	(source "(try\n  (let [url (way-api-url bbx way-type)\n         ;;_ (println :URL url)\n         jsn (json/read-str (slurp url) :key-fn keyword)]\n      jsn)\n  (catch Exception e\n    (println e)\n    nil))")
	(title "way-data [bbx way-type]"))

([BrigBern_Class13] of  CloFunction

	(source "(filter #(some? (get-in % kk)) data)")
	(title "filter-kk [kk data]"))

([BrigBern_Class130000] of  CloVar

	(source "[]")
	(title "PATH"))

([BrigBern_Class130008] of  CloFunction

	(source "(< (count (.getReferences inst)) 2)")
	(title "unref [inst]"))

([BrigBern_Class130280] of  CloFunction

	(source "(def PATH [])\n(ssv inst \"status\" \"CLEAR\")")
	(title "clear-path [hm inst]"))

([BrigBern_Class130319] of  CloFunction

	(source "(doseq [ins (cls-instances cls)]\n  (when (unref ins)\n    (delin ins)\n    (print \".\")))\n(println)")
	(title "delete-unref [cls]"))

([BrigBern_Class130330] of  CloFunction

	(source "(doseq [ins (cls-instances cls)]\n  (if (unref ins)\n    (.show *prj* ins)))")
	(title "find-unref [cls]"))

([BrigBern_Class14] of  CloFunction

	(source "(filter #(= (get-in % kk) v) data)")
	(title "filter-kkv [kk v data]"))

([BrigBern_Class15] of  CloFunction

	(source "(filter #(not= (get-in % kk) v) data)")
	(title "filter-kkv-not [kk v data]"))

([BrigBern_Class16] of  CloFunction

	(source "(sort (set (mapcat keys data)))")
	(title "tags [data]"))

([BrigBern_Class19] of  CloFunction

	(source "(let [sta (for [t (tags @OSM-DATA)]\n	(let [fl (filter-kk t @OSM-DATA)]\n	  [t (count fl)]))\n        sta  (filter #(> (second %) 0) sta)]\n  (sort second sta))")
	(title "tag-stat []"))

([BrigBern_Class20] of  CloVar

	(source "(volatile! [])")
	(title "OSM-DATA"))

([BrigBern_Class20000] of  CloFunction

	(source "(reduce #(assoc %1 \n	     (:id %2) \n	     [(:lat %2) (:lon %2)]) \n	{} nodes)")
	(title "id-points [nodes]"))

([BrigBern_Class20001] of  CloFunction

	(source "(reduce #(assoc %1 \n	     (:id %2) \n	     (map (fn[x] (idp x)) (:nodes %2))) \n	{} ways)")
	(title "id-way-points [idp ways]"))

([BrigBern_Class20002] of  CloFunction

	(source "(if-let [els (seq (:elements data))]\n  (filter-kkv [:type] \"node\" els))")
	(title "nodes [data]"))

([BrigBern_Class20003] of  CloFunction

	(source "(let [id (str id)\n       [[la1 lo1] [la2 lo2]] [(first pts) (last pts)]\n       [lat1 lon1] [(MapOb/getDegMin la1) (MapOb/getDegMin lo1)]\n       [lat2 lon2] [(MapOb/getDegMin la2) (MapOb/getDegMin lo2)]\n       poi (foc \"OMTPoly\" \"label\" id)]\n    (ssv poi \"description\" id)\n    (ssv poi \"latitude\" lat1)\n    (ssv poi \"longitude\" lon1)\n    (ssv poi \"lineColor\" W-COLOR)\n    (ssv poi \"line\" (fifos \"Line\" \"label\" \"L3\"))\n    (ssvs poi \"points\" [(str lat1 \" \" lon1) (str lat2 \" \" lon2)])\n    (OMT/getOrAdd poi)\n    poi)")
	(title "create-line [[id pts]]"))

([BrigBern_Class20004] of  CloFunction

	(source "(if-let [els (seq (:elements data))]\n  (let [idp (id-points (nodes data))]\n    (->> (filter-kkv [:type] \"way\" els)\n      (filter-kkv [:tags (keyword way-type)] way-subtype)\n      (id-way-points idp))))")
	(title "filter-data [data way-type way-subtype]"))

([BrigBern_Class3] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.01.08 22:18:35.062 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class30000] of  CloFunction

	(source "(let [rmma (proxy [RuMapMouseAdapter] []\n	(mouseLeftButtonAction [mo llp runa]\n                        (println MODE mo llp runa)\n	  (condp = MODE\n	    'ADD (add-way llp)\n	    'REMOVE (remove-way mo)\n	    (println (or (if mo (.getName mo)) (seq llp))))\n	  true))\n       pgs (seq (OMT/getPlaygrounds))]\n  (.setRuMapMouseAdapter (first pgs) rmma)\n  rmma)")
	(title "set-mouse-adapter []"))

([BrigBern_Class40000] of  CloFunction

	(source "(let [dw (crin \"Dirway\")\n       way (foc \"Way\" \"id\" id)]\n  (ssv way \"poly\" lin)\n  (ssv way \"source\" (str (vec pts)))\n  (ssv dw \"direction\" dir)\n  (ssv dw \"way\" way)\n  dw)")
	(title "create-dirway [[dir [id pts] lin]]"))

([BrigBern_Class40001] of  CloVar

	(source "\"FORWARD\"")
	(title "F"))

([BrigBern_Class40002] of  CloVar

	(source "\"BACKWARD\"")
	(title "B"))

([BrigBern_Class40005] of  CloFunction

	(source "(if (not RMMA)\n  (set-mouse-adapter))\n(let [mp (into {} hm)\n       sel (seq (selection mp \"tagvalue\"))]\n  (if (empty? sel)\n    (ssv inst \"status\" \"Select tagvalue for ways!\")\n    (let [[wt wst] (read-string (sv (first sel) \"value\"))\n          srv (SRV-MAP (sv inst \"server\"))]\n      (set-server srv)\n      (def WAY-TYPE wt)\n      (def WAY-SUBTYPE wst)\n      (def MODE 'ADD)\n      (def RADIUS (sv inst \"radius\"))\n      (ssv inst \"status\" \"MODE ADD\")\n      (println :SERVER srv :WAY-TYPE wt :WAY-SUBTYPE wst))))")
	(title "mode-add [hm inst]"))

([BrigBern_Class40006] of  CloFunction

	(source "(if (= MODE 'ADD)\n  (do (def MODE 'REMOVE)\n    (ssv inst \"status\" \"MODE REMOVE\"))\n  (ssv inst \"status\" \"Add ways before\"))")
	(title "mode-remove [hm inst]"))

([BrigBern_Class40008] of  CloVar

	(source "(do (declare add-way remove-way mk-node)\n  (let [rmma (proxy [RuMapMouseAdapter] []\n	(mouseLeftButtonAction [mo llp runa]\n                            (println MODE mo (seq llp) (.getName runa))\n	  (condp = MODE\n	    'ADD (add-way llp)\n	    'REMOVE (remove-way mo)\n                              'NODES (mk-node (reverse llp))\n	    (println (or (if mo (.getName mo)) (seq llp))))\n	  true))\n         pgs (seq (OMT/getPlaygrounds))]\n    (.setRuMapMouseAdapter (first pgs) rmma)\n    rmma))")
	(title "RMMA"))

([BrigBern_Class40011] of  CloVar

	(source "nil")
	(title "MODE"))

([BrigBern_Class40012] of  CloFunction

	(source "(println :MODE MODE)\n(get-way-data (seq llp) RADIUS WAY-TYPE)\n(if (nil? @OSM-DATA)\n  (println :NO-DATA)\n  (let [ipss (filter-data @OSM-DATA WAY-TYPE WAY-SUBTYPE)]\n    (if (empty? ipss)\n      (println \"Try in other location..\")\n      (if (empty? PATH)\n        (do (def PATH (vec (map #(vector nil % (create-line %)) ipss)))\n          (println \"Initial\" (count PATH) \"ways..\"))\n        (let [[ldir lips llin] (last PATH)\n               [sdi [ld nd] ips :as short] (nearest-to lips ipss)]\n          (if (nil? short)\n            (println \"No continuation!\")\n            (let [lin (create-line ips)]\n              (def PATH         \n                (if (= (count PATH) 1)\n                  [[ld lips llin] [nd ips lin]]\n                  (conj PATH [nd ips lin])))\n              (println \"In PATH\" (count PATH) \"ways..\")))) ))))")
	(title "add-way [llp]"))

([BrigBern_Class40013] of  CloFunction

	(source "(println :MODE MODE)\n(if-let [lp (last PATH)]\n  (if (some? (first lp))\n    (do (OMT/removeMapOb (nth lp 2) true)\n      (def PATH (vec (butlast PATH)))\n      (println \"Remains\" (count PATH) \"ways..\")) \n    (if (nil? mo)\n      (println \"Try again in other place of line..\")\n      (let [id (.getName mo)]\n        (OMT/removeMapOb mo true)\n        (def PATH (vec (filter #(not= (str (first (second %))) id) PATH)))\n        (println \"Removed from PATH way\" id \",\" \"remains\" (count PATH))))))")
	(title "remove-way [mo]"))

([BrigBern_Class40015] of  CloVar

	(source ";; 50 meters\n0.0005")
	(title "RADIUS"))

([BrigBern_Class40018] of  CloVar

	(source "\"FFFF0000\"")
	(title "W-COLOR"))

([BrigBern_Class5] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.01.08 22:19:32.135 MSK")
	(%3ACREATOR "ta"))

([BrigBern_Class60118] of  CloFunction

	(source "(if (not (empty? PATH))\n  (let [mp (into {} hm)\n         ri (crin (mp \"road-subclass\"))]\n    (ssv ri \"from1\" (mp \"from1\"))\n    (ssv ri \"to1\" (mp \"to1\"))\n    (ssvs ri \"dirways\" (map create-dirway PATH))\n    (.show *prj* ri)\n    (def MODE 'CREATE)\n    (ssv inst \"status\" (str \"MODE CREATE, in PATH \" (count PATH) \" ways.\")))\n  (ssv inst \"status\" \"Add ways before!\"))")
	(title "create-road [hm inst]"))

([BrigBern_Class7] of  CloProgram

	(cloFunctions
		[BrigBern_Class130008]
		[OSMData_Class30004]
		[BrigBern_Class10000]
		[BrigBern_Class10006]
		[BrigBern_Class10001]
		[BrigBern_Class16]
		[BrigBern_Class13]
		[BrigBern_Class14]
		[BrigBern_Class15]
		[BrigBern_Class19]
		[BrigBern_Class20002]
		[BrigBern_Class20000]
		[BrigBern_Class20001]
		[BrigBern_Class20004]
		[BrigBern_Class20003]
		[BrigBern_Class70001]
		[BrigBern_Class70000]
		[BrigBern_Class40000]
		[BrigBern_Class40012]
		[BrigBern_Class40013]
		[BrigBern_Class30000]
		[BrigBern_Class40005]
		[BrigBern_Class40006]
		[BrigBern_Class130280]
		[BrigBern_Class60118]
		[BrigBern_Class130319]
		[BrigBern_Class130330]
		[OSMRoads_Class10002]
		[OSMRoads_Class10005]
		[OSMData_Class10011]
		[OSMData_Class30016]
		[OSMData_Class10012]
		[OSMData_Class10027]
		[OSMData_Class10028]
		[OSMData_Class20004]
		[OSMData_Class20003]
		[OSMData_Class30034])
	(cloNamespace [BrigBern_Class8])
	(cloVars
		[OSMData_Class30005]
		[OSMData_Class20000]
		[BrigBern_Class20]
		[BrigBern_Class80011]
		[BrigBern_Class80012]
		[BrigBern_Class40011]
		[BrigBern_Class40008]
		[BrigBern_Class40015]
		[BrigBern_Class40018]
		[BrigBern_Class40001]
		[BrigBern_Class40002]
		[BrigBern_Class130000])
	(title "OSM Data"))

([BrigBern_Class70000] of  CloFunction

	(source "(loop [pool (rest from) sdi-dir-ips (shortest-dist ips (first from))]\n  (cond\n    (empty? pool) sdi-dir-ips\n    (nil? sdi-dir-ips)\n      (recur (rest (rest pool)) (shortest-dist ips (first (rest from))))\n    (= ips (first pool)) (recur (rest pool) sdi-dir-ips)\n    true\n      (let [[nsdi ndir nips :as short] (shortest-dist ips (first pool))]\n        (if (< nsdi (first sdi-dir-ips))\n          (recur (rest pool) short)\n          (recur (rest pool) sdi-dir-ips)))))")
	(title "nearest-to [ips from]"))

([BrigBern_Class70001] of  CloFunction

	(source "(if (not= ips1 ips2)\n  (let [llp1 (second ips1)\n         llp2 (second ips2)\n         [[la11 lo11] [la12 lo12]] [(first llp1) (last llp1)]\n         [[la21 lo21] [la22 lo22]] [(first llp2) (last llp2)]\n         dis-var {(MapOb/distanceNM la11 lo11 la21 lo21) [B F]	;; f1 f2\n                     (MapOb/distanceNM la11 lo11 la22 lo22) [B B]	;; f1 l2\n                     (MapOb/distanceNM la12 lo12 la21 lo21) [F F]	;; l1 f2\n                     (MapOb/distanceNM la12 lo12 la22 lo22) [F B]}	;; l1 l2\n        sdi (apply min (keys dis-var))\n        dir (dis-var sdi)]\n    [sdi dir ips2]))")
	(title "shortest-dist [ips1 ips2]"))

([BrigBern_Class8] of  CloNamespace

	(source "(:use protege.core) \n(:require\n   [clojure.data.json :as json])\n(:import\n  ru.igis.omtab.MapOb\n  ru.igis.omtab.OMT\n  ru.igis.omtab.OMTPoly\n  ru.igis.omtab.gui.RuMapMouseAdapter\n  edu.stanford.smi.protege.ui.DisplayUtilities)")
	(title "osm.data"))

([BrigBern_Class80011] of  CloVar

	(source "\"railway\"")
	(title "WAY-TYPE"))

([BrigBern_Class80012] of  CloVar

	(source "\"rail\"")
	(title "WAY-SUBTYPE"))

([BrigBern_Class80016] of  Tagvalue

	(value "[\"railway\" \"rail\"]"))

([BrigBern_Class80017] of  Tagvalue

	(value "[\"highway\" \"motorway\"]"))

([BrigBern_Class90003] of  Tagvalue

	(value "[\"highway\" \"primary\"]"))

([OSMData_Class10011] of  CloFunction

	(source "([id [clat clon] rad]\n  (show-bbx id [(- clon rad) (- clat rad) (+ clon rad) (+ clat rad)]))\n([id [w s e n]]\n(let [tsf (fn [[y x]]\n               (str (MapOb/getDegMin y) \" \" (MapOb/getDegMin x)))\n       id (str id)\n       clat (MapOb/getDegMin (/ (+ s n) 2))\n       clon (MapOb/getDegMin (/ (+ w e) 2))\n       pts [[n w] [n e] [s e] [s w] [n w]]\n       pts (map tsf pts)\n       poi (foc \"OMTPoly\" \"label\" id)]\n    (ssv poi \"latitude\" clat)\n    (ssv poi \"longitude\" clon)\n    (ssv poi \"lineColor\" \"FF325928\")\n    ;; (ssv poi \"line\" (fifos \"Line\" \"label\" \"L3\"))\n    (ssvs poi \"points\" pts)\n    (OMT/getOrAdd poi)\n    poi))")
	(title "show-bbx"))

([OSMData_Class10012] of  CloFunction

	(source "([[x y]]\n  (find-elements-with-beg-or-end-in-bbx [x y] RADIUS WAY-TYPE WAY-SUBTYPE))\n([[x y] wtype wsubtype]\n  (if-let [ss (seq (find-elements-with-beg-or-end-in-bbx [x y] RADIUS wtype wsubtype))]\n    ss\n    (if-let [ss (seq (find-elements-with-beg-or-end-in-bbx [x y] (* 2 RADIUS) wtype wsubtype))]\n      ss\n      (if-let [ss (seq (find-elements-with-beg-or-end-in-bbx [x y] (* 4 RADIUS) wtype wsubtype))]\n        ss\n        (find-elements-with-beg-or-end-in-bbx [x y] (* 8 RADIUS) wtype wsubtype)))))\n([[x y] rad wtype wsubtype]\n  (let [dy rad\n         dx (/ dy (Math/abs (Math/cos (Math/toRadians y))))\n         bbx [(- x dx) (- y dy) (+ x dx) (+ y dy)]\n         wda (way-data bbx wtype)\n         fda (filter-data wda wtype wsubtype)\n         fbe (filter #(or (in-bbx (first (second %)) bbx) (in-bbx (last (second %)) bbx)) (seq fda))]\n    (show-bbx (gensym \"bbx\") bbx)\n    (map #(cons (first %) (map reverse (second %))) fbe)))")
	(title "find-elements-with-beg-or-end-in-bbx"))

([OSMData_Class10027] of  CloFunction

	(source "(OMT/getOrAdd inst)")
	(title "show-mapob [hm inst]"))

([OSMData_Class10028] of  CloFunction

	(source "(if-let[moi (fifos \"MapOb\" \"label\" (sv inst \"label\"))]\n  (if-let [mo (OMT/getMapOb moi)]\n    (OMT/removeMapOb mo false)))")
	(title "hide-mapob [hm inst]"))

([OSMData_Class20000] of  CloVar

	(source "\"https://overpass-api.de/api/interpreter\"")
	(title "SERVER"))

([OSMData_Class20002] of  RoadControl

	(but-add "Mode Add/osm.data/mode-add")
	(but-clear "Clear/osm.data/clear-path")
	(but-cre "Create Road/osm.data/create-road")
	(but-hide-roads "Hide Roads/osm.data/hide-roads")
	(but-rem "Mode Remove/osm.data/mode-remove")
	(but-show-roads "Show Existing Roads/osm.data/show-roads")
	(radius 5.0E-4)
	(server KUMI)
	(status "MODE NODES")
	(tagvalue [BrigBern_Class80016])
	(title "Road Control"))

([OSMData_Class20003] of  CloFunction

	(source "(if-let [sgs (seq (find-elements-with-beg-or-end-in-bbx [x y]))]\n  (let [egs (map mk-edge sgs)\n         noi (foc \"Node\" \"label\" (str \"N\" [x y]))]\n    (ssv noi \"x\" (float x)) \n    (ssv noi \"y\" (float y)) \n    (ssv noi \"latitude\" (MapOb/getDegMin y))\n    (ssv noi \"longitude\" (MapOb/getDegMin x))\n    (ssv noi \"lineColor\" \"FF00AA00\")\n    (ssv noi \"point-radius\" (int 6))\n    (ssv noi \"oval\" true)\n    (ssvs noi \"edges\" egs)\n    (OMT/getOrAdd noi)\n    (println \"Created Node from\" (count egs) \"edges.\")\n    noi))")
	(title "mk-node [[x y]]"))

([OSMData_Class20004] of  CloFunction

	(source "(let [egi (foc \"Edge\" \"label\" (str (first s)))\n       crs (rest s)\n       tsf (fn [[x y]] (str (MapOb/getDegMin y) \" \" (MapOb/getDegMin x)))]\n  (ssv egi \"x\" (float (ffirst crs)))\n  (ssv egi \"y\" (float (second (first crs))))\n  (ssv egi \"x2\" (float (first (last crs))))\n  (ssv egi \"y2\" (float (second (last crs))))\n  (ssvs egi \"xx\" (map #(str (first %)) crs))\n  (ssvs egi \"yy\" (map #(str (second %)) crs))\n  (ssvs egi \"points\" (map tsf crs))\n  (ssv egi \"latitude\" \"0 0\")\n  (ssv egi \"longitude\" \"0 0\")\n  (ssv egi \"lineColor\" \"FFFF6800\")\n  (OMT/getOrAdd egi)\n  egi)")
	(title "mk-edge [s]"))

([OSMData_Class30004] of  CloFunction

	(source "(def SERVER url)")
	(title "set-server [url]"))

([OSMData_Class30005] of  CloVar

	(source "{\"KUMI\"\n  \"https://overpass.kumi.systems/api/interpreter\"\n  \"MAIN\"\n  \"https://overpass-api.de/api/interpreter\"\n  \"RUSSIAN\"\n  \"https://overpass.openstreetmap.ru/api/interpreter\"\n  \"FRENCH\"\n  \"https://overpass.openstreetmap.ru/api/interpreter\"\n  \"TAIWAN\"\n  \"https://overpass.nchc.org.tw/api/interpreter\"}")
	(title "SRV-MAP"))

([OSMData_Class30016] of  CloFunction

	(source "(and (> x w) (> y s) (< x e) (< x n))")
	(title "in-bbx [[y x] [w s e n]]"))

([OSMData_Class30034] of  CloFunction

	(source "(if (not RMMA)\n  (set-mouse-adapter))\n(let [mp (into {} hm)\n       sel (seq (selection mp \"tagvalue\"))]\n  (if (empty? sel)\n    (ssv inst \"status\" \"Select tagvalue for nodes!\")\n    (let [[wt wst] (read-string (sv (first sel) \"value\"))\n          srv (SRV-MAP (sv inst \"server\"))]\n      (set-server srv)\n      (def WAY-TYPE wt)\n      (def WAY-SUBTYPE wst)\n      (def MODE 'NODES)\n      (def RADIUS (sv inst \"radius\"))\n      (ssv inst \"status\" \"MODE NODES\")\n      (println :SERVER srv :WAY-TYPE wt :WAY-SUBTYPE wst))))")
	(title "mode-nodes [hm inst]"))

([OSMRoads_Class100006] of  Tagvalue

	(value "[\"highway\" \"service\"]"))

([OSMRoads_Class10001] of  Tagvalue

	(value "[\"highway\" \"unclassified\"]"))

([OSMRoads_Class10002] of  CloFunction

	(source "(if-let [sel (seq (DisplayUtilities/pickInstances nil *kb* [(cls \"Road\")]))]\n  (doseq [rd sel]\n    (doseq [dw (svs rd \"dirways\")]\n       (-> (sv dw \"way\")\n         (sv \"poly\")\n         OMT/getOrAdd))))")
	(title "show-roads [hm inst]"))

([OSMRoads_Class10005] of  CloFunction

	(source "(if-let [sel (seq (DisplayUtilities/pickInstances nil *kb* [(cls \"Road\")]))]\n  (doseq [rd sel]\n    (doseq [dw (svs rd \"dirways\")]\n       (OMT/removeMapOb \n         (-> (sv dw \"way\")\n           (sv \"poly\"))\n         false))))")
	(title "hide-roads [hm inst]"))

([OSMRoads_Class120008] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.04.05 21:36:41.369 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class20021] of  Tagvalue

	(value "[\"highway\" \"primary\"]"))

([OSMRoads_Class20142] of  Tagvalue

	(value "[\"highway\" \"path\"]"))

([OSMRoads_Class20164] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.02.11 18:18:16.208 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class40001] of  Tagvalue

	(value "[\"railway\" \"narrow_gauge\"]"))

([OSMRoads_Class43] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.02.05 20:57:54.978 MSK")
	(%3ACREATOR "ru"))

([OSMRoads_Class60003] of  Tagvalue

	(value "\"highway\" \"tertiary\""))

([OSMRoads_Class70000] of  Tagvalue

	(value "[\"highway\" \"residential\"]"))

([OSMRoads_Class70130] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2018.03.24 21:56:02.306 MSK")
	(%3ACREATOR "ru"))
