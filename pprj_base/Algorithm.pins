; Sun Jun 10 18:26:45 MSK 2018
; 
;+ (version "3.5")
;+ (build "Build 663")

([Algorithm_Class0] of  CloFunction

	(source "(mapcat #(if (symbol? %) [%] (destruct %)) lst)")
	(title "destruct [lst]"))

([Algorithm_Class1] of  CloFunction

	(source "(let [mp (into {} hm)]\n  (trace (is? (mp \"trace\")))\n  (debug (is? (mp \"debug\")))\n  (future (do-algorithm inst {})))")
	(title "start-algorithm [hm inst]"))

([Algorithm_Class10000] of  CloProgram

	(cloFunctions
		[Algorithm_Class60000]
		[Algorithm_Class70001]
		[Algorithm_Class10003]
		[Algorithm_Class10006]
		[Algorithm_Class0]
		[Algorithm_Class20024]
		[Algorithm_Class30000]
		[Algorithm_Class40002]
		[Algorithm_Class60001]
		[Algorithm_Class40000]
		[Algorithm_Class20001]
		[Algorithm_Class50001]
		[Algorithm_Class10002]
		[Algorithm_Class40004]
		[Algorithm_Class20013]
		[Algorithm_Class70000]
		[Algorithm_Class50000]
		[Algorithm_Class80000]
		[Algorithm_Class90005]
		[Algorithm_Class20011]
		[Algorithm_Class1])
	(cloNamespace [Algorithm_Class10001])
	(cloVars
		[Algorithm_Class20023]
		[Algorithm_Class30001]
		[Algorithm_Class40001]
		[Algorithm_Class20000])
	(title "Algorithm Execution"))

([Algorithm_Class10001] of  CloNamespace

	(source "(:use protege.core)\n(:require\n  [rete.core :as rete])\n(:import\n  edu.stanford.smi.protege.model.Instance)")
	(title "algo.exe"))

([Algorithm_Class10002] of  CloFunction

	(source "(if (do-code proc id)\n  (do-next (sv proc \"next\") id))")
	(title "do-process [proc id]"))

([Algorithm_Class10003] of  CloFunction

	(source "(rete.core/slurp-with-comments (java.io.StringReader. src))")
	(title "uncomment [src]"))

([Algorithm_Class10006] of  CloFunction

	(source "(if (= (count obs) 1)\n  (first obs)\n  (vec obs))")
	(title "trans-obs [obs]"))

([Algorithm_Class20000] of  CloVar

	(source "false")
	(title "DEBUG"))

([Algorithm_Class20001] of  CloFunction

	(source "(if-let [pmap (get-global id)]\n  (let [code (sv inp \"code\")\n         vmap (reduce-kv #(assoc %1 (name %2) %3) \n	{} \n	(read-string (str \"{\" (uncomment  code) \"}\")))\n         _ (if DEBUG (println :vmap vmap))\n         omap (reduce #(assoc %1 (sv %2 \"variable\") (trans-obs (svs %2 \"objects\")))\n	{}\n	(svs inp \"object-rows\"))\n         _ (if DEBUG (println :omap omap))\n         vvm (merge vmap omap pmap)]\n    (if DEBUG (println :vvm vvm))\n    (set-global id vvm)\n    (do-next (sv inp \"next\") id)))")
	(title "do-input [inp id]"))

([Algorithm_Class20011] of  CloFunction

	(source "(when (some? inst)\n  (do-trace inst id)\n  (condp = (typ inst)\n    \"Process\" (do-process inst id)\n    \"AlgoDecision\" (do-decision inst id)\n    \"PredefinedProcess\" (do-preproc inst id)\n    \"Input\" (do-input inst id)\n    \"Concurrent\" (do-concurrent inst id)\n    \"AlgoWait\" id\n    (do (println (str \"Unknown type: \" typ)) nil))\n  id)")
	(title "do-next [inst id]"))

([Algorithm_Class20013] of  CloFunction

	(source "(let [vvm (do-code dec id)]\n  (do-variant (vvm \"variant\") \n	(vec (svs dec \"variants\")) \n	id))")
	(title "do-decision [dec id]"))

([Algorithm_Class20023] of  CloVar

	(source "nil")
	(title "do-next"))

([Algorithm_Class20024] of  CloFunction

	(source "(let [p2 (partition 2 bnd)\n      vars (destruct (map first p2))\n      nams (map name vars)]\n  (zipmap nams vars))")
	(title "var-val-map [bnd]"))

([Algorithm_Class30000] of  CloFunction

	(source "(if-let [pmap (get-global id)]\n  (reduce #(concat %1 [(symbol %2) `(get (get-global ~id) ~%2)]) [] (keys pmap)))")
	(title "to-bnd [id]"))

([Algorithm_Class30001] of  CloVar

	(source "nil")
	(title "destruct"))

([Algorithm_Class40000] of  CloFunction

	(source "(when TRACE\n  (println :id id :binding (get-global id))\n  (println (typ inst) (sv inst \"title\")))")
	(title "do-trace [inst id]"))

([Algorithm_Class40001] of  CloVar

	(source "false")
	(title "TRACE"))

([Algorithm_Class40002] of  CloFunction

	(source "(def TRACE bool)")
	(title "trace [bool]"))

([Algorithm_Class40004] of  CloFunction

	(source "(if (<= 1 vrt (count vrts))\n  (do-next (nth vrts (dec vrt)) id))")
	(title "do-variant [vrt vrts id]"))

([Algorithm_Class50000] of  CloFunction

	(source "(if-let [pmap (get-global id)]\n  (if-let [pmap2 (do-algorithm (sv prep \"algorithm\") pmap)]\n    (set-global id (merge pmap pmap2))))\n(do-next (sv prep \"next\") id)")
	(title "do-preproc [prep id]"))

([Algorithm_Class50001] of  CloFunction

	(source "(if-let [bnd1 (to-bnd id)]\n  (let [bnd2 (read-string (str \"[\" (uncomment  (sv pord \"code\")) \"]\"))\n         bnd3 (vec (concat bnd1 bnd2))\n         vvm1 (var-val-map bnd3)\n         expr `(let ~bnd3 ~vvm1)\n         _ (if DEBUG (println :expr expr))\n         vvm2  (try (eval expr) (catch Exception e (println e) nil))]\n    (if DEBUG (println :vvm2 vvm2))\n    (if vvm2 \n      (set-global id vvm2))\n    vvm2))")
	(title "do-code [pord id]"))

([Algorithm_Class60000] of  CloFunction

	(source "(.setClientInformation *kb* key val)")
	(title "set-global [key val]"))

([Algorithm_Class60001] of  CloFunction

	(source "(def DEBUG bool)")
	(title "debug [bool]"))

([Algorithm_Class70000] of  CloFunction

	(source "(let [id (name (gensym \"algo\"))]\n  (set-global id pmap)\n  (get-global (do-next (sv algo \"begin\") id)))")
	(title "do-algorithm [algo pmap]"))

([Algorithm_Class70001] of  CloFunction

	(source "(.getClientInformation *kb* key)")
	(title "get-global [key]"))

([Algorithm_Class70005] of  CloFunction

	(source "`(.getInstance *kb*  ~(.getName ob))")
	(title "ob-to-code [ob]"))

([Algorithm_Class80000] of  CloFunction

	(source "(apply merge (map get-global (map deref futs)))")
	(title "wait-concurrent-pmap [futs]"))

([Algorithm_Class90005] of  CloFunction

	(source "(loop [curs (svs conc \"currents\") futs []]\n  (if (seq curs)\n    (recur (rest curs) \n              (conj futs \n	(future (let [id2 (name (gensym id))]\n	             (set-global id2 (get-global id))\n	             (do-next (first curs) id2)))))\n    (do\n      (set-global id (wait-concurrent-pmap futs))\n      (do-next (sv (sv conc \"wait\") \"next\") id))))")
	(title "do-concurrent [conc id]"))
