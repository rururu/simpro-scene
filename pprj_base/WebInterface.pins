; Mon Feb 10 13:05:20 MSK 2020
; 
;+ (version "3.5")
;+ (build "Build 663")

([WebInterface_Class0] of  ClsRequired

	(cloFunctions
		[WebInterface_Class30004]
		[WebInterface_Class30005]
		[WebInterface_Class30006]
		[WebInterface_Class30007]
		[WebInterface_Class30017]
		[WebInterface_Class30018]
		[WebInterface_Class30019]
		[WebInterface_Class30008]
		[WebInterface_Class30009]
		[WebInterface_Class30020]
		[WebInterface_Class30011]
		[WebInterface_Class90001]
		[WebInterface_Class30010]
		[WebInterface_Class70001]
		[WebInterface_Class70006])
	(cloNamespace [WebInterface_Class20001])
	(cloVars
		[WebInterface_Class20002]
		[WebInterface_Class30003]
		[WebInterface_Class70005]
		[WebInterface_Class50000])
	(documentation [WebInterface_Class30016])
	(title "Moving Program"))

([WebInterface_Class1] of  CloProgram

	(cloFunctions
		[WebInterface_Class3]
		[WebInterface_Class4]
		[WebInterface_Class5]
		[WebInterface_Class6]
		[WebInterface_Class7]
		[WebInterface_Class8]
		[WebInterface_Class9]
		[WebInterface_Class10010]
		[WebInterface_Class10011]
		[WebInterface_Class10012])
	(cloNamespace [WebInterface_Class2])
	(title "Async Processing"))

([WebInterface_Class10000] of  CloFunction

	(source "(condp = (lmp :type)\n  :Base (base-layers)\n  :GeoJSON {(lmp :title) (L.GeoJSON.AJAX. (lmp :source) (clj->js (lmp :attributes)))}\n  :Tile {(lmp :title) (L.tileLayer (lmp :source) (clj->js (lmp :attributes)))}\n  (js/alert (str \"Unknown layer class \" (lmp :type))))")
	(title "create-layer [lmp]"))

([WebInterface_Class100000] of  CloFunction

	(source "(if (vector? p) p [p])")
	(title "to-vec-param [p]"))

([WebInterface_Class100002] of  CloFunction

	(source "(let [{:keys [title tug bear dist]} params]\n  (if-let [mov (@MOVERS tug)]\n    (if-let [obj (@OBJECTS title)]\n      (do\n        (vswap! mov assoc-in [:tows obj]\n          [(* (/ dist 60) mvo/PID180) (* bear mvo/PID180)])\n        (if-let [mov (@MOVERS title)]\n          (vswap! MOVERS dissoc title)))\n      (js/alert \"Object \" title \" on tow of \" tug \" is missing!\"))\n    (js/alert \"Tug \"\" for object \"\" on tow  is missing!\")))")
	(title "add-tow [params]"))

([WebInterface_Class10010] of  CloFunction

	(source "(chan)")
	(title "mk-chan []"))

([WebInterface_Class10011] of  CloFunction

	(source "(close! chn)")
	(title "close-chan [chn]"))

([WebInterface_Class10012] of  CloFunction

	(source "(go (<! (timeout time))\n  (func))")
	(title "delayer [func time]"))

([WebInterface_Class11] of  CloFunction

	(source "(let [evt (deref (future (asp/pump-out (@SYS :CHAN))))]\n  ;; (println :EVT evt)\n  (write-transit evt))")
	(title "response-events []"))

([WebInterface_Class110006] of  CloFunction

	(source "(let [mp (into {} hm)\n       ops (vec (map #(sv % (mp \"wislot\")) (mp \"wilist\")))\n       pins (crin \"WiOptionParameter\")]\n  (ssvs inst \"wiparam-options\" ops)\n  (ssvs pins \"wiparam-options\" ops)\n  (ssv pins \"title\" (mp \"title\"))\n  (ssv pins \"width\" (mp \"width\"))\n  (ssv pins \"size\" (mp \"size\"))\n  (ssv pins \"multiple\" (mp \"multiple\")))")
	(title "par-ops-gen [hm inst]"))

([WebInterface_Class15] of  CloFunction

	(source "(GET \"/events\" {:handler events-hr\n                      :error-handler error-handler})\n(js/setTimeout request-events TO-EVENTS)")
	(title "request-events []"))

([WebInterface_Class16] of  CloFunction

	(source "(doseq [{:keys [event] :as evt} (read-transit resp)]\n  (if DEBUG (println [:EVENTS-HR evt]))\n  (condp = event\n    :path (add-path evt)\n    :marker (add-marker evt)\n    :popup (add-popup evt)\n    :heatmap (add-heatmap evt)\n    :remove (remove-layer evt)\n    :time-scale (set-time-scale evt)\n    :time-run (set-time-run evt)\n    :move (move-control evt)\n    :tow (add-tow evt)\n    :endtow (remove-tow evt)\n    :debug (set-debug evt)\n    (js/alert \"Unknown event: \" [event evt])))")
	(title "events-hr [resp]"))

([WebInterface_Class2] of  CloNamespace

	(source "(:require \n  [clojure.core.async :refer [chan alts!! put! <! <!! go timeout close!]])")
	(title "async.proc"))

([WebInterface_Class20000] of  CloDocumentation

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Function add-marker</b><br><br>Argument is a map of parameters (keys):<br><br><b>:mode</b> - :create (default) or :update 60 <br><b>:title</b> - unic name of marker object<br><b>:coord </b>- coordinates in a form [latitude (degrees) longitude (degrees)]<br><b>:url </b>- icon url<br><b>:icon-size</b> - icon size in a form [width (pixels) height (pixels)], <i>optional</i>, default [32 32]<br><b>:course</b> - course (degrees), <i>optional</i>, no default<br><b>:speed </b>- speed (knots - nautical miles per hour), <i>optional</i>, no default<br><b>:draggable</b> - draggable by mouse, <i>optional</i>, default true<br><br><u>Note: coord, course and speed must be updated through calling functions:</u><br>- (mvo.move/set-coord mvo crd),<br>- (mvo.move/set-course mvo crs),<br>- (mvo.move/set-speed mvo spd), respectively.<br><br><br></body>\n</html>")
	(title "Function add-marker"))

([WebInterface_Class20001] of  CloNamespace

	(title "mvo.move"))

([WebInterface_Class20002] of  CloVar

	(source "(/ Math.PI 180)")
	(title "PID180"))

([WebInterface_Class20003] of  CloFunction

	(source "(let [tile1 (js/L.tileLayer \"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n                                   #js{:maxZoom 20\n                                       :attribution \"Ru, OpenStreetMap &copy;\"})\n        tile2 (js/L.tileLayer \"http://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"})\n        tile3 (js/L.tileLayer \"http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"})\n        tile4 (js/L.tileLayer \"http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"})\n        tile5 (js/L.tileLayer \"http://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}\"\n                                   #js{:maxZoom 20\n                                       :subdomains #js[\"mt0\" \"mt1\" \"mt2\" \"mt3\"]\n                                       :attribution \"Ru, Google &copy;\"})]\n  {\"OpenStreetMap\" tile1\n    \"Google Satellite\" tile2\n    \"Google Streets\" tile3\n    \"Google Hybrid\" tile4\n    \"Google Terrain\" tile5})")
	(title "base-layers []"))

([WebInterface_Class20006] of  WiLayer

	(title "World Countries")
	(wiattributes "{:style {:weight 2\n             :color \"orange\"}}")
	(wilayer-type GeoJSON)
	(wisource "map/countries.geo.json"))

([WebInterface_Class3] of  CloFunction

	(source "([func time-out]\n  (go (while true\n           (func)\n           (<! (timeout time-out)))))\n([func param time-out]\n  (go (while true\n           (func param)\n           (<! (timeout time-out)))))")
	(title "repeater"))

([WebInterface_Class30000] of  CloDocumentation

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n          Wint Client<br>      <br>      Function add-marker <a href=\"internalLink\">@'WebInterface_Class20000'</a>&#160;</body>\n</html>")
	(title "Wint Client"))

([WebInterface_Class30003] of  CloVar

	(source "(/ Math.PI 10800)")
	(title "NMRAD"))

([WebInterface_Class30004] of  CloFunction

	(source "(let [cosphi1 (js/Math.cos phi1)\n       sinphi1 (js/Math.sin phi1)\n       cosaz (js/Math.cos az)\n       sinaz (js/Math.sin az)\n       sinc (js/Math.sin c)\n       cosc (js/Math.cos c)\n       phi2 (js/Math.asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n       lam2 (+ (js/Math.atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n  [phi2 lam2])")
	(title "spherical-between-js [phi1 lambda0 c az]"))

([WebInterface_Class30005] of  CloFunction

	(source "(let [ldiff (- lambda lambda0)\n       cosphi (js/Math.cos phi)]\n  (js/Math.atan2 (* cosphi (js.Math.sin ldiff))\n                      (- (* (js/Math.cos phi1) (js/Math.sin phi)) \n                          (* (js/Math.sin phi1) cosphi (js/Math.cos ldiff)))))")
	(title "spherical-azimuth-js [phi1 lambda0 phi lambda]"))

([WebInterface_Class30006] of  CloFunction

	(source "(let [fi1 (* la1 PID180)\n       ld1 (* lo1 PID180)\n       fi2 (* la2 PID180)\n       ld2 (* lo2 PID180)\n       rad (spherical-azimuth-js fi1 ld1 fi2 ld2)\n       deg (/ rad PID180)]\n  (cond\n    (< deg 0) (+ deg 360.0)\n    (> deg 360.0) (- deg 360.0)\n    true deg))")
	(title "bear-deg-js [[la1 lo1] [la2 lo2]]"))

([WebInterface_Class30007] of  CloFunction

	(source "(vswap! mvo assoc\n  :phi-tur (* lat PID180)\n  :lam-tur (* lon PID180)\n  :dir (* crs PID180)\n  :rdh (* spd NMRAD)\n  :elt-tur 0.0)")
	(title "set-turn-point [mvo [lat lon] crs spd]"))

([WebInterface_Class30008] of  CloFunction

	(source "(let [mv @mvo]\n  (set-turn-point mvo (get-coord mv) crs (get-speed mv))\n  (.setRotationAngle (mv :marker) crs))")
	(title "set-course [mvo crs]"))

([WebInterface_Class30009] of  CloFunction

	(source "(let [mv @mvo]\n  (set-turn-point mvo (get-coord mv) (get-course mv) spd))")
	(title "set-speed [mvo spd]"))

([WebInterface_Class30010] of  CloFunction

	(source "(if TIME-RUN\n  (let [mv @mvo\n         elt (+ (mv :elt-tur) TIMEOUT-HRS)\n         way (* (mv :rdh) elt)\n         [phi lam] (spherical-between-js (mv :phi-tur) (mv :lam-tur) way (mv :dir))\n         pos (js/L.LatLng. (/ phi PID180) (/ lam PID180))]\n    (.setLatLng (mv :marker) pos)\n    (doseq [twd (mv :tows)]\n       (tow twd phi lam (get-course mv)))\n    (vswap! mvo assoc :elt-tur elt)))")
	(title "move [mvo]"))

([WebInterface_Class30011] of  CloFunction

	(source "(let [mvo (volatile! {:marker mrk})]\n  (set-turn-point mvo crd crs spd)\n  mvo)")
	(title "create-mover [crd crs spd mrk]"))

([WebInterface_Class30014] of  CloVar

	(source "(volatile! {})")
	(title "MOVERS"))

([WebInterface_Class30015] of  CloFunction

	(source "(let [{:keys [title coord course speed url icon-size draggable]} params]\n  (when title\n    (if (@OBJECTS title)\n      (remove-layer params))\n    (let [[lat lon] coord\n           pos (js/L.LatLng. lat lon)\n           ico (js/L.icon #js{:iconUrl url :iconSize (or (clj->js icon-size) #js[32, 32])})\n           ops #js{:title title\n                         :icon ico \n                         :rotationAngle course\n                         :rotationOrigin \"center center\"\n                         :draggable (or (clj->js draggable) true)}\n            mrk (js/L.marker. pos ops)]\n       (vswap! OBJECTS assoc title mrk)\n       (if speed\n         (vswap! MOVERS assoc title\n           (mvo/create-mover [lat lon] course speed mrk)))\n       (.addTo mrk MAP)\n       mrk)))")
	(title "add-marker [params]"))

([WebInterface_Class30016] of  CloDocumentation

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Mover</b><br><br>Mover is a map of keys:<br><br><b>:phi-tur</b> - latitude of turnung point (TP) in radians<br><b>:lam-tur</b> - longitude of TP in radians<br><b>:dir</b> - direction (course in radians)<br><b>:rdh</b> - radians per hour (speed)<br><b>:elt-tur</b> - elapsed time from TP in hours</body>\n</html>")
	(title "Mover"))

([WebInterface_Class30017] of  CloFunction

	(source "(let [ll (.getLatLng (mv :marker))]\n  [(.-lat ll) (.-lng ll)])")
	(title "get-coord [mv]"))

([WebInterface_Class30018] of  CloFunction

	(source "(/ (mv :dir) PID180)")
	(title "get-course [mv]"))

([WebInterface_Class30019] of  CloFunction

	(source "(/ (mv :rdh) NMRAD)")
	(title "get-speed [mv]"))

([WebInterface_Class30020] of  CloFunction

	(source "(let [mv @mvo\n       [lat lon] crd]\n  (set-turn-point mvo crd (get-course mv) (get-speed mv))\n  (.setLatLng (mv :marker) (js/L.LatLng. lat lon)))")
	(title "set-coord [mvo crd]"))

([WebInterface_Class4] of  CloFunction

	(source "(when (not= @status \"RUN\") \n  (vreset! status \"RUN\")\n  (go (do \n          (while (and (= @status \"RUN\")\n                            (proc-fn))\n                (<! (timeout time-out)))\n          (if (instance? clojure.lang.IFn final-fun) (final-fun))\n          (vreset! status \"STOP\")))\n  @status)")
	(title "start-process [status proc-fn time-out final-fun]"))

([WebInterface_Class40000] of  CloVar

	(source "2000")
	(title "TO-EVENTS"))

([WebInterface_Class40003] of  CloNamespace

	(title "wint.test"))

([WebInterface_Class5] of  CloFunction

	(source "(vreset! status \"FINISH\")")
	(title "stop-process [status]"))

([WebInterface_Class50000] of  CloVar

	(source "false")
	(title "TIME-RUN"))

([WebInterface_Class50001] of  CloFunction

	(source "(let [{:keys [lat lon html]} params\n       pos (if (and lat lon)\n               #js[lat lon]\n               (.getCenter MAP))]\n  (.addLayer MAP (-> (js/L.popup. #js{})\n                             (.setLatLng pos)\n                             (.setContent html))))")
	(title "add-popup [params]"))

([WebInterface_Class50003] of  WiLayer

	(title "Base")
	(wilayer-type Base))

([WebInterface_Class6] of  CloFunction

	(source "(= @status \"RUN\")")
	(title "running? [status]"))

([WebInterface_Class60000] of  CloFunction

	(source "(let [{:keys [title data options]} params]\n  (when title\n    (if (@OBJECTS title)\n      (remove-layer params))\n    (let [data (clj->js data)\n           lay (js/HeatmapOverlay. (clj->js options))]\n      (def DATA data)\n      (vswap! OBJECTS assoc title lay)\n      (.addTo lay MAP)\n      (.setData lay data))))")
	(title "add-heatmap [params]"))

([WebInterface_Class60001] of  CloVar

	(source "(volatile! {})")
	(title "OBJECTS"))

([WebInterface_Class7] of  CloFunction

	(source "(put! chn val)")
	(title "pump-in [chn val]"))

([WebInterface_Class70000] of  CloFunction

	(source "(if-let [tit (params :title)]\n  (do\n    (when-let [lay (@OBJECTS tit)]\n      (.remove lay)\n      (vswap! OBJECTS dissoc tit))\n    (if-let [mov (@MOVERS tit)]\n      (vswap! MOVERS dissoc tit))))")
	(title "remove-layer [params]"))

([WebInterface_Class70001] of  CloFunction

	(source "(def TIME-RUN bool)")
	(title "set-time-run [bool]"))

([WebInterface_Class70002] of  CloVar

	(source "200")
	(title "TO-MOVE"))

([WebInterface_Class70003] of  CloFunction

	(source "(doseq [[n m] @MOVERS]\n  (mvo/move m))\n(js/setTimeout move-markers TO-MOVE)")
	(title "move-markers []"))

([WebInterface_Class70005] of  CloVar

	(source "0")
	(title "TIMEOUT-HRS"))

([WebInterface_Class70006] of  CloFunction

	(source "(def TIMEOUT-HRS (* (/ timeout-mcec 3600000) time-scale))")
	(title "set-timeout-hrs [timeout-mcec time-scale]"))

([WebInterface_Class70011] of  CloVar

	(source "1.0")
	(title "T-SCALE"))

([WebInterface_Class70012] of  CloFunction

	(source "(def T-SCALE (params :time-scale))\n(mvo/set-timeout-hrs TO-MOVE T-SCALE)")
	(title "set-time-scale [params]"))

([WebInterface_Class70015] of  CloFunction

	(source "(let [{:keys [title coord course speed]} params]\n  (when-let [mv (@MOVERS title)]\n    (if coord\n      (mvo/set-coord mv coord))\n    (if course\n      (mvo/set-course mv course))\n    (if speed\n      (mvo/set-speed mv speed))))")
	(title "move-control [params]"))

([WebInterface_Class70029] of  CloFunction

	(source "(let [{:keys [title type coord options]} params]\n  (when title\n    (if (@OBJECTS title)\n      (remove-layer params))\n    (let [ops (clj->js options)\n           crd (clj->js coord)\n           lay (condp = type\n                   :polyline (js/L.polyline. crd ops)\n                   :polygon (js/L.polygon. crd ops)\n                   :rectangle (js/L.rectangle. crd ops)\n                   :circle (js/L.circle. crd ops)\n                   :circle-marker (js/L.circleMarker. crd ops)\n                   nil)]\n         (when lay\n           (vswap! OBJECTS assoc title lay)\n           (.addTo lay MAP)))))")
	(title "add-path [params]"))

([WebInterface_Class8] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out [chn]"))

([WebInterface_Class80000] of  CloFunction

	(source "(set! (.-innerHTML (by-id id)) html)")
	(title "set-html! [id html]"))

([WebInterface_Class80001] of  CloFunction

	(source "(if-let [tit (params :title)]\n  (let [lay (js/L.heatLayer. \n                 (clj->js (params :data))\n                 (clj->js (params :options)))]\n    (vswap! OBS assoc tit lay)\n    (.addTo lay MAP)))")
	(title "add-heatmap0 [params]"))

([WebInterface_Class80002] of  CloFunction

	(source "(add-heatmap \n{:title \"hm1\"\n  :data {:max 8 :data [\n             {:lat 60 :lng 30 :value 8}\n             {:lat 63 :lng 30 :value 6}\n             {:lat 66 :lng 30 :value 3}\n             {:lat 69 :lng 30 :value 1}]}\n  :options {:scaleRadius true\n                  :radius 2\n                  :useLocalExtrema true}})")
	(title "tst []"))

([WebInterface_Class80003] of  CloVar

	(source "nil")
	(title "DATA"))

([WebInterface_Class9] of  CloFunction

	(source "(loop [out []]\n  (if (empty? out)\n    (recur (<!! chn))\n    out))")
	(title "one-out [chn]"))

([WebInterface_Class90000] of  CloFunction

	(source "(let [{:keys [title tug]} params]\n  (if-let [mov (@MOVERS tug)]\n    (if-let [obj (@OBJECTS title)]\n      (vswap! mov assoc :tows\n        (dissoc (@mov :tows) obj)))))")
	(title "remove-tow [params]"))

([WebInterface_Class90001] of  CloFunction

	(source "(let [[phi2 lam2] (spherical-between-js phi lam rd az)\n       pos2 (js/L.LatLng. (/ phi2 PID180) (/ lam2 PID180))]\n  (.setLatLng cmk pos2)\n  (if (instance? js/L.Marker cmk)\n    (.setRotationAngle cmk crs)))")
	(title "tow [[cmk [rd az]] phi lam crs]"))

([WebInterface_Class90002] of  CloFunction

	(source "(mvo/set-time-run (params :time-run))")
	(title "set-time-run [params]"))

([WebInterface_Class90003] of  CloVar

	(source "false")
	(title "DEBUG"))

([WebInterface_Class90004] of  CloFunction

	(source "(def DEBUG (params :debug))")
	(title "set-debug [params]"))

([WebServer_Class10000] of  HTML

	(source "<!DOCTYPE html>\n<html>\n<head>\n<TITLE>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n  <link rel=\"stylesheet\" href=\"css/wint.css\" />\n  <link rel=\"stylesheet\" href=\"css/L.Control.MousePosition.css\"/>\n  <link rel=\"stylesheet\" href=\"leaflet/leaflet.css\"/>\n  <link rel=\"stylesheet\" href=\"sidebar/font-awesome.min.css\"/>\n  <link rel=\"stylesheet\" href=\"sidebar/leaflet-sidebar.css\"/>\n  <style>\n        html, body {\n            font: 10pt \"Helvetica Neue\", Arial, Helvetica, sans-serif;\n        }\n  </style>\n  <script src=\"leaflet/leaflet.js\"></script>\n  <script src=\"sidebar/leaflet-sidebar.js\"></script>\n  <script src=\"js/L.Control.MousePosition.js\"></script>\n  <script src=\"js/leaflet.rotatedMarker.js\"></script>\n  <script src=\"js/leaflet.ajax.js\"></script>\n  <script src=\"js/heatmap.js\"></script>\n  <script src=\"js/leaflet-heatmap.js\"></script>\n</head>\n<body>\n<SIDEBARS>\n<HEADER>\n   <div id=\"MAP\" class=\"sidebar-map\"></div>\n   <div id=\"zoom\"/>\n   <script src=\"js/wic.js\"></script>\n</body>\n</html>")
	(store-in "resources/public")
	(title "wint"))

([WebServer_Class10001] of  CSS

	(source "#header {\n  position: fixed;\n  top:0px;\n  left:0;\n  right:0;\n  padding:5px;\n  z-index:100;\n  font-size: 25px;\n}\n#MAP {\n  position: absolute;\n  top: 40px;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -1;\n}\n#zoom {\n  position: fixed;\n  bottom:10px;\n  left:200px;\n  z-index:100;\n}")
	(store-in "resources/public/css")
	(title "wint"))

([WebServer_Class10003] of  CloVar

	(source "nil")
	(title "MAP"))

([WebServer_Class10004] of  CloFunction

	(source "(GET \"/map\" {:handler map-hr\n                      :error-handler error-handler})")
	(title "request-map []"))

([WebServer_Class10005] of  CloFunction

	(source "(def MAP (js/L.map \"MAP\"))\n(.setView MAP #js[0 0] 4)\n(if (by-id \"LEFT\")\n  (.addTo (js/L.control.sidebar \"LEFT\" #js{:position \"left\"}) MAP))\n(if (by-id \"RIGHT\")\n  (.addTo (js/L.control.sidebar \"RIGHT\" #js{:position \"right\"}) MAP))\n(request-map)")
	(title "init []"))

([WebServer_Class20000] of  CloFunction

	(source "(let [name (sv par-inst \"title\")\n       wid (or (sv par-inst \"width\") 120)\n       size (if-let [s (sv par-inst \"size\")] (str \"size=\\\"\" s \"\\\"\"))\n       mult (if (is? (sv par-inst \"multiple\")) \"multiple=\\\"true\\\"\")\n       value (or (sv par-inst \"widefault-value\") (vec (svs par-inst \"wiparam-options\")))]\n  (str\n  \"            <tr><td>\" name \"</td><td>\"\n  (if (vector? value)\n    (str \"<select name=\\\"\" name \"\\\" style=\\\"width:\" wid \"px\\\"\" mult \" \" size \">\\n\"\n      (apply str \n        (for [x value]\n          (str\n  \"              <option value=\\\"\" x \"\\\">\" x \"</option>\\n\")))\n  \"                </select></td></tr>\\n\")\n    (str \"<input name=\\\"\" name \"\\\" style=\\\"width:\" wid \"px\\\" type=\\\"text\\\" value=\\\"\" value \"\\\" /></td></tr>\\n\"))))")
	(title "param-row [par-inst]"))

([WebServer_Class20004] of  CloFunction

	(source "([task]\n  (params-form (sv task \"wiid\") \n                       (sv task \"wiheader\") \n                       (svs task \"wiparameters\") \n                       (sv task \"wiexec-button\") \n                       (sv task \"wifooter\")))\n([id header params exec-but footer]\n  (str\n  \"          <h3>\" header \"</h3>\\n\"\n  \"          <form method=\\\"post\\\">\\n\"\n  \"            <input name=\\\"task\\\" value=\\\"\" id \"\\\" type=\\\"hidden\\\"/>\\n\"\n  \"            <table>\\n\"\n  (if (seq params)\n    (apply str\n      (for [p params] (param-row p))))\n  \"            </table><br><br>\\n\"\n  \"            <input type=\\\"submit\\\" value=\\\"\" exec-but \"\\\" background-color=\\\"#BCE;\\\"/>\\n\"\n  \"          </form><br>\\n\"\n  \"          <h4>\" footer \"</h4>\\n\"))")
	(title "params-form"))

([WebServer_Class3] of  CloProgram

	(cloFunctions
		[WebServer_Class40004]
		[WebServer_Class20000]
		[WebServer_Class20004]
		[WebInterface_Class100000]
		[WebServer_Class9]
		[WebServer_Class7]
		[WebServer_Class40015]
		[WebServer_Class40016]
		[WebServer_Class50001]
		[WebServer_Class50002]
		[WebInterface_Class11]
		[WebServer_Class40003]
		[WebServer_Class40009]
		[WebServer_Class40012]
		[WebServer_Class40014]
		[WebInterface_Class110006])
	(cloNamespace [WebServer_Class4])
	(cloVars [WebServer_Class40013])
	(title "Wint Server"))

([WebServer_Class30000] of  CloFunction

	(source "(.getElementById js/document id)")
	(title "by-id [id]"))

([WebServer_Class4] of  CloNamespace

	(source "(:use\n  protege.core)\n(:require\n  [cognitect.transit :as t]\n  [ring.adapter.jetty :as jetty]\n  [compojure.core :refer [defroutes GET POST]]\n  [compojure.route :as route]\n  [compojure.handler :as handler]\n  [async.proc :as asp])\n(:import \n  [java.io \n    ByteArrayOutputStream\n    ByteArrayInputStream]\n  clojuretab.ClojureTab)")
	(title "wint.server"))

([WebServer_Class40000] of  CloFunction

	(source "(let [{:keys [status status-text]} resp]\n  (println \"AJAX ERROR:\" status status-text))")
	(title "error-handler [resp]"))

([WebServer_Class40001] of  CloFunction

	(source "(let [mp (read-transit resp)]\n  (println :RMR mp)\n  (if (and (map? mp) (not (empty? mp)))\n    (let [lmps (apply merge (map create-layer (mp :layers)))\n           flay (second (first  lmps)) \n           lctl (js/L.control.layers (clj->js lmps) nil)\n           fzoom (fn [] (set-html! \"zoom\" (str \"zoom \" (.getZoom MAP))))]\n      (add-heatmap {})\n      (.addTo flay MAP)\n      (.setView MAP (clj->js (mp :center)) (mp :zoom))\n      (.addTo (js/L.control.mousePosition.) MAP)\n      (.addTo lctl MAP)\n      (fzoom)\n      (.on MAP \"zoomend\" fzoom))\n    (add-popup {:html (str \"<h1>\" mp \"</h1>\")})))")
	(title "map-hr [resp]"))

([WebServer_Class40002] of  CloFunction

	(source "(t/read (t/reader :json) x)")
	(title "read-transit [x]"))

([WebServer_Class40003] of  CloFunction

	(source "(if (@SYS :BUSY) \n  (write-transit \"BUSY\")\n  (let [resp (if-let [mapi (first (cls-instances \"WiMap\"))]\n                   {:zoom (sv mapi \"wizoom\") \n                     :center (read-string (sv mapi \"wicenter\"))\n                     :layers (map-layers mapi)}\n                   {})]\n    ;;(vswap! SYS assoc :BUSY true)\n    (write-transit resp)))")
	(title "response-map []"))

([WebServer_Class40004] of  CloFunction

	(source "(let [baos (ByteArrayOutputStream.)\n        w    (t/writer baos :json)\n        _    (t/write w x)\n        ret  (.toString baos)]\n    (.reset baos)\n    ret)")
	(title "write-transit [x]"))

([WebServer_Class40009] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (slurp (start-page)))\n  (POST \"/\" [& params] (request params))\n  (GET \"/map\" [] (response-map))\n  (GET \"/events\" [] (response-events))\n  (route/files \"/\" (do (println [:ROOT (@SYS :ROOT)]) {:root (@SYS :ROOT)}))\n  (route/resources \"/\")\n  (route/not-found \"Not Found\"))\n\n(vswap! SYS assoc :APP\n  (handler/site app-routes))")
	(title "defapp []"))

([WebServer_Class40012] of  CloFunction

	(source "(let [mp (into {} hm)\n       nsi (mp \"cloNamespace\")\n       port (mp \"wiport\")]\n  (if (nil? (@SYS :NAMESPACE))\n    (vswap! SYS assoc :NAMESPACE (sv nsi \"title\")))\n  (when (nil? (@SYS :APP))\n    (defapp)\n    (when (nil? (@SYS :SERVER))\n      (vswap! SYS assoc :SERVER \n        (jetty/run-jetty (@SYS :APP) {:port (read-string port) :join? false}))\n      (vswap! SYS assoc :BUSY nil))))")
	(title "start-server [hm inst]"))

([WebServer_Class40013] of  CloVar

	(source "(defonce SYS \n  (volatile! \n   {:SERVER nil\n     :APP nil\n     :ROOT (str (System/getProperty \"user.dir\") \"/resources/public/\")\n     :NAMESPACE nil\n     :CHAN (asp/mk-chan)\n     :BUSY nil}))")
	(title "defonceSYS"))

([WebServer_Class40014] of  CloFunction

	(source "(when (@SYS :SERVER)\n  (.stop (@SYS :SERVER))\n  (vswap! SYS assoc :SERVER nil)\n  (vswap! SYS assoc :APP nil)\n  (println \"WebServer stopped.\"))")
	(title "stop-server [hm inst]"))

([WebServer_Class40015] of  CloFunction

	(source "(if-let [ws (first (cls-instances \"WiServer\"))]\n  (sv ws \"wistart-page\"))")
	(title "start-page []"))

([WebServer_Class40016] of  CloFunction

	(source "(println [:POST params])\n(try\n  (ClojureTab/invoke (@SYS :NAMESPACE) \"exec-task\" params)\n  {:status 204}\n  (catch Exception e\n    (println :ERROR e)\n    (str \"Task execution error for parameters:\" params)))")
	(title "request [params]"))

([WebServer_Class5] of  ClsMain

	(asset-path "js/outwic")
	(butt-build "Build/cljs.compile/build")
	(cloFunctions
		[WebServer_Class30000]
		[WebInterface_Class80000]
		[WebServer_Class40002]
		[WebServer_Class40000]
		[WebInterface_Class20003]
		[WebInterface_Class10000]
		[WebInterface_Class70000]
		[WebInterface_Class90000]
		[WebInterface_Class100002]
		[WebInterface_Class70029]
		[WebInterface_Class30015]
		[WebInterface_Class60000]
		[WebInterface_Class50001]
		[WebInterface_Class70012]
		[WebInterface_Class70015]
		[WebInterface_Class90002]
		[WebInterface_Class90004]
		[WebInterface_Class16]
		[WebInterface_Class15]
		[WebServer_Class40001]
		[WebServer_Class10004]
		[WebServer_Class10005]
		[WebInterface_Class70003]
		[WebInterface_Class80002])
	(cloNamespace [WebServer_Class6])
	(cloVars
		[WebServer_Class10003]
		[WebInterface_Class40000]
		[WebInterface_Class70002]
		[WebInterface_Class60001]
		[WebInterface_Class30014]
		[WebInterface_Class80003]
		[WebInterface_Class70011]
		[WebInterface_Class90003])
	(compiler-options "{:verbose false}")
	(css [WebServer_Class10001])
	(documentation [WebInterface_Class30000])
	(epilogue "(enable-console-print!)\n(set! (.-onload js/window) (init))\n(request-events)\n(mvo/set-timeout-hrs TO-MOVE T-SCALE)\n(move-markers)")
	(html [WebServer_Class10000])
	(output-dir "resources/public/js/outwic")
	(output-to "resources/public/js/wic.js")
	(required [WebInterface_Class0])
	(store-in "src/cljs")
	(title "Wint Client"))

([WebServer_Class50001] of  CloFunction

	(source "(letfn [(laymap [x]\n             {:type (if-let [t (sv x \"wilayer-type\")] (keyword t))\n               :title (sv x \"title\")\n               :source (sv x \"wisource\")\n               :attributes (if-let [a (sv x \"wiattributes\")] (read-string a))})]\n  (vec (map laymap (svs mapi \"wilayers\"))))")
	(title "map-layers [mapi]"))

([WebServer_Class50002] of  CloFunction

	(source "(vec (map keyword (svs mapi \"wicontrols\")))")
	(title "map-controls [mapi]"))

([WebServer_Class6] of  CloNamespace

	(source "(:require\n  [ajax.core :refer (GET)]\n  [cognitect.transit :as t]\n  [mvo.move :as mvo])")
	(title "wint.client"))

([WebServer_Class7] of  CloFunction

	(source "(if-let [cli (first (cls-instances \"WiClient\"))]\n  (if-let [wc (first (cls-instances \"ClsMain\"))]\n    (if-let [idx (first (svs wc \"html\"))]\n      (let [src (sv idx \"source\")\n             sbs (apply str (map sidebar (svs cli \"wisidebars\")))\n             tit (str \"  <title>\" (sv cli \"wiheader\") \"</title>\\n\")\n             hdr (str \"   <div id=\\\"header\\\" style=\\\"background:\" (sv cli \"wicolor\") \";text-align:center;\\\">\" (sv cli \"wiheader\") \"</div>\\n\")\n             src (.replace src \"<SIDEBARS>\" sbs)\n             src (.replace src \"<HEADER>\" hdr)\n             src (.replace src \"<TITLE>\" tit)\n             spg (sv inst \"wistart-page\")]\n          (spit spg src)))))")
	(title "update-start-page [hm inst]"))

([WebServer_Class9] of  CloFunction

	(source "([side-bar]\n  (sidebar (sv side-bar \"wiside\") (svs side-bar \"witasks\")))\n([side tasks]\n  (let [caret (if (= side \"LEFT\") \n                    \"fa fa-caret-left\"\n                    \"fa fa-caret-right\")]\n    (str\n    \"  <div id=\\\"\" side \"\\\" class=\\\"sidebar collapsed\\\">\\n\"\n    \"    <div class=\\\"sidebar-tabs\\\">\\n\"\n    \"      <ul role=\\\"tablist\\\">\\n\"\n    (apply str \n      (for [tk tasks]\n        (str \n    \"        <li><a href=\\\"#\" (sv tk \"wiid\") \"\\\" role=\\\"tab\\\"><i class=\\\"\" (sv tk \"wii-class\") \"\\\"></i></a></li>\\n\")))\n    \"      </ul>\\n\"\n    \"    </div>\\n\"\n    \"    <div class=\\\"sidebar-content\\\">\\n\"\n    (apply str \n      (for [tk tasks]\n        (str \n    \"      <div class=\\\"sidebar-pane\\\" id=\\\"\" (sv tk \"wiid\") \"\\\">\\n\"\n    \"        <h1 class=\\\"sidebar-header\\\">\" (sv tk \"title\") \"<span class=\\\"sidebar-close\\\"><i class=\\\"\" caret \"\\\"></i></span></h1>\\n\"\n          (params-form tk) \n    \"      </div>\\n\\n\")))\n    \"    </div>\\n\"\n    \"  </div>\\n\")))")
	(title "sidebar"))
