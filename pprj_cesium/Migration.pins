; Thu Jun 18 18:55:21 MSK 2020
; 
;+ (version "3.5")
;+ (build "Build 663")

([HiitolanjokiRCZ_Class0] of  Openmap

	(components
		[igis_Class2]
		[igis_Class3]
		[igis_Class4]
		[igis_Class14]
		[igis_Class15]
		[igis_Class16]
		[igis_Class17]
		[igis_Class18]
		[igis_Class19]
		[igis_Class20]
		[igis_Class90000]
		[igis_Class21]
		[igis_Class22]
		[igis_Class23]
		[igis_Class25]
		[igis_Class26]
		[igis_Class27]
		[igis_Class28]
		[igis_Class29]
		[igis_Class30]
		[HiitolanjokiRCZ_Class12]
		[HiitolanjokiRCZ_Class4]
		[HiitolanjokiRCZ_Class5]
		[HiitolanjokiRCZ_Class6]
		[HiitolanjokiRCZ_Class7]
		[HiitolanjokiRCZ_Class8]
		[HiitolanjokiRCZ_Class10]
		[HiitolanjokiRCZ_Class11])
	(Debug "FINE")
	(label "Hiitolanjoki Map")
	(Latitude "61.29")
	(layers
		[igis_Class40012]
		[HiitolanjokiRCZ_Class3]
		[HiitolanjokiRCZ_Class2]
		[igis_Class1]
		[igis_Class40011])
	(Longitude "29.63")
	(Scale "500000")
	(startUpLayers
		[igis_Class40012]
		[HiitolanjokiRCZ_Class3]
		[HiitolanjokiRCZ_Class2]
		[igis_Class1]
		[igis_Class40011]))

([HiitolanjokiRCZ_Class1] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(Hiitolanjoki)"))

([HiitolanjokiRCZ_Class10] of  HelpMenuItem

	(class "ru.igis.omtab.menu.BrowserHelpMenuItem")
	(label "hiiHelp7")
	(source "https://github.com/rururu/simpro-scene")
	(text "Simpro-scene Project"))

([HiitolanjokiRCZ_Class10000] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectFin.png")
	(title "Hiitolanjoki Hanke"))

([HiitolanjokiRCZ_Class10001] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectEng.png")
	(title "Hiitolanjoki Project"))

([HiitolanjokiRCZ_Class10002] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/LadogaSalmon.png")
	(title "Ladoga Salmon"))

([HiitolanjokiRCZ_Class10003] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectRus.png")
	(title "Проект Хиитоланёки"))

([HiitolanjokiRCZ_Class10004] of  InternalDoc

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Salmon Life Model<br><br></b>This multiagent model simulates the life of Ladoga salmon after dismantling dams that impede its migration to spawning sites.<br><b><br>Agents</b><br><br>Agents in this projects are Ladoga lake salmons on the differen phases of their life.<br><b><br></b><img src=\"file:data/mas/hiitolanjoki/ChildSalmons.png\">Orange points represent some number of child salmons.<br><img src=\"file:data/mas/hiitolanjoki/YoungSalmons.png\">Green points represent some number of young salmons.<br><img src=\"file:data/mas/hiitolanjoki/AdultSalmons.png\">Brown points represent some number of adult salmons.<br><br>It takes 2-3 years for the Ladoga child salmon fry to get to the river, after which they migrate to feed in Ladoga.<br>After the lake phase (1-5 years), mature salmon rise up the river for spawning.<br><br>In this model, each group of adult individuals reaching one of the spawning sites produces a certain number of fry and dies. Fry are born from caviar and begin movement to the river source.<br><br><b>Custamizable options:</b><br><br>Initial number of spawn <a href=\"internalLink\">@'Hiitolanjoki_Class30007'</a>&#160; (12)<br>Repeatable number of spawn <a href=\"internalLink\">@'Hiitolanjoki_Class120000'</a>&#160; (8)<br>Lifetime of salmon in steps <a href=\"internalLink\">@'Hiitolanjoki_Class250001'</a>&#160; (12000)<br>Propagation rate of child salmon <a href=\"internalLink\">@'Hiitolanjoki_Class140005'</a>&#160; (0.0001)<br>Propagation rate of young salmon <a href=\"internalLink\">@'Hiitolanjoki_Class90002'</a>&#160; (0.0002)<br>Propagation rate of adult salmon <a href=\"internalLink\">@'Hiitolanjoki_Class90003'</a>&#160; (0.0003)<br>Migration routes in Kivijarvi lake <a href=\"internalLink\">@'Hiitolanjoki_Class260000'</a>&#160;,..<br>Migration routes in Ladoga lake <a href=\"internalLink\">@'Hiitolanjoki_Class170002'</a>&#160;,..<br><br></body>\n</html>")
	(title "Salmon Life Model"))

([HiitolanjokiRCZ_Class11] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp8")
	(source "HiitolanjokiRCZ_Class10002")
	(text "Ladoga Salmon"))

([HiitolanjokiRCZ_Class12] of  MenuList

	(class "com.bbn.openmap.gui.menu.MenuList")
	(label "hiiMenuList")
	(menus
		[igis_Class5]
		[igis_Class6]
		[igis_Class7]
		[igis_Class9]
		[igis_Class10]
		[igis_Class11]
		[HiitolanjokiRCZ_Class13]))

([HiitolanjokiRCZ_Class13] of  HelpMenu

	(class "com.bbn.openmap.gui.DefaultHelpMenu")
	(items "hiiHelp1 hiiHelp2 hiiHelp3 hiiHelp4 hiiHelp5 hiiHelp7 hiiHelp8")
	(label "hiiHelpMenu"))

([HiitolanjokiRCZ_Class14] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [HiitolanjokiRCZ_Class0])
	(%3ACREATION-TIMESTAMP "2020.05.30 21:57:21.493 MSK")
	(%3ACREATOR "ru"))

([HiitolanjokiRCZ_Class2] of  ShapeLayer

	(class "com.bbn.openmap.layer.shape.ShapeLayer")
	(fillColor "200000FF")
	(label "HiiLakes")
	(lineColor "ff0000ff")
	(prettyName "Hiitolanjoki Lakes")
	(shapeFile "data/mas/hiitolanjoki/shape/hiitolanjoki_a.shp")
	(spatialIndex "data/mas/hiitolanjoki/shape/hiitolanjoki_a.shx"))

([HiitolanjokiRCZ_Class20001] of  CloProgram

	(cloFunctions [Migration_Class80000])
	(cloNamespace [Clojure_Class300001])
	(title "Mig CW"))

([HiitolanjokiRCZ_Class20002] of  CloProgram

	(cloFunctions
		[Migration_Class70005]
		[Migration_Class130012]
		[Migration_Class110000]
		[Migration_Class10000]
		[Migration_Class130011]
		[Migration_Class120008]
		[Migration_Class120002]
		[Migration_Class50006]
		[Migration_Class150001]
		[Migration_Class20002]
		[Migration_Class60014]
		[Migration_Class160005]
		[Migration_Class50005]
		[Migration_Class160006]
		[Migration_Class170017]
		[Migration_Class130013]
		[Migration_Class70014]
		[Migration_Class130014]
		[Migration_Class50000]
		[Migration_Class40024]
		[Migration_Class140001])
	(cloNamespace [HiitolanjokiRCZ_Class20003])
	(cloVars
		[Migration_Class30000]
		[Migration_Class110001]
		[Migration_Class20000]
		[Migration_Class50001]
		[Migration_Class20006])
	(title "Cesium Migration"))

([HiitolanjokiRCZ_Class20003] of  CloNamespace

	(source "(:use protege.core)\n(:require\n  [cesium.server :as cs]\n  [czml.generator :as cg])\n(:import\n  ru.igis.omtab.OpenMapTab\n  ru.igis.omtab.Clock\n  ru.igis.omtab.OMT\n  ru.igis.omtab.MapOb\n  com.bbn.openmap.omGraphics.OMGraphic\n  com.bbn.openmap.omGraphics.OMGraphicList\n  com.bbn.openmap.proj.GreatCircle\n  java.net.URL\n  sim.field.geo.GeomVectorField\n  sim.io.geo.ShapeFileImporter\n  sim.util.geo.AttributeValue\n  com.vividsolutions.jts.geom.Coordinate\n  com.vividsolutions.jts.geom.GeometryFactory)")
	(title "cesium.mig"))

([HiitolanjokiRCZ_Class20004] of  CloFunction

	(source "(let [mb (OpenMapTab/getMapBean)\n       start (map #(Math/toRadians %) start)\n       cms (.getComponents mb)]\n  (if-let [slr (first (filter #(= (.getName %) layer) cms))]\n    (let [dbh (.getDbf (.getSpatialIndex slr))\n           dbf (.getDbf dbh)\n           lst (.getList slr)\n           rad (loop [[[col val] & cvrst] col-vals path [start]]\n                   (if (some? col)\n                     (let [idx (.getColumnIndexForName dbf col)]\n                       (if-let [epl (first (filter #(and (not (instance? OMGraphicList %))\n                                                             (= (nth (.getRecordDataForOMGraphic dbh %) idx) val)) lst))]\n                         (let [lla (.getRawllpts epl)\n                                pa2 (partition 2 lla)\n                                [p1 l1] (last path)\n                                [p2 l2] (first pa2)\n                                [p3 l3] (last pa2)\n                                d1 (GreatCircle/sphericalDistance p1 l1 p2 l2)\n                                d2 (GreatCircle/sphericalDistance p1 l1 p3 l3)\n                                nxt (if (< d2 d1)\n                                        (reverse pa2)\n                                        pa2)] \n                           (recur cvrst (concat path nxt)))))\n                     path))]\n      (map #(let [[phi lam] %] [(Math/toDegrees lam) (Math/toDegrees phi) height]) rad))))")
	(title "from-shape-by-attributes [layer col-vals start height]"))

([HiitolanjokiRCZ_Class3] of  ShapeLayer

	(class "com.bbn.openmap.layer.shape.ShapeLayer")
	(fillColor "200000FF")
	(label "HiiRivers")
	(lineColor "ff0000ff")
	(prettyName "Hiitolanjoki Rivers")
	(shapeFile "data/mas/hiitolanjoki/shape/hiitolanjoki_l.shp")
	(spatialIndex "data/mas/hiitolanjoki/shape/hiitolanjoki_l.shx"))

([HiitolanjokiRCZ_Class4] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp1")
	(source "HiitolanjokiRCZ_Class10003")
	(text "О Проект Хиитоланёки"))

([HiitolanjokiRCZ_Class5] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp2")
	(source "HiitolanjokiRCZ_Class10000")
	(text "Noin Hiitolanjoki Hanke"))

([HiitolanjokiRCZ_Class6] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp3")
	(source "HiitolanjokiRCZ_Class10001")
	(text "About Hiitolanjoki Project"))

([HiitolanjokiRCZ_Class7] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp4")
	(source "HiitolanjokiRCZ_Class10004")
	(text "Salmon Life Model"))

([HiitolanjokiRCZ_Class8] of  HelpMenuItem

	(class "ru.igis.omtab.menu.BrowserHelpMenuItem")
	(label "hiiHelp5")
	(source "https://hiitolanjoki.fi")
	(text "Hiitolanjoki Project"))

([Migration_Class0] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2020.05.31 13:03:03.157 MSK")
	(%3ACREATOR "ru"))

([Migration_Class1] of  Run

	(butt-ass-inss "Assert Instances/ru.rules/ass-inss")
	(butt-fire "Fire/ru.rules/fire-all-rules")
	(butt-run "Run/ru.rules/run-engine")
	(butt-step "Step/ru.rules/step-engine")
	(facts
		[Migration_Class150010]
		[Migration_Class60001])
	(instances
		[Migration_Class10001]
		[Migration_Class140000])
	(mode run)
	(rule-sets
		[Migration_Class100000]
		[Migration_Class50008])
	(steps 1)
	(title "MigRun"))

([Migration_Class10000] of  CloFunction

	(source "(map #(.geometry (.getGeometry gv-field %1 (AttributeValue. %2))) attrs vals)")
	(title "geoms-by-attrs [attrs vals gv-field]"))

([Migration_Class100000] of  RuleSet

	(rules
		[Migration_Class130000]
		[Migration_Class90004]
		[Migration_Class70000]
		[Migration_Class150007]
		[Migration_Class90001]
		[Migration_Class90002]
		[Migration_Class90003]
		[Migration_Class90005]
		[Migration_Class30013])
	(templates
		[Creature]
		[Migration]
		[Clock])
	(title "Migration"))

([Migration_Class100001] of  CesiumCamera

	(heading "340")
	(latitude "61.33")
	(longitude "29.42")
	(pitch "-60")
	(roll "0"))

([Migration_Class10001] of  Creature

	(age 0)
	(color 255 0 0 255)
	(down-speed 3.0)
	(id "1")
	(life 300000000)
	(max-steps 1000)
	(N 0)
	(phase "Birth")
	(size 10)
	(status "BEGIN")
	(title "Salmon")
	(up-speed 2.0)
	(walk-step 0.01))

([Migration_Class110000] of  CloFunction

	(source "([shp]\n  (let [dbf (str (.substring shp 0 (- (count shp) 4)) \".dbf\")]\n    (gv-field-from-shape (str \"file:\" shp) (str \"file:\" dbf))))\n([shp dbf]\n  (let [gvf (GeomVectorField.)]\n    (ShapeFileImporter/read (URL. shp) (URL. dbf) gvf)\n    gvf))")
	(title "gv-field-from-shape"))

([Migration_Class110001] of  CloVar

	(source "(volatile! {})")
	(title "RIVERS"))

([Migration_Class110007] of  River

	(attrs
		"NAME"
		"NAME"
		"NAME"
		"NAME"
		"NAME")
	(estuary "[29.885 61.18]")
	(flow-speed 2.0)
	(head "[29.346 61.444]")
	(layer [HiitolanjokiRCZ_Class3])
	(title "Hiitolanjoki")
	(values
		"Hiitolanjoki"
		"Kokkolanjoki2"
		"Kokkolanjoki1"
		"Veijalanjarvi"
		"Asilanjoki"))

([Migration_Class120002] of  CloFunction

	(source "(or (@LAKES name)\n  (let [linst (fifos \"Lake\" \"title\" name)\n         lay (sv linst \"layer\")\n         ats (svs linst \"attrs\")\n         vls (svs linst \"values\")\n         gvf (gv-field-from-shape (sv lay \"shapeFile\"))\n         mp {:layer (sv lay \"prettyName\")\n                 :gv-field gvf\n                 :geoms (geoms-by-attrs ats vls gvf)}]\n    (vswap! LAKES assoc name mp)\n    mp))")
	(title "lake-map [name]"))

([Migration_Class120004] of  Basin

	(layer [HiitolanjokiRCZ_Class2])
	(title "Hiitolanjoki Lakes"))

([Migration_Class120008] of  CloFunction

	(source "(or (@RIVERS name)\n  (let [rinst (fifos \"River\" \"title\" name)\n         lay (sv rinst \"layer\")\n         ats (svs rinst \"attrs\")\n         vls (svs rinst \"values\")\n         gvf (gv-field-from-shape (sv lay \"shapeFile\"))\n         mp {:layer (sv lay \"prettyName\")\n                 :gv-field gvf\n                 :geoms (geoms-by-attrs ats vls)\n                 :head (read-string (sv rinst \"head\"))\n                 :estuary (read-string (sv rinst \"estuary\"))\n                 :flow-speed (sv rinst \"flow-speed\")}]\n    (vswap! RIVERS assoc name mp)\n    mp))")
	(title "river-map [name]"))

([Migration_Class130000] of  Rule

	(lhs "(Migration phases ?phs)\n?cre (Creature status \"END\"\n	phase ?phe\n	(some? ?phe))")
	(rhs "(modify ?cre status \"BEGIN\"\n	phase (loop [[cp np :as ps] ?phs]\n                                   (if (and cp np)\n                                     (if (= ?phe cp) \n                                       np\n                                       (recur (rest ps))))))")
	(salience 0)
	(title "mig:Migration"))

([Migration_Class130001] of  Rule

	(lhs "?c1 (Clock time ?t1)\n?c2 (Clock time ?t2\n	(< ?t2 ?t1))")
	(rhs "(retract ?c2)")
	(salience 10)
	(title "sim:RetractSecondClock"))

([Migration_Class130002] of  CloProgram

	(cloFunctions
		[Migration_Class140004]
		[Migration_Class140005]
		[Migration_Class140006]
		[Migration_Class140007]
		[Migration_Class140008])
	(cloNamespace [Migration_Class140003])
	(cloVars [Migration_Class140009])
	(title "Mig Simulator"))

([Migration_Class130011] of  CloFunction

	(source "(let [lss (map #(.getCoordinates %) geoms)\n       lss (map #(list (.x %) (.y %) height) lss)]\n  (loop [[ps & rss] lss path [(conj start height)]]\n    (if (some? ps)\n      (let [p1 (last path)\n             p2 (first ps)\n             p3 (last ps)\n             d1 (simple-dist p1 p2)\n             d2 (simple-dist p1 p3)\n             nxt (if (< d2 d1)\n                     (reverse ps)\n                     ps)] \n        (recur rss (concat path nxt)))\n      path)))")
	(title "geoms-to-path [geoms start height]"))

([Migration_Class130012] of  CloFunction

	(source "(+ (Math/abs (- lo1 lo2)) (Math/abs (- la1 la2)))")
	(title "simple-dist [[lo1 la1 & _] [lo2 la2 & _]]"))

([Migration_Class130013] of  CloFunction

	(source ";; returns time of going in sec and waypoints\n(let [pts (geoms-to-path geoms start height)\n       wps [(first pts) (last pts)]\n       func-dist #(com.bbn.openmap.proj.GreatCircle/sphericalDistance %1 %2 %3 %4)\n       mils (+ (Clock/getClock) 2000)\n       [czml elt] (cg/add-point-flight id pts knots mils \"RELATIVE_TO_GROUND\" color size func-dist)]\n  (cs/send-czml czml)\n  [elt wps])")
	(title "go-geoms-path [id color size knots height start geoms]"))

([Migration_Class130014] of  CloFunction

	(source ";; returns time of going in sec and waypoints\n(let [[lah loh] (river :head)\n        [lae loe] (river :estuary)\n        gvf (river :gv-field)]\n  (go-geoms-path id color size\n    (condp = direction\n      :down (+ knots (river :flow-speed))\n      :up knots)\n    (or height 16)\n    (condp = direction\n      :down (river :head)\n      :up (river :estuary))\n    (condp = direction\n      :down (river :geoms)\n      :up (reverse (river :geoms)))))")
	(title "go-river [id color size knots height river direction]"))

([Migration_Class140000] of  Creature

	(age 0)
	(color 0 255 0 255)
	(down-speed 3.0)
	(height 20)
	(id "2")
	(life 300000000)
	(max-steps 1000)
	(phase "Birth")
	(size 10)
	(status "BEGIN")
	(title "Salmon")
	(up-speed 2.0)
	(walk-step 0.01))

([Migration_Class140001] of  CloFunction

	(source "[(Clock/getClock) (Clock/getTimeScale)]")
	(title "clock-scale []"))

([Migration_Class140003] of  CloNamespace

	(source "(:use \n  protege.core\n  rete.core)\n(:import\n  ru.igis.omtab.OMT\n  ru.igis.omtab.Clock)")
	(title "sim"))

([Migration_Class140004] of  CloFunction

	(source "(if (and (some? ES-TIMER) (OMT/isRunning))\n  (let [sec (int (/ (Clock/getClock) 1000))]\n    (assert-frame ['Clock 'time sec])\n    (fire)))")
	(title "work-sim []"))

([Migration_Class140005] of  CloFunction

	(source "(when (some? ES-TIMER)\n  (.cancel ES-TIMER)\n  (def ES-TIMER nil)\n  (println \"Simulation Stoped...\"))")
	(title "stop-sim []"))

([Migration_Class140006] of  CloFunction

	(source "(if (some? ES-TIMER)\n  (stop-sim))\n(def ES-TIMER (java.util.Timer.))\n(.schedule \n  ES-TIMER \n  (proxy [java.util.TimerTask] [] (run [] (work-sim)))\n  (long 0) \n  (long 1000))\n(println \"Simulation Started...\")")
	(title "start-sim []"))

([Migration_Class140007] of  CloFunction

	(source "(stop-sim)\n(start-sim)")
	(title "restart-sim []"))

([Migration_Class140008] of  CloFunction

	(source "(Clock/setClock 0)")
	(title "reset-time []"))

([Migration_Class140009] of  CloVar

	(source "nil")
	(title "ES-TIMER"))

([Migration_Class150001] of  CloFunction

	(source "(let [d (Math/abs (- start finish))\n       s (* (Math/random) step)]\n  (cond\n    (< d s) finish\n    (< start finish) (+ start s)\n    true (- start s)))")
	(title "rand-step-closer [step start finish]"))

([Migration_Class150007] of  Rule

	(lhs "?cre (Creature status \"BEGIN\"\n	id ?id\n	color ?clr\n	size ?siz\n	walk-step ?wst\n	max-steps ?mss\n	waypoints ?wps\n	height ?hgt	\n	phase ?phe\n	[(= ?phe \"Walk in upper lakes\")\n                       (= ?phe \"Last walk in upper lakes\")])\n(Clock time ?t)")
	(rhs "(let [lak (cesium.mig/lake-map \"Kivijarvi ja Simpelejarvi\")\n       [elt wps] (cesium.mig/go-random-walk ?id ?clr ?siz ?spd ?hgt (last ?wps) ?mss ?wst (lak :geoms))]\n  (println ?id  \"Going up river Hiitolanjoki\" :REPEAT elt)\n  (modify ?cre N (+ ?t elt)\n	waypoints wps\n	status \"REPEAT\"))")
	(salience 0)
	(title "mig:WalkInUpperLakes"))

([Migration_Class150010] of  Migration

	(phases
		"Birth"
		"Walk in upper lakes"
		"Going to river Hiitolanjoki"
		"Going down river Hiitolanjoki"
		"Walk in Ladoga lake"
		"Return to river Hiitolanjoki"
		"Going up river Hiitolanjoki"
		"Last walk in upper lakes"
		"Spawn"))

([Migration_Class160005] of  CloFunction

	(source "(let [lo3 (rand-step-closer slon lo1 lo2)\n       la3 (rand-step-closer step la1 la2)]\n  (if (covered-by lo3 la3 geoms)\n    [lo3 la3]\n    (next-covered lo1 la1 slon step geoms)))")
	(title "next-covered-closer [lo1 la1 lo2 la2 slon step geoms]"))

([Migration_Class160006] of  CloFunction

	(source "(let [phi (Math/toRadians (second start))\n       slon (/ step (Math/cos phi))\n       [lof laf] finish]\n  (loop [n steps [los las] start path [(conj start height)]]\n    (if (> n 0)\n      (let [[lor lar] (next-covered los las slon step geoms)\n             [lon lan :as nxt] (next-covered-closer lor lar lof laf slon step geoms)\n             newp (conj path (conj nxt height))]\n        (if (and (== lon lof) (== lan laf))\n          newp\n          (recur (dec n) nxt newp)))\n      path)))")
	(title "random-walk-closer [start finish steps step height geoms]"))

([Migration_Class170017] of  CloFunction

	(source "(loop [[s f & r :as ws] wps path []]\n  (cond\n    (> (count path) limstp)\n      path\n    (and s f)\n      (let [rwc1 (random-walk-closer s f steps step height geoms)]\n        (if (< (count rwc1) steps)\n          (recur (rest ws) (concat path rwc1))\n          (let [rwc2 (random-walk-closer f s steps step height geoms)]\n            (if (< (count rwc2) steps)\n              (recur (rest ws) (concat path (reverse rwc2)))\n              (recur (cons (last rwc1) (rest ws)) (concat path rwc1))))))\n    true\n      path))")
	(title "random-by-waypoints [wps limstp steps step height geoms]"))

([Migration_Class170051] of  OMTPoly

	(label "RW")
	(latitude "0 0")
	(lineColor "FFFF0000")
	(longitude "0 0")
	(playground-index 0)
	(points
		"61 10.8 29 53.1"
		"61 10.81 29 53.09"
		"61 10.84 29 53.11"
		"61 10.85 29 53.17"
		"61 10.84 29 53.16"
		"61 10.82 29 53.19"
		"61 10.81 29 53.15"
		"61 10.79 29 53.2"
		"61 10.78 29 53.23"
		"61 10.78 29 53.24"
		"61 10.79 29 53.26"
		"61 10.81 29 53.28"
		"61 10.81 29 53.25"
		"61 10.82 29 53.19"
		"61 10.8 29 53.23"
		"61 10.8 29 53.25"
		"61 10.81 29 53.21"
		"61 10.8 29 53.16"
		"61 10.82 29 53.18"
		"61 10.84 29 53.23"
		"61 10.82 29 53.19"
		"61 10.84 29 53.21"
		"61 10.84 29 53.15"
		"61 10.81 29 53.15"
		"61 10.83 29 53.13"
		"61 10.8 29 53.18"
		"61 10.79 29 53.17"
		"61 10.81 29 53.22"
		"61 10.83 29 53.21"
		"61 10.82 29 53.17"
		"61 10.84 29 53.15"
		"61 10.82 29 53.1"
		"61 10.83 29 53.12"
		"61 10.81 29 53.16"
		"61 10.82 29 53.13"
		"61 10.83 29 53.07"
		"61 10.82 29 53.08"
		"61 10.82 29 53.12"
		"61 10.81 29 53.1"
		"61 10.8 29 53.14"
		"61 10.79 29 53.15"
		"61 10.79 29 53.12"
		"61 10.81 29 53.12"
		"61 10.8 29 53.17"
		"61 10.82 29 53.19"
		"61 10.81 29 53.19"
		"61 10.79 29 53.22"
		"61 10.77 29 53.26"
		"61 10.76 29 53.23"
		"61 10.75 29 53.21"
		"61 10.72 29 53.21"
		"61 10.75 29 53.2"
		"61 10.74 29 53.23"
		"61 10.71 29 53.26"
		"61 10.7 29 53.27"
		"61 10.69 29 53.27"
		"61 10.7 29 53.31"
		"61 10.71 29 53.35"
		"61 10.73 29 53.41"
		"61 10.71 29 53.43"
		"61 10.69 29 53.44"
		"61 10.71 29 53.45"
		"61 10.71 29 53.47"
		"61 10.72 29 53.42"
		"61 10.73 29 53.48"
		"61 10.74 29 53.44"
		"61 10.75 29 53.47"
		"61 10.72 29 53.42"
		"61 10.73 29 53.48"
		"61 10.73 29 53.45"
		"61 10.73 29 53.48"
		"61 10.73 29 53.44"
		"61 10.74 29 53.39"
		"61 10.73 29 53.34"
		"61 10.71 29 53.4"
		"61 10.69 29 53.44"
		"61 10.69 29 53.43"
		"61 10.7 29 53.39"
		"61 10.71 29 53.42"
		"61 10.7 29 53.36"
		"61 10.68 29 53.4"
		"61 10.69 29 53.37"
		"61 10.67 29 53.36"
		"61 10.66 29 53.34"
		"61 10.65 29 53.31"
		"61 10.66 29 53.37"
		"61 10.69 29 53.35"
		"61 10.7 29 53.36"
		"61 10.68 29 53.37"
		"61 10.7 29 53.38"
		"61 10.73 29 53.36"
		"61 10.74 29 53.4"
		"61 10.76 29 53.42"
		"61 10.78 29 53.46"
		"61 10.76 29 53.45"
		"61 10.77 29 53.4"
		"61 10.78 29 53.46"
		"61 10.76 29 53.4"
		"61 10.75 29 53.43"
		"61 10.74 29 53.49"
		"61 10.75 29 53.46"
		"61 10.75 29 53.49"
		"61 10.77 29 53.49"
		"61 10.77 29 53.45"
		"61 10.77 29 53.42"
		"61 10.78 29 53.46"
		"61 10.77 29 53.45"
		"61 10.75 29 53.45"
		"61 10.73 29 53.5"
		"61 10.74 29 53.46"
		"61 10.72 29 53.47")
	(relative FALSE))

([Migration_Class170052] of  OMTPoly

	(label "WPS")
	(latitude "0 0")
	(lineColor "FF000000")
	(longitude "0 0")
	(playground-index 0)
	(points
		"61 10.8 29 53.1"
		"61 10.84 29 53.15"
		"61 10.82 29 53.19"
		"61 10.75 29 53.47"
		"61 10.68 29 53.37"
		"61 10.72 29 53.47")
	(relative FALSE))

([Migration_Class2] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class1])
	(%3ACREATION-TIMESTAMP "2020.05.31 13:04:01.940 MSK")
	(%3ACREATOR "ru"))

([Migration_Class20000] of  CloVar

	(source "{:layer \"Hiitolanjoki Rivers\"\n  :head [29.346 61.444]\n  :path [[\"NAME\" \"Hiitolanjoki\"]\n             [\"NAME\" \"Kokkolanjoki2\"]\n             [\"NAME\" \"Kokkolanjoki1\"]\n             [\"NAME\" \"Veijalanjarvi\"]\n             [\"NAME\" \"Asilanjoki\"]]\n  :estuary [29.885 61.18]\n  :speed 2\n  :gv-field RIVERS}")
	(title "H-JOKI"))

([Migration_Class20002] of  CloFunction

	(source "(let [pnt (.createPoint GeomFACTORY (Coordinate. lon lat))]\n  (some #(.coveredBy pnt %) geoms))")
	(title "covered-by [lon lat geoms]"))

([Migration_Class20003] of  Lake

	(attrs
		"name"
		"name")
	(layer [HiitolanjokiRCZ_Class2])
	(title "Kivijarvi ja Simpelejarvi")
	(values
		"Kivijärvi"
		"Simpelejärvi"))

([Migration_Class20004] of  CloFuncall

	(source "(in-ns 'cesium.mig)"))

([Migration_Class20005] of  CloFuncall

	(source "(lake-map \"Kivijarvi ja Simpelejarvi\")"))

([Migration_Class20006] of  CloVar

	(source "(GeometryFactory.)")
	(title "GeomFACTORY"))

([Migration_Class20010] of  CloFuncall

	(source "LO1"))

([Migration_Class20011] of  CloFuncall

	(source "(covers LO1 pnt)"))

([Migration_Class20012] of  CloFuncall

	(source "(.covers LO1 pnt)"))

([Migration_Class20013] of  CloFuncall

	(source "(def pnt (.createPoint GeomFACTORY (Coordinate. 30.13 60.)))"))

([Migration_Class20014] of  CloFuncall

	(source "(def pnt (.createPoint GeomFACTORY (Coordinate. 30.13 60.21)))"))

([Migration_Class20015] of  CloFuncall

	(source "(.coveredBy pnt LO1)"))

([Migration_Class20016] of  CloFuncall

	(source "(def pnt (.createPoint GeomFACTORY (Coordinate. 30.13 61.21)))"))

([Migration_Class20019] of  CloFuncall

	(source "(def riv (fifos \"River\" \"title\" \"Hiitolanjoki\"))"))

([Migration_Class20020] of  CloFuncall

	(source "riv"))

([Migration_Class20021] of  CloFuncall

	(source "(sv riv \"attrs\")"))

([Migration_Class20022] of  CloFuncall

	(source "(sv riv \"vals\")"))

([Migration_Class20023] of  CloFuncall

	(source "(sv riv \"values\")"))

([Migration_Class20024] of  Lake

	(attrs "name")
	(layer [HiitolanjokiRCZ_Class2])
	(title "Ladoga")
	(values "Ладожское озеро"))

([Migration_Class20025] of  CloFuncall

	(source "(lake-map \"Ladoga\")"))

([Migration_Class20026] of  CloFuncall

	(source "LAKES"))

([Migration_Class20027] of  CloFuncall

	(source "(:layer (@LAKES \"Ladoga\"))"))

([Migration_Class20028] of  CloFuncall

	(source "(:gv-field (@LAKES \"Ladoga\"))"))

([Migration_Class20029] of  CloFuncall

	(source "(type (:polygon (@LAKES \"Ladoga\")))"))

([Migration_Class20030] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) pnt)"))

([Migration_Class20031] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) (.createPoint GeomFACTORY (Coordinate. 30. 60.)))"))

([Migration_Class20032] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) (.createPoint GeomFACTORY (Coordinate. 29.934 60.)))"))

([Migration_Class20033] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) (.createPoint GeomFACTORY (Coordinate. 29.934 61.159)))"))

([Migration_Class20034] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) (.createPoint GeomFACTORY (Coordinate. 29.934 61.158)))"))

([Migration_Class20035] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) (.createPoint GeomFACTORY (Coordinate. 29.934 61.16)))"))

([Migration_Class20036] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) (.createPoint GeomFACTORY (Coordinate. 29.935 61.159)))"))

([Migration_Class20037] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) (.createPoint GeomFACTORY (Coordinate. 29.936 61.159)))"))

([Migration_Class20038] of  CloFuncall

	(source "(.covers (:polygon (@LAKES \"Ladoga\")) (.createPoint GeomFACTORY (Coordinate. 29.933 61.159)))"))

([Migration_Class3] of  WorkingPrograms

	(butt-load-progs "Load Programs/protege.core/ldns")
	(cloPrograms
		[Clojure_Class10000]
		[RuleEngine_Class30000]
		[CesiumBase_Class30004]
		[CesiumWorshop_Class10003]
		[HiitolanjokiRCZ_Class20002]
		[Migration_Class130002])
	(title "Migration Programs"))

([Migration_Class30000] of  CloVar

	(source "(volatile! {})")
	(title "LAKES"))

([Migration_Class30006] of  CloFuncall

	(source "(def KS (lake-map \"Kivijarvi ja Simpelejarvi\"))"))

([Migration_Class30007] of  CloFuncall

	(source "(covered-by "))

([Migration_Class30008] of  CloFuncall

	(source "(covered-by 29.37 61.446 KS)"))

([Migration_Class30009] of  CloFuncall

	(source "(covered-by 29.37 61.446 (:geoms KS))"))

([Migration_Class30010] of  CloFuncall

	(source "(covered-by 29.37 61.45 (:geoms KS))"))

([Migration_Class30011] of  CloFuncall

	(source "(covered-by 29.394 61.461 (:geoms KS))"))

([Migration_Class30012] of  CloFuncall

	(source "(covered-by 29.4 61.461 (:geoms KS))"))

([Migration_Class30013] of  Rule

	(lhs "?cre (Creature status \"BEGIN\"\n	id ?id\n	color ?clr\n	size ?siz\n	walk-step ?wst\n	max-steps ?mss\n	waypoints ?wps\n	height ?hgt	\n	phase \"Walk in Ladoga lake\")\n(Clock time ?t)")
	(rhs "(let [lak (cesium.mig/lake-map \"Ладожское озеро\")\n       [elt wps] (cesium.mig/go-random-walk ?id ?clr ?siz ?spd ?hgt (last ?wps) ?mss ?wst (lak :geoms))]\n  (println ?id  \"Going up river Hiitolanjoki\" :REPEAT elt)\n  (modify ?cre N (+ ?t elt)\n	waypoints wps\n	status \"REPEAT\"))")
	(salience 0)
	(title "mig:WalkInLadoga"))

([Migration_Class4] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class3])
	(%3ACREATION-TIMESTAMP "2020.05.31 13:08:14.109 MSK")
	(%3ACREATOR "ru"))

([Migration_Class40000] of  CloFunction

	(source ";; returns time of going in sec\n(let [pts (from-shape-by-attributes layer attrs start height)\n       func-dist #(com.bbn.openmap.proj.GreatCircle/sphericalDistance %1 %2 %3 %4)\n       mils (+ (Clock/getClock) 2000)\n       [czml elt] (cg/add-point-flight id pts knots mils \"RELATIVE_TO_GROUND\" color size func-dist)]\n  (cs/send-czml czml)\n  elt)")
	(title "go-shape-attributes [id color size knots height start layer attrs]"))

([Migration_Class40003] of  CloFunction

	(source ";; returns time of going in sec\n(let [[lah loh] (river :head)\n        [lae loe] (river :estuary)\n        w (min loh loe)\n        s (min lah lae)\n        e (max loh loe)\n        n (max lah lae)]\n  (set-wsen-view w s e n)\n  (go-shape-attributes id color size\n    (condp = direction\n      :down (+ knots (river :speed))\n      :up (- knots (river :speed)))\n    (or height 16)\n    (condp = direction\n      :down (river :head)\n      :up (river :estuary))\n    (river :layer)\n    (condp = direction\n      :down (river :path)\n      :up (reverse (river :path)))))")
	(title "go-river [id color size knots height river direction]"))

([Migration_Class40016] of  CloFunction

	(source "(let [mb (OpenMapTab/getMapBean)\n       prj (.getProjection mb)\n       scl (.getScale mb)\n       ul (.getUpperLeft prj)\n       lr (.getLowerRight prj)\n       [cw cs ce cn] [(.getX ul) (.getY lr) (.getX lr) (.getY ul)]]\n (if (or (> cw w) (> cs s) (> e ce) (> n cn))\n   (let [celat (/ (+ s n) 2)\n          celon (/ (+ w e) 2)]\n     (.setCenter mb celat celon)\n     (.setScale mb (* 1.2 scl))     \n     (if (< (.getScale mb) 50000000)\n       (set-wsen-view w s e n)))))")
	(title "set-wsen-view [w s e n]"))

([Migration_Class40024] of  CloFunction

	(source "(let [stp (+ clk 3600000)\n       start (cg/iso8601abs clk)\n       stop (cg/iso8601abs stp)\n       mult (int scl)\n       cs {:animate true\n              :start start\n              :stop stop\n              :current start\n              :mult mult\n              :step \"SYSTEM_CLOCK_MULTIPLIER\"\n              :range \"UNBOUNDED\"}]\n  (cs/send-clock cs))")
	(title "model-clock [clk scl]"))

([Migration_Class50000] of  CloFunction

	(source ";; returns time of going in sec\n(let [wps (random-by-waypoints wps limstp steps step height geoms)\n       func-dist #(com.bbn.openmap.proj.GreatCircle/sphericalDistance %1 %2 %3 %4)\n       mils (+ (Clock/getClock) 2000)\n       [czml elt] (cg/add-point-flight id wps knots mils \"RELATIVE_TO_GROUND\" color size func-dist)]\n  (cs/send-czml czml)\n  elt)")
	(title "go-random-by-waypoints [id color size knots height wps limstp steps step geoms]"))

([Migration_Class50001] of  CloVar

	(source "[[29.919 61.161]\n [29.912 61.170]\n [29.918 61.174]\n [29.909 61.176]\n [29.912 61.180]\n [29.888 61.179]]")
	(title "WPS"))

([Migration_Class50005] of  CloFunction

	(source "(let [phi (Math/toRadians (second start))\n       slon (/ step (Math/cos phi))]\n  (loop [n steps [lon lat] start path [(conj start height)]]\n    (if (> n 0)\n      (let [nxt (next-covered lon lat slon step geoms)]\n        (recur (dec n) nxt (conj path (conj nxt height))))\n      path)))")
	(title "random-walk [start steps step height geoms]"))

([Migration_Class50006] of  CloFunction

	(source "(- (* 2 s (Math/random)) s)")
	(title "rand-step [s]"))

([Migration_Class50008] of  RuleSet

	(rules
		[Migration_Class130001]
		[Migration_Class50010]
		[Migration_Class50009])
	(templates
		[Clock]
		[Cesium])
	(title "Simulator"))

([Migration_Class50009] of  Rule

	(lhs "?acc (Cesium status \"START\"\n	time ?t1)\n(Clock time ?t2)")
	(rhs "(when  (some? cesium.server/SERV)\n  (modify ?acc status \"REPEAT\"\n	N (+ ?t2 ?t1)))")
	(salience 0)
	(title "sim:AdjustCZClockStart"))

([Migration_Class50010] of  Rule

	(lhs "?acc (Cesium status \"REPEAT\"\n	time-scale ?scl\n	time ?t1\n	N ?n)\n(Clock time ?t2 (> ?t2 ?n))")
	(rhs "(when (some? cesium.server/SERV)\n  (let [[clk scl] (cesium.mig/clock-scale)]\n    (if (not= ?scl scl)\n      (do (cesium.mig/model-clock clk scl)\n        (modify ?acc time-scale scl\n	N (+ ?t2 ?t1)))\n      (modify ?acc N (+ ?t2 ?t1)))))")
	(salience 0)
	(title "sim:AdjustCZClockRepeat"))

([Migration_Class60001] of  Cesium

	(status "START")
	(time 2))

([Migration_Class60014] of  CloFunction

	(source "([lon lat slon step geoms]\n  (loop [i 4 sl slon st step]\n    (if (> i 0)\n      (if-let [ncvd (next-covered lon lat sl st 10 geoms)]\n        ncvd\n        (recur (dec i) (* sl 2) (* st 2)))\n      [lon lat])))\n([lon lat slon step n geoms]\n  (loop [j n]\n    (if (> j 0)\n      (let [lon1 (+ lon (rand-step slon))\n             lat1 (+ lat (rand-step step))]\n        (if (covered-by lon1 lat1 geoms)\n          [lon1 lat1]\n          (recur (dec j)))))))")
	(title "next-covered"))

([Migration_Class70000] of  Rule

	(lhs "?cre (Creature status \"REPEAT\"\n	N ?n)\n(Clock time ?t (> ?t ?n))")
	(rhs "(modify ?cre status \"END\")")
	(salience 0)
	(title "mig:Repeat"))

([Migration_Class70005] of  CloFunction

	(source "(let [pts (map #(str (MapOb/getDegMin (second %)) \" \" (MapOb/getDegMin (first %))) pts)]\n  (ssvs inst \"points\" pts))")
	(title "set-points [pts inst]"))

([Migration_Class70007] of  OMTPoly

	(label "BK")
	(latitude "0 0")
	(lineColor "FF0000FF")
	(longitude "0 0")
	(playground-index 0)
	(points
		"61 10.8 29 53.1"
		"61 10.81 29 53.1"
		"61 10.8 29 53.1"
		"61 10.8 29 53.1"
		"61 10.82 29 53.11"
		"61 10.84 29 53.15"
		"61 10.84 29 53.15"
		"61 10.85 29 53.13"
		"61 10.84 29 53.15"
		"61 10.84 29 53.15"
		"61 10.86 29 53.19"
		"61 10.85 29 53.19"
		"61 10.84 29 53.19"
		"61 10.82 29 53.25"
		"61 10.8 29 53.19"
		"61 10.82 29 53.16"
		"61 10.81 29 53.19"
		"61 10.79 29 53.2"
		"61 10.82 29 53.19"
		"61 10.82 29 53.19"
		"61 10.79 29 53.28"
		"61 10.8 29 53.34"
		"61 10.79 29 53.35"
		"61 10.76 29 53.43"
		"61 10.75 29 53.47"
		"61 10.75 29 53.47"
		"61 10.73 29 53.44"
		"61 10.73 29 53.37"
		"61 10.69 29 53.34"
		"61 10.7 29 53.32"
		"61 10.71 29 53.34"
		"61 10.7 29 53.34"
		"61 10.71 29 53.37"
		"61 10.69 29 53.37"
		"61 10.68 29 53.36"
		"61 10.68 29 53.37"
		"61 10.68 29 53.37"
		"61 10.72 29 53.43"
		"61 10.72 29 53.44"
		"61 10.73 29 53.45"
		"61 10.72 29 53.47"
		"61 10.72 29 53.47"
		"61 10.72 29 53.47"
		"61 10.72 29 53.5"
		"61 10.72 29 53.47")
	(relative FALSE))

([Migration_Class70014] of  CloFunction

	(source ";; returns time of going in sec and 6 waypoints\n(let [pts (random-walk start steps step height geoms)\n       func-dist #(com.bbn.openmap.proj.GreatCircle/sphericalDistance %1 %2 %3 %4)\n       mils (+ (Clock/getClock) 2000)\n       [czml elt] (cg/add-point-flight id pts knots mils \"RELATIVE_TO_GROUND\" color size func-dist)\n       k (max 2 (int (/ (count pts) 5)))\n       wps (concat [(first pts)] (take-nth k pts) [(last pts)])]\n  (cs/send-czml czml)\n  [elt wps])")
	(title "go-random-walk [id color size knots height start steps step geoms]"))

([Migration_Class80000] of  CloFunction

	(source "(println \"INITIALIZING EXPERT SYSTEM\")\n(println \"1. Loading Clojure Programs...\")\n(if-let [wps (ClojureTab/findAnnotated (cls-instances \"WorkingPrograms\") nil)]\n  (loop [i 1 pins (svs wps \"cloPrograms\")]\n    (when (seq pins)\n      (println (str \" 1.\" i \" \" (sv (first pins) \"title\") \" = \" (ClojureTab/loadProgram (first pins)) ))\n      (recur (inc i) (rest pins)) ) )\n  (println \"  Annotated instance of WorkingPrograms not found!\"))\n(println \"2. Starting Expert System.\")\n(if-let [run (ClojureTab/findAnnotated (cls-instances \"Run\") nil)]\n  (ClojureTab/invoke \"ru.rules\" \"run-engine\" run)\n  (println \"  Annotated instance of Run not found!\"))\n(println \"3. Starting Simulation.\")\n(ClojureTab/invoke \"sim\" \"start-sim\")\n(println \"EXPERT SYSTEM INITIALIZED\")\n(println \"4. Starting Cesium.\")\n(if-let [csi (ClojureTab/findAnnotated (cls-instances \"CesiumServer\") nil)]\n  (do (ClojureTab/invoke \"cesium.server\" \"start-server\" (sv csi \"port\"))\n    (clojure.java.browse/browse-url (str \"http://localhost:\" (sv csi \"port\")))\n    (println \"Cesium started..\"))\n  (println \"Annotated instance of CesiumServer not found!\"))")
	(title "clojure-work []"))

([Migration_Class80001] of  CesiumServer

	(butt-start-cs-server "Start/cesium.server/start-server")
	(butt-stop-cs-server "Stop/cesium.server/stop-server")
	(page "test.html")
	(port 4448))

([Migration_Class80002] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class80001])
	(%3ACREATION-TIMESTAMP "2020.06.06 17:32:13.284 MSK")
	(%3ACREATOR "ru"))

([Migration_Class90000] of  Rule

	(lhs "?cc (CesiumCamera status \"START\" \n	title ?tit \n	latitude ?lat \n	longitude ?lon \n	height ?hgt \n	heading ?hdg\n	pitch ?ptc\n	roll ?rol)")
	(rhs "(when (some? cesium.server/SERV)\n  (cesium.server/send-camera ?lon ?lat ?hgt ?hdg ?ptc ?rol)\n  (modify ?cc status \"WORK\"))")
	(salience 0)
	(title "CesiumCameraPosition"))

([Migration_Class90001] of  Rule

	(lhs "?cre (Creature status \"BEGIN\"\n	id ?id\n	phase ?phe\n	[(= ?phe \"Going to river Hiitolanjoki\")\n	 (= ?phe \"Return to river Hiitolanjoki\")])\n(Clock time ?t)")
	(rhs "(let [n 7]\n  (println ?id  ?phe :REPEAT n)\n  (modify ?cre N (+ n ?t)\n	status \"REPEAT\"))")
	(salience 0)
	(title "mig:WalkToRiver"))

([Migration_Class90002] of  Rule

	(lhs "?cre (Creature status \"BEGIN\"\n	id ?id\n	color ?clr\n	size ?siz\n	down-speed ?spd\n	height ?hgt	\n	phase \"Going down river Hiitolanjoki\")\n(Clock time ?t)")
	(rhs "(let [riv (cesium.mig/river-map \"Hiitolanjoki\")\n       [elt lloc] (cesium.mig/go-river ?id ?clr ?siz ?spd ?hgt riv :down)]\n  (println ?id  \"Going down river Hiitolanjoki\" :REPEAT elt)\n  (modify ?cre N (+ ?t elt)\n	location lloc\n	status \"REPEAT\"))")
	(salience 0)
	(title "mig:GoingDownRiver"))

([Migration_Class90003] of  Rule

	(lhs "?cre (Creature status \"BEGIN\"\n	id ?id\n	color ?clr\n	size ?siz\n	up-speed ?spd	\n	height ?hgt\n	phase \"Going up river Hiitolanjoki\")\n(Clock time ?t)")
	(rhs "(let [riv (cesium.mig/river-map \"Hiitolanjoki\")\n       [elt lloc] (cesium.mig/go-river ?id ?clr ?siz ?spd ?hgt riv :up)]\n  (println ?id  \"Going up river Hiitolanjoki\" :REPEAT elt)\n  (modify ?cre N (+ ?t elt)\n	location lloc\n	status \"REPEAT\"))")
	(salience 0)
	(title "mig:GoingUpRiver"))

([Migration_Class90004] of  Rule

	(lhs "?cre (Creature status \"BEGIN\"\n	id ?id\n	phase \"Birth\")\n(Clock time ?t)")
	(rhs "(let [n 5]\n  (println ?id  \"Birth\" :REPEAT n)\n  (modify ?cre N (+ n ?t)\n	status \"REPEAT\"))")
	(salience 0)
	(title "mig:Birth"))

([Migration_Class90005] of  Rule

	(lhs "?cre (Creature status \"BEGIN\"\n	id ?id\n	phase \"Spawn\")\n(Clock time ?t)")
	(rhs "(let [n 8]\n  (println ?id  \"Spawn\" :REPEAT n)\n  (modify ?cre N (+ n ?t)\n	status \"REPEAT\"))")
	(salience 0)
	(title "mig:Spawn"))
