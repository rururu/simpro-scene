; Mon Jun 08 22:08:21 MSK 2020
; 
;+ (version "3.5")
;+ (build "Build 663")

([CesiumCamera] of  ActionClass

	(functions [CesiumBase_Class110000])
	(rules [Migration_Class90000]))

([GoRiverInCesium] of  ActionClass

	(functions [Migration_Class120008])
	(rules
		[Migration_Class120006]
		[Migration_Class120007]))

([HiitolanjokiRCZ_Class0] of  Openmap

	(components
		[igis_Class2]
		[igis_Class3]
		[igis_Class4]
		[igis_Class14]
		[igis_Class15]
		[igis_Class16]
		[igis_Class17]
		[igis_Class18]
		[igis_Class19]
		[igis_Class20]
		[igis_Class90000]
		[igis_Class21]
		[igis_Class22]
		[igis_Class23]
		[igis_Class25]
		[igis_Class26]
		[igis_Class27]
		[igis_Class28]
		[igis_Class29]
		[igis_Class30]
		[HiitolanjokiRCZ_Class12]
		[HiitolanjokiRCZ_Class4]
		[HiitolanjokiRCZ_Class5]
		[HiitolanjokiRCZ_Class6]
		[HiitolanjokiRCZ_Class7]
		[HiitolanjokiRCZ_Class8]
		[HiitolanjokiRCZ_Class10]
		[HiitolanjokiRCZ_Class11])
	(Debug "FINE")
	(label "Hiitolanjoki Map")
	(Latitude "61.29")
	(layers
		[igis_Class40012]
		[HiitolanjokiRCZ_Class3]
		[HiitolanjokiRCZ_Class2]
		[igis_Class1]
		[igis_Class40011])
	(Longitude "29.63")
	(Scale "500000")
	(startUpLayers
		[igis_Class40012]
		[HiitolanjokiRCZ_Class3]
		[HiitolanjokiRCZ_Class2]
		[igis_Class1]
		[igis_Class40011]))

([HiitolanjokiRCZ_Class1] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(Hiitolanjoki)"))

([HiitolanjokiRCZ_Class10] of  HelpMenuItem

	(class "ru.igis.omtab.menu.BrowserHelpMenuItem")
	(label "hiiHelp7")
	(source "https://github.com/rururu/simpro-scene")
	(text "Simpro-scene Project"))

([HiitolanjokiRCZ_Class10000] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectFin.png")
	(title "Hiitolanjoki Hanke"))

([HiitolanjokiRCZ_Class10001] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectEng.png")
	(title "Hiitolanjoki Project"))

([HiitolanjokiRCZ_Class10002] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/LadogaSalmon.png")
	(title "Ladoga Salmon"))

([HiitolanjokiRCZ_Class10003] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectRus.png")
	(title "Проект Хиитоланёки"))

([HiitolanjokiRCZ_Class10004] of  InternalDoc

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Salmon Life Model<br><br></b>This multiagent model simulates the life of Ladoga salmon after dismantling dams that impede its migration to spawning sites.<br><b><br>Agents</b><br><br>Agents in this projects are Ladoga lake salmons on the differen phases of their life.<br><b><br></b><img src=\"file:data/mas/hiitolanjoki/ChildSalmons.png\">Orange points represent some number of child salmons.<br><img src=\"file:data/mas/hiitolanjoki/YoungSalmons.png\">Green points represent some number of young salmons.<br><img src=\"file:data/mas/hiitolanjoki/AdultSalmons.png\">Brown points represent some number of adult salmons.<br><br>It takes 2-3 years for the Ladoga child salmon fry to get to the river, after which they migrate to feed in Ladoga.<br>After the lake phase (1-5 years), mature salmon rise up the river for spawning.<br><br>In this model, each group of adult individuals reaching one of the spawning sites produces a certain number of fry and dies. Fry are born from caviar and begin movement to the river source.<br><br><b>Custamizable options:</b><br><br>Initial number of spawn <a href=\"internalLink\">@'Hiitolanjoki_Class30007'</a>&#160; (12)<br>Repeatable number of spawn <a href=\"internalLink\">@'Hiitolanjoki_Class120000'</a>&#160; (8)<br>Lifetime of salmon in steps <a href=\"internalLink\">@'Hiitolanjoki_Class250001'</a>&#160; (12000)<br>Propagation rate of child salmon <a href=\"internalLink\">@'Hiitolanjoki_Class140005'</a>&#160; (0.0001)<br>Propagation rate of young salmon <a href=\"internalLink\">@'Hiitolanjoki_Class90002'</a>&#160; (0.0002)<br>Propagation rate of adult salmon <a href=\"internalLink\">@'Hiitolanjoki_Class90003'</a>&#160; (0.0003)<br>Migration routes in Kivijarvi lake <a href=\"internalLink\">@'Hiitolanjoki_Class260000'</a>&#160;,..<br>Migration routes in Ladoga lake <a href=\"internalLink\">@'Hiitolanjoki_Class170002'</a>&#160;,..<br><br></body>\n</html>")
	(title "Salmon Life Model"))

([HiitolanjokiRCZ_Class11] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp8")
	(source "HiitolanjokiRCZ_Class10002")
	(text "Ladoga Salmon"))

([HiitolanjokiRCZ_Class12] of  MenuList

	(class "com.bbn.openmap.gui.menu.MenuList")
	(label "hiiMenuList")
	(menus
		[igis_Class5]
		[igis_Class6]
		[igis_Class7]
		[igis_Class9]
		[igis_Class10]
		[igis_Class11]
		[HiitolanjokiRCZ_Class13]))

([HiitolanjokiRCZ_Class13] of  HelpMenu

	(class "com.bbn.openmap.gui.DefaultHelpMenu")
	(items "hiiHelp1 hiiHelp2 hiiHelp3 hiiHelp4 hiiHelp5 hiiHelp7 hiiHelp8")
	(label "hiiHelpMenu"))

([HiitolanjokiRCZ_Class14] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [HiitolanjokiRCZ_Class0])
	(%3ACREATION-TIMESTAMP "2020.05.30 21:57:21.493 MSK")
	(%3ACREATOR "ru"))

([HiitolanjokiRCZ_Class2] of  ShapeLayer

	(class "com.bbn.openmap.layer.shape.ShapeLayer")
	(fillColor "200000FF")
	(label "HiiLakes")
	(lineColor "ff0000ff")
	(prettyName "Hiitolanjoki Lakes")
	(shapeFile "data/mas/hiitolanjoki/shape/hiitolanjoki_a.shp")
	(spatialIndex "data/mas/hiitolanjoki/shape/hiitolanjoki_a.shx"))

([HiitolanjokiRCZ_Class20001] of  CloProgram

	(cloFunctions [Migration_Class80000])
	(cloNamespace [Clojure_Class300001])
	(title "Mig CW"))

([HiitolanjokiRCZ_Class20002] of  CloProgram

	(cloFunctions
		[Migration_Class40016]
		[HiitolanjokiRCZ_Class20004]
		[Migration_Class40000]
		[Migration_Class40003]
		[Migration_Class40024]
		[Migration_Class120008])
	(cloNamespace [HiitolanjokiRCZ_Class20003])
	(cloVars
		[Migration_Class20000]
		[Migration_Class30000])
	(title "Cesium Migration"))

([HiitolanjokiRCZ_Class20003] of  CloNamespace

	(source "(:use protege.core)\n(:require\n  [cesium.server :as cs]\n  [czml.generator :as cg])\n(:import\n  ru.igis.omtab.OpenMapTab\n  ru.igis.omtab.Clock\n  ru.igis.omtab.OMT\n  com.bbn.openmap.omGraphics.OMGraphic\n  com.bbn.openmap.omGraphics.OMGraphicList\n  com.bbn.openmap.proj.GreatCircle\n  java.net.URL\n  sim.field.geo.GeomVectorField\n  sim.io.geo.ShapeFileImporter)")
	(title "cesium.mig"))

([HiitolanjokiRCZ_Class20004] of  CloFunction

	(source "(let [mb (OpenMapTab/getMapBean)\n       start (map #(Math/toRadians %) start)\n       cms (.getComponents mb)]\n  (if-let [slr (first (filter #(= (.getName %) layer) cms))]\n    (let [dbh (.getDbf (.getSpatialIndex slr))\n           dbf (.getDbf dbh)\n           lst (.getList slr)\n           rad (loop [[[col val] & cvrst] col-vals path [start]]\n                   (if (some? col)\n                     (let [idx (.getColumnIndexForName dbf col)]\n                       (if-let [epl (first (filter #(and (not (instance? OMGraphicList %))\n                                                             (= (nth (.getRecordDataForOMGraphic dbh %) idx) val)) lst))]\n                         (let [lla (.getRawllpts epl)\n                                pa2 (partition 2 lla)\n                                [p1 l1] (last path)\n                                [p2 l2] (first pa2)\n                                [p3 l3] (last pa2)\n                                d1 (GreatCircle/sphericalDistance p1 l1 p2 l2)\n                                d2 (GreatCircle/sphericalDistance p1 l1 p3 l3)\n                                nxt (if (< d2 d1)\n                                        (reverse pa2)\n                                        pa2)] \n                           (recur cvrst (concat path nxt)))))\n                     path))]\n      (map #(let [[phi lam] %] [(Math/toDegrees lam) (Math/toDegrees phi) height]) rad))))")
	(title "from-shape-by-attributes [layer col-vals start height]"))

([HiitolanjokiRCZ_Class3] of  ShapeLayer

	(class "com.bbn.openmap.layer.shape.ShapeLayer")
	(fillColor "200000FF")
	(label "HiiRivers")
	(lineColor "ff0000ff")
	(prettyName "Hiitolanjoki Rivers")
	(shapeFile "data/mas/hiitolanjoki/shape/hiitolanjoki_l.shp")
	(spatialIndex "data/mas/hiitolanjoki/shape/hiitolanjoki_l.shx"))

([HiitolanjokiRCZ_Class4] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp1")
	(source "HiitolanjokiRCZ_Class10003")
	(text "О Проект Хиитоланёки"))

([HiitolanjokiRCZ_Class5] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp2")
	(source "HiitolanjokiRCZ_Class10000")
	(text "Noin Hiitolanjoki Hanke"))

([HiitolanjokiRCZ_Class6] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp3")
	(source "HiitolanjokiRCZ_Class10001")
	(text "About Hiitolanjoki Project"))

([HiitolanjokiRCZ_Class7] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp4")
	(source "HiitolanjokiRCZ_Class10004")
	(text "Salmon Life Model"))

([HiitolanjokiRCZ_Class8] of  HelpMenuItem

	(class "ru.igis.omtab.menu.BrowserHelpMenuItem")
	(label "hiiHelp5")
	(source "https://hiitolanjoki.fi")
	(text "Hiitolanjoki Project"))

([Migration_Class0] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2020.05.31 13:03:03.157 MSK")
	(%3ACREATOR "ru"))

([Migration_Class1] of  Run

	(butt-ass-inss "Assert Instances/ru.rules/ass-inss")
	(butt-fire "Fire/ru.rules/fire-all-rules")
	(butt-run "Run/ru.rules/run-engine")
	(butt-step "Step/ru.rules/step-engine")
	(facts [Migration_Class60001])
	(mode run)
	(rule-sets
		[Migration_Class50008]
		[Scenario_Class100006]
		[Scenario_Class250011]
		[Scenario_Class17]
		[Scenario_Class340000]
		[Migration_Class100000])
	(steps 1)
	(title "MigRun"))

([Migration_Class10000] of  GoRiverInCesium

	(creature [Migration_Class10001])
	(direct down)
	(height "40")
	(river [Migration_Class110007])
	(spd "2")
	(status "START")
	(title "test"))

([Migration_Class100000] of  RuleSet

	(rules
		[Migration_Class90000]
		[Migration_Class120006]
		[Migration_Class120007])
	(templates
		[CesiumCamera]
		[GoRiverInCesium])
	(title "MigActionExecutor"))

([Migration_Class100001] of  CesiumCamera

	(heading "340")
	(height "20000")
	(latitude "61.33")
	(longitude "29.42")
	(pitch "-60")
	(roll "0")
	(status "START")
	(title "Camera To Hiitolanjoki"))

([Migration_Class10001] of  Creature

	(age 0)
	(color "[0 255 0 255]")
	(id "s1")
	(life 300000000)
	(size 10)
	(title "Salmon"))

([Migration_Class110007] of  River

	(attrs
		"NAME"
		"NAME"
		"NAME"
		"NAME"
		"NAME")
	(estuary "[61.18 29.885]")
	(head "[61.444 29.346]")
	(layer [HiitolanjokiRCZ_Class3])
	(river-speed 2.0)
	(title "Hitolanjoki")
	(values
		"Hiitolanjoki"
		"Kokkolanjoki2"
		"Kokkolanjoki1"
		"Veijalanjarvi"
		"Asilanjoki"))

([Migration_Class120006] of  Rule

	(lhs "?gric (GoRiverInCesium status \"START\"\n	creature ?cre\n	river ?riv\n	direct ?dir\n	spd ?spd\n	height ?hgt\n	run ?run)\n(Clock time ?t)")
	(rhs "(let [cre (a/vv ?cre ?run)\n       riv (a/vv ?riv ?run)\n       dir (a/vv ?dir ?run)\n       spd (a/vv ?spd ?run)\n       hgt (a/vv ?hgt ?run)\n       id (protege.core/sv cre \"id\")\n       clr (protege.core/sv cre \"color\")\n       siz (protege.core/sv cre \"size\")\n       clr (read-string clr)\n       spd (read-string spd)\n       hgt (read-string hgt)\n       dir (keyword dir)\n       riv (cesium.mig/river-map riv)\n       elt (cesium.mig/go-river id clr siz spd hgt riv dir)]\n  (println :RIV riv :ELT elt [id clr siz spd hgt dir])\n  (modify ?gric status \"REPEAT\"\n	N (+ ?t elt)))")
	(salience 0)
	(title "a:GoRiverInCesiumStart"))

([Migration_Class120007] of  Rule

	(lhs "?gric (GoRiverInCesium status \"REPEAT\" \n	N ?n \n	parent ?pid\n	instance ?ain\n	run ?run\n	next_actions ?nacts)\n(Clock time ?t (> ?t ?n))")
	(rhs "(retract ?gric)\n(s/start-next ?nacts ?pid ?ain ?run)")
	(salience 0)
	(title "a:GoRiverInCesiumRepeat"))

([Migration_Class120008] of  CloFunction

	(source "{:layer (sv (sv rinst \"layer\") \"prettyName\")\n  :head (read-string (sv rinst \"head\"))\n  :path (vec (map #(vector %1 %2) (svs rinst \"attrs\") (svs rinst \"values\")))\n  :estuary (read-string (sv rinst \"estuary\"))\n  :speed (sv rinst \"river-speed\")}")
	(title "river-map [rinst]"))

([Migration_Class2] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class1])
	(%3ACREATION-TIMESTAMP "2020.05.31 13:04:01.940 MSK")
	(%3ACREATOR "ru"))

([Migration_Class20000] of  CloVar

	(source "{:layer \"Hiitolanjoki Rivers\"\n  :head [61.444 29.346]\n  :path [[\"NAME\" \"Hiitolanjoki\"]\n             [\"NAME\" \"Kokkolanjoki2\"]\n             [\"NAME\" \"Kokkolanjoki1\"]\n             [\"NAME\" \"Veijalanjarvi\"]\n             [\"NAME\" \"Asilanjoki\"]]\n  :estuary [61.18 29.885]\n  :speed 2}")
	(title "H-JOKI"))

([Migration_Class3] of  WorkingPrograms

	(butt-load-progs "Load Programs/protege.core/ldns")
	(cloPrograms
		[Clojure_Class10000]
		[RuleEngine_Class30000]
		[ScenarioN_Class550020]
		[Scenario_Class3]
		[Algorithm_Class10000]
		[Scenario_Class120024]
		[Scenario_Class220003]
		[Scenario_Class250008]
		[ScenarioN_Class510000]
		[CesiumBase_Class30004]
		[CesiumWorshop_Class10003]
		[HiitolanjokiRCZ_Class20002])
	(title "Migration Programs"))

([Migration_Class30000] of  CloVar

	(source "(let [shp \"file:data/mas/hiitolanjoki/shape/hiitolanjoki_a.shp\"\n       dbf \"file:data/mas/hiitolanjoki/shape/hiitolanjoki_a.dbf\"\n       lakes (GeomVectorField.)]\n  (ShapeFileImporter/read (URL. shp) (URL. dbf) lakes)\n  lakes)")
	(title "LAKES"))

([Migration_Class30001] of  CloFuncall

	(source "cesium.mig/LAKES"))

([Migration_Class4] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class3])
	(%3ACREATION-TIMESTAMP "2020.05.31 13:08:14.109 MSK")
	(%3ACREATOR "ru"))

([Migration_Class40000] of  CloFunction

	(source ";; returns time of going in sec\n(let [pts (from-shape-by-attributes layer attrs start height)\n       func-dist #(com.bbn.openmap.proj.GreatCircle/sphericalDistance %1 %2 %3 %4)\n       [czml elt] (cg/add-point-flight id pts knots 2 \"RELATIVE_TO_GROUND\" color size func-dist)]\n  (cs/send-czml czml)\n  elt)")
	(title "go-shape-attributes [id color size knots height start layer attrs]"))

([Migration_Class40003] of  CloFunction

	(source ";; returns time of going in sec\n(let [[lah loh] (river :head)\n        [lae loe] (river :estuary)\n        w (min loh loe)\n        s (min lah lae)\n        e (max loh loe)\n        n (max lah lae)]\n  (set-wsen-view w s e n)\n  (go-shape-attributes id color size\n    (condp = direction\n      :down (+ knots (river :speed))\n      :up (- knots (river :speed)))\n    (or height 16)\n    (condp = direction\n      :down (river :head)\n      :up (river :estuary))\n    (river :layer)\n    (condp = direction\n      :down (river :path)\n      :up (reverse (river :path)))))")
	(title "go-river [id color size knots height river direction]"))

([Migration_Class40016] of  CloFunction

	(source "(let [mb (OpenMapTab/getMapBean)\n       prj (.getProjection mb)\n       scl (.getScale mb)\n       ul (.getUpperLeft prj)\n       lr (.getLowerRight prj)\n       [cw cs ce cn] [(.getX ul) (.getY lr) (.getX lr) (.getY ul)]]\n (if (or (> cw w) (> cs s) (> e ce) (> n cn))\n   (let [celat (/ (+ s n) 2)\n          celon (/ (+ w e) 2)]\n     (.setCenter mb celat celon)\n     (.setScale mb (* 1.2 scl))     \n     (if (< (.getScale mb) 50000000)\n       (set-wsen-view w s e n)))))")
	(title "set-wsen-view [w s e n]"))

([Migration_Class40024] of  CloFunction

	(source "(let [run (OMT/isRunning)\n       scl (Clock/getTimeScale)\n       str (Clock/getClock)\n       stp (+ str 3600000)\n       start (cg/iso8601abs str)\n       stop (cg/iso8601abs stp)\n       sec (Clock/getSecond)\n       mult (if run (int scl) 0)\n       cs {:animate true\n              :start start\n              :stop stop\n              :current start\n              :mult mult\n              :step \"SYSTEM_CLOCK_MULTIPLIER\"\n              :range \"UNBOUNDED\"}]\n  (cs/send-clock cs))")
	(title "model-clock []"))

([Migration_Class50008] of  RuleSet

	(rules
		[ScenarioN_Class550031]
		[ScenarioN_Class550033]
		[Migration_Class50009]
		[Migration_Class50010])
	(templates
		[Clock]
		[MapObEvent]
		[Cesium])
	(title "MigSimulator"))

([Migration_Class50009] of  Rule

	(lhs "?acc (Cesium status \"START\"\n	time1 ?t1)\n(Clock time ?t)")
	(rhs "(if (some? cesium.server/SERV)\n  (modify ?acc status \"REPEAT\"\n	N (+ ?t ?t1)))")
	(salience 0)
	(title "sim:AdjustCZClockStart"))

([Migration_Class50010] of  Rule

	(lhs "?acc (Cesium status \"REPEAT\"\n	time1 ?t1\n	N ?n)\n(Clock time ?t (> ?t ?n))")
	(rhs "(when (some? cesium.server/SERV)\n  (cesium.mig/model-clock)\n  (modify ?acc N ?t))")
	(salience 0)
	(title "sim:AdjustCZClockRepeat"))

([Migration_Class60001] of  Cesium

	(status "START")
	(time1 4))

([Migration_Class80000] of  CloFunction

	(source "(println \"INITIALIZING EXPERT SYSTEM\")\n(println \"1. Loading Clojure Programs...\")\n(if-let [wps (ClojureTab/findAnnotated (cls-instances \"WorkingPrograms\") nil)]\n  (loop [i 1 pins (svs wps \"cloPrograms\")]\n    (when (seq pins)\n      (println (str \" 1.\" i \" \" (sv (first pins) \"title\") \" = \" (ClojureTab/loadProgram (first pins)) ))\n      (recur (inc i) (rest pins)) ) )\n  (println \"  Annotated instance of WorkingPrograms not found!\"))\n(println \"2. Starting Expert System.\")\n(if-let [run (ClojureTab/findAnnotated (cls-instances \"Run\") nil)]\n  (ClojureTab/invoke \"ru.rules\" \"run-engine\" run)\n  (println \"  Annotated instance of Run not found!\"))\n(println \"3. Starting Simulation.\")\n(ClojureTab/invoke \"sim\" \"start-sim\")\n(println \"4. Mission Button Support.\")\n(ClojureTab/invoke \"s\" \"mission-button-support\")\n(println \"EXPERT SYSTEM INITIALIZED\")\n(println \"5. Starting Cesium.\")\n(if-let [csi (ClojureTab/findAnnotated (cls-instances \"CesiumServer\") nil)]\n  (do (ClojureTab/invoke \"cesium.server\" \"start-server\" (sv csi \"port\"))\n    (clojure.java.browse/browse-url (str \"http://localhost:\" (sv csi \"port\")))\n    (println \"Cesium started..\"))\n  (println \"Annotated instance of CesiumServer not found!\"))")
	(title "clojure-work []"))

([Migration_Class80001] of  CesiumServer

	(butt-start-cs-server "Start/cesium.server/start-server")
	(butt-stop-cs-server "Stop/cesium.server/stop-server")
	(page "test.html")
	(port 4448))

([Migration_Class80002] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class80001])
	(%3ACREATION-TIMESTAMP "2020.06.06 17:32:13.284 MSK")
	(%3ACREATOR "ru"))

([Migration_Class90000] of  Rule

	(lhs "?aa (CesiumCamera status \"START\" \n	title ?tit \n	latitude ?lat \n	longitude ?lon \n	height ?hgt \n	heading ?hdg\n	pitch ?ptc\n	roll ?rol\n	parent ?pid\n	instance ?ain\n	run ?run\n	next_actions ?nacts)")
	(rhs "(println \"Action started:\" ?tit \"PutOnMap\")\n(if (some? cesium.server/SERV)\n  (cesium.server/send-camera\n    (a/vv ?lon ?run)\n    (a/vv ?lat ?run)\n    (a/vv ?hgt ?run)\n    (a/vv ?hdg ?run)\n    (a/vv ?ptc ?run)\n    (a/vv ?rol ?run)))\n(retract ?aa)\n(s/start-next ?nacts ?pid ?ain ?run)")
	(salience 0)
	(title "a:CesiumCamera"))
