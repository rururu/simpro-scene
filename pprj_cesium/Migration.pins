; Fri Jun 12 19:39:30 MSK 2020
; 
;+ (version "3.5")
;+ (build "Build 663")

([HiitolanjokiRCZ_Class0] of  Openmap

	(components
		[igis_Class2]
		[igis_Class3]
		[igis_Class4]
		[igis_Class14]
		[igis_Class15]
		[igis_Class16]
		[igis_Class17]
		[igis_Class18]
		[igis_Class19]
		[igis_Class20]
		[igis_Class90000]
		[igis_Class21]
		[igis_Class22]
		[igis_Class23]
		[igis_Class25]
		[igis_Class26]
		[igis_Class27]
		[igis_Class28]
		[igis_Class29]
		[igis_Class30]
		[HiitolanjokiRCZ_Class12]
		[HiitolanjokiRCZ_Class4]
		[HiitolanjokiRCZ_Class5]
		[HiitolanjokiRCZ_Class6]
		[HiitolanjokiRCZ_Class7]
		[HiitolanjokiRCZ_Class8]
		[HiitolanjokiRCZ_Class10]
		[HiitolanjokiRCZ_Class11])
	(Debug "FINE")
	(label "Hiitolanjoki Map")
	(Latitude "61.29")
	(layers
		[igis_Class40012]
		[HiitolanjokiRCZ_Class3]
		[HiitolanjokiRCZ_Class2]
		[igis_Class1]
		[igis_Class40011])
	(Longitude "29.63")
	(Scale "500000")
	(startUpLayers
		[igis_Class40012]
		[HiitolanjokiRCZ_Class3]
		[HiitolanjokiRCZ_Class2]
		[igis_Class1]
		[igis_Class40011]))

([HiitolanjokiRCZ_Class1] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(Hiitolanjoki)"))

([HiitolanjokiRCZ_Class10] of  HelpMenuItem

	(class "ru.igis.omtab.menu.BrowserHelpMenuItem")
	(label "hiiHelp7")
	(source "https://github.com/rururu/simpro-scene")
	(text "Simpro-scene Project"))

([HiitolanjokiRCZ_Class10000] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectFin.png")
	(title "Hiitolanjoki Hanke"))

([HiitolanjokiRCZ_Class10001] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectEng.png")
	(title "Hiitolanjoki Project"))

([HiitolanjokiRCZ_Class10002] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/LadogaSalmon.png")
	(title "Ladoga Salmon"))

([HiitolanjokiRCZ_Class10003] of  ImageDoc

	(source "file:data/mas/hiitolanjoki/HiitolanjokiProjectRus.png")
	(title "Проект Хиитоланёки"))

([HiitolanjokiRCZ_Class10004] of  InternalDoc

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Salmon Life Model<br><br></b>This multiagent model simulates the life of Ladoga salmon after dismantling dams that impede its migration to spawning sites.<br><b><br>Agents</b><br><br>Agents in this projects are Ladoga lake salmons on the differen phases of their life.<br><b><br></b><img src=\"file:data/mas/hiitolanjoki/ChildSalmons.png\">Orange points represent some number of child salmons.<br><img src=\"file:data/mas/hiitolanjoki/YoungSalmons.png\">Green points represent some number of young salmons.<br><img src=\"file:data/mas/hiitolanjoki/AdultSalmons.png\">Brown points represent some number of adult salmons.<br><br>It takes 2-3 years for the Ladoga child salmon fry to get to the river, after which they migrate to feed in Ladoga.<br>After the lake phase (1-5 years), mature salmon rise up the river for spawning.<br><br>In this model, each group of adult individuals reaching one of the spawning sites produces a certain number of fry and dies. Fry are born from caviar and begin movement to the river source.<br><br><b>Custamizable options:</b><br><br>Initial number of spawn <a href=\"internalLink\">@'Hiitolanjoki_Class30007'</a>&#160; (12)<br>Repeatable number of spawn <a href=\"internalLink\">@'Hiitolanjoki_Class120000'</a>&#160; (8)<br>Lifetime of salmon in steps <a href=\"internalLink\">@'Hiitolanjoki_Class250001'</a>&#160; (12000)<br>Propagation rate of child salmon <a href=\"internalLink\">@'Hiitolanjoki_Class140005'</a>&#160; (0.0001)<br>Propagation rate of young salmon <a href=\"internalLink\">@'Hiitolanjoki_Class90002'</a>&#160; (0.0002)<br>Propagation rate of adult salmon <a href=\"internalLink\">@'Hiitolanjoki_Class90003'</a>&#160; (0.0003)<br>Migration routes in Kivijarvi lake <a href=\"internalLink\">@'Hiitolanjoki_Class260000'</a>&#160;,..<br>Migration routes in Ladoga lake <a href=\"internalLink\">@'Hiitolanjoki_Class170002'</a>&#160;,..<br><br></body>\n</html>")
	(title "Salmon Life Model"))

([HiitolanjokiRCZ_Class11] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp8")
	(source "HiitolanjokiRCZ_Class10002")
	(text "Ladoga Salmon"))

([HiitolanjokiRCZ_Class12] of  MenuList

	(class "com.bbn.openmap.gui.menu.MenuList")
	(label "hiiMenuList")
	(menus
		[igis_Class5]
		[igis_Class6]
		[igis_Class7]
		[igis_Class9]
		[igis_Class10]
		[igis_Class11]
		[HiitolanjokiRCZ_Class13]))

([HiitolanjokiRCZ_Class13] of  HelpMenu

	(class "com.bbn.openmap.gui.DefaultHelpMenu")
	(items "hiiHelp1 hiiHelp2 hiiHelp3 hiiHelp4 hiiHelp5 hiiHelp7 hiiHelp8")
	(label "hiiHelpMenu"))

([HiitolanjokiRCZ_Class14] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [HiitolanjokiRCZ_Class0])
	(%3ACREATION-TIMESTAMP "2020.05.30 21:57:21.493 MSK")
	(%3ACREATOR "ru"))

([HiitolanjokiRCZ_Class2] of  ShapeLayer

	(class "com.bbn.openmap.layer.shape.ShapeLayer")
	(fillColor "200000FF")
	(label "HiiLakes")
	(lineColor "ff0000ff")
	(prettyName "Hiitolanjoki Lakes")
	(shapeFile "data/mas/hiitolanjoki/shape/hiitolanjoki_a.shp")
	(spatialIndex "data/mas/hiitolanjoki/shape/hiitolanjoki_a.shx"))

([HiitolanjokiRCZ_Class20001] of  CloProgram

	(cloFunctions [Migration_Class80000])
	(cloNamespace [Clojure_Class300001])
	(title "Mig CW"))

([HiitolanjokiRCZ_Class20002] of  CloProgram

	(cloFunctions
		[Migration_Class70005]
		[Migration_Class110000]
		[Migration_Class130012]
		[Migration_Class130011]
		[Migration_Class50006]
		[Migration_Class60014]
		[Migration_Class50005]
		[Migration_Class130013]
		[Migration_Class70014]
		[Migration_Class130014]
		[Migration_Class120001]
		[Migration_Class40024]
		[Migration_Class120008]
		[Migration_Class120002])
	(cloNamespace [HiitolanjokiRCZ_Class20003])
	(cloVars
		[Migration_Class30000]
		[Migration_Class110001]
		[Migration_Class20000])
	(title "Cesium Migration"))

([HiitolanjokiRCZ_Class20003] of  CloNamespace

	(source "(:use protege.core)\n(:require\n  [cesium.server :as cs]\n  [czml.generator :as cg])\n(:import\n  ru.igis.omtab.OpenMapTab\n  ru.igis.omtab.Clock\n  ru.igis.omtab.OMT\n  ru.igis.omtab.MapOb\n  com.bbn.openmap.omGraphics.OMGraphic\n  com.bbn.openmap.omGraphics.OMGraphicList\n  com.bbn.openmap.proj.GreatCircle\n  java.net.URL\n  sim.field.geo.GeomVectorField\n  sim.io.geo.ShapeFileImporter\n  sim.util.geo.AttributeValue\n  com.vividsolutions.jts.geom.Coordinate)")
	(title "cesium.mig"))

([HiitolanjokiRCZ_Class20004] of  CloFunction

	(source "(let [mb (OpenMapTab/getMapBean)\n       start (map #(Math/toRadians %) start)\n       cms (.getComponents mb)]\n  (if-let [slr (first (filter #(= (.getName %) layer) cms))]\n    (let [dbh (.getDbf (.getSpatialIndex slr))\n           dbf (.getDbf dbh)\n           lst (.getList slr)\n           rad (loop [[[col val] & cvrst] col-vals path [start]]\n                   (if (some? col)\n                     (let [idx (.getColumnIndexForName dbf col)]\n                       (if-let [epl (first (filter #(and (not (instance? OMGraphicList %))\n                                                             (= (nth (.getRecordDataForOMGraphic dbh %) idx) val)) lst))]\n                         (let [lla (.getRawllpts epl)\n                                pa2 (partition 2 lla)\n                                [p1 l1] (last path)\n                                [p2 l2] (first pa2)\n                                [p3 l3] (last pa2)\n                                d1 (GreatCircle/sphericalDistance p1 l1 p2 l2)\n                                d2 (GreatCircle/sphericalDistance p1 l1 p3 l3)\n                                nxt (if (< d2 d1)\n                                        (reverse pa2)\n                                        pa2)] \n                           (recur cvrst (concat path nxt)))))\n                     path))]\n      (map #(let [[phi lam] %] [(Math/toDegrees lam) (Math/toDegrees phi) height]) rad))))")
	(title "from-shape-by-attributes [layer col-vals start height]"))

([HiitolanjokiRCZ_Class3] of  ShapeLayer

	(class "com.bbn.openmap.layer.shape.ShapeLayer")
	(fillColor "200000FF")
	(label "HiiRivers")
	(lineColor "ff0000ff")
	(prettyName "Hiitolanjoki Rivers")
	(shapeFile "data/mas/hiitolanjoki/shape/hiitolanjoki_l.shp")
	(spatialIndex "data/mas/hiitolanjoki/shape/hiitolanjoki_l.shx"))

([HiitolanjokiRCZ_Class4] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp1")
	(source "HiitolanjokiRCZ_Class10003")
	(text "О Проект Хиитоланёки"))

([HiitolanjokiRCZ_Class5] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp2")
	(source "HiitolanjokiRCZ_Class10000")
	(text "Noin Hiitolanjoki Hanke"))

([HiitolanjokiRCZ_Class6] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp3")
	(source "HiitolanjokiRCZ_Class10001")
	(text "About Hiitolanjoki Project"))

([HiitolanjokiRCZ_Class7] of  HelpMenuItem

	(class "ru.igis.omtab.menu.InstanceHelpMenuItem")
	(label "hiiHelp4")
	(source "HiitolanjokiRCZ_Class10004")
	(text "Salmon Life Model"))

([HiitolanjokiRCZ_Class8] of  HelpMenuItem

	(class "ru.igis.omtab.menu.BrowserHelpMenuItem")
	(label "hiiHelp5")
	(source "https://hiitolanjoki.fi")
	(text "Hiitolanjoki Project"))

([Migration_Class0] of  %3AINSTANCE-ANNOTATION

	(%3ACREATION-TIMESTAMP "2020.05.31 13:03:03.157 MSK")
	(%3ACREATOR "ru"))

([Migration_Class1] of  Run

	(butt-ass-inss "Assert Instances/ru.rules/ass-inss")
	(butt-fire "Fire/ru.rules/fire-all-rules")
	(butt-run "Run/ru.rules/run-engine")
	(butt-step "Step/ru.rules/step-engine")
	(facts [Migration_Class60001])
	(mode trace)
	(rule-sets
		[Migration_Class50008]
		[Migration_Class100000])
	(steps 1)
	(title "MigRun"))

([Migration_Class10000] of  GoRiverInCesium

	(creature [Migration_Class10001])
	(direct down)
	(height "40")
	(river [Migration_Class110007])
	(spd "2"))

([Migration_Class100000] of  RuleSet

	(rules
		[Migration_Class90000]
		[Migration_Class120006]
		[Migration_Class120007])
	(templates
		[CesiumCamera]
		[GoRiverInCesium]
		[Creature])
	(title "Migration"))

([Migration_Class100001] of  CesiumCamera

	(heading "340")
	(height "20000")
	(latitude "61.33")
	(longitude "29.42")
	(pitch "-60")
	(roll "0"))

([Migration_Class10001] of  Creature

	(age 0)
	(color "[0 255 0 255]")
	(id "s1")
	(life 300000000)
	(size 10)
	(title "Salmon"))

([Migration_Class110000] of  CloFunction

	(source "([shp]\n  (let [dbf (str (.substring shp 0 (- (count shp) 4)) \".dbf\")]\n    (gv-field-from-shape (str \"file:\" shp) (str \"file:\" dbf))))\n([shp dbf]\n  (let [gvf (GeomVectorField.)]\n    (ShapeFileImporter/read (URL. shp) (URL. dbf) gvf)\n    gvf))")
	(title "gv-field-from-shape"))

([Migration_Class110001] of  CloVar

	(source "(volatile! {})")
	(title "RIVERS"))

([Migration_Class110002] of  CloFuncall

	(source "(def rivs (gv-field-from-shape (first RIVERS) (second RIVERS)))"))

([Migration_Class110003] of  CloFuncall

	(source "rivs"))

([Migration_Class110004] of  CloFuncall

	(source "(.getGeometry rivs \"NAME\" (sim.util.geo.AttributeValue. \"Hiitolanjoki\"))"))

([Migration_Class110005] of  CloFuncall

	(source "(.geometry (.getGeometry rivs \"NAME\" (sim.util.geo.AttributeValue. \"Hiitolanjoki\")))"))

([Migration_Class110006] of  CloFuncall

	(source "(.getCoordinates (.geometry (.getGeometry rivs \"NAME\" (sim.util.geo.AttributeValue. \"Hiitolanjoki\"))))"))

([Migration_Class110007] of  River

	(attrs
		"NAME"
		"NAME"
		"NAME"
		"NAME"
		"NAME")
	(estuary "[29.885 61.18]")
	(head "[29.346 61.444]")
	(layer [HiitolanjokiRCZ_Class3])
	(river-speed 2.0)
	(title "Hiitolanjoki")
	(values
		"Hiitolanjoki"
		"Kokkolanjoki2"
		"Kokkolanjoki1"
		"Veijalanjarvi"
		"Asilanjoki"))

([Migration_Class120000] of  CloFuncall

	(source "cesium.mig/RIVERS"))

([Migration_Class120001] of  CloFunction

	(source "([inst knots height start steps step lakes]\n  (let [id (protege.core/sv inst \"id\")\n         color (read-string (protege.core/sv inst \"color\"))\n         size (protege.core/sv inst \"size\")]\n    (go-lakes-random id color size knots height start steps step lakes)))\n([id color size knots height start steps step lakes]\n  (go-random-walk id color size knots height start steps step (lakes :gv-field)))")
	(title "go-lakes-random"))

([Migration_Class120002] of  CloFunction

	(source "(let [name (sv linst \"title\")]\n  (or (@LAKES name)\n    (let [lay (sv linst \"layer\")\n           mp {:layer (sv lay \"prettyName\")\n                   :gv-field (gv-field-from-shape (sv lay \"shapeFile\"))}]\n      (vswap! LAKES assoc name mp)\n      mp)))")
	(title "lakes-map [linst]"))

([Migration_Class120004] of  Basin

	(layer [HiitolanjokiRCZ_Class2])
	(title "Hiitolanjoki Lakes"))

([Migration_Class120006] of  Rule

	(lhs "?gric (GoRiverInCesium status \"START\"\n	id ?id\n	river ?riv\n	direct ?dir\n	spd ?spd\n	height ?hgt\n	run ?run)\n?cre (Creature id ?id\n	color ?clr\n	size ?siz)	\n(Clock time ?t)")
	(rhs "(let [cre (a/vv ?cre ?run)\n       riv (a/vv ?riv ?run)\n       dir (a/vv ?dir ?run)\n       spd (a/vv ?spd ?run)\n       hgt (a/vv ?hgt ?run)\n       spd (read-string spd)\n       hgt (read-string hgt)\n       dir (keyword dir)\n       riv (cesium.mig/river-map riv)\n       elt (cesium.mig/go-river ?id ?clr ?siz spd hgt riv dir)]\n  (modify ?gric status \"REPEAT\"\n	location (condp = dir \n	                :down (riv :estuary)\n	                :up (riv :head))\n	N (+ ?t elt)))")
	(salience 0)
	(title "a:GoRiverInCesiumStart"))

([Migration_Class120007] of  Rule

	(lhs "?gric (GoRiverInCesium status \"REPEAT\"\n	creature ?cre\n	N ?n\n	location ?loc\n	parent ?pid\n	instance ?ain\n	run ?run\n	next_actions ?nacts)\n(Clock time ?t (> ?t ?n))")
	(rhs "(protege.core/ssv (a/vv ?cre ?run) \"location\" (str ?loc))\n(retract ?gric)\n(s/start-next ?nacts ?pid ?ain ?run)")
	(salience 0)
	(title "a:GoRiverInCesiumRepeat"))

([Migration_Class120008] of  CloFunction

	(source "(let [name (sv rinst \"title\")]\n  (or (@RIVERS name)\n    (let [lay (sv rinst \"layer\")\n           mp {:layer (sv lay \"prettyName\")\n                   :head (read-string (sv rinst \"head\"))\n                   :path (vec (map #(vector %1 %2) (svs rinst \"attrs\") (svs rinst \"values\")))\n                   :estuary (read-string (sv rinst \"estuary\"))\n                   :speed (sv rinst \"river-speed\")\n                   :gv-field (gv-field-from-shape (sv lay \"shapeFile\"))}]\n      (vswap! RIVERS assoc name mp)\n      mp)))")
	(title "river-map [rinst]"))

([Migration_Class130001] of  Rule

	(lhs "?c1 (Clock time ?t1)\n?c2 (Clock time ?t2\n	(< ?t2 ?t1))")
	(rhs "(retract ?c2)")
	(salience 10)
	(title "sim:RetractSecondClock"))

([Migration_Class130002] of  CloProgram

	(cloFunctions
		[Migration_Class140004]
		[Migration_Class140005]
		[Migration_Class140006]
		[Migration_Class140007]
		[Migration_Class140008])
	(cloNamespace [Migration_Class140003])
	(cloVars [Migration_Class140009])
	(title "Mig Simulator"))

([Migration_Class130003] of  Rule

	(lhs "?glic (GoLakesInCesium status \"START\"\n	creature ?cre\n	basin ?bas\n	walk ?wlk\n	spd ?spd\n	height ?hgt\n	location ?loc\n	run ?run)\n(Clock time ?t)")
	(rhs "(let [cre (a/vv ?cre ?run)\n       bas (a/vv ?bas ?run)\n       wlk (a/vv ?wlk ?run)\n       spd (a/vv ?spd ?run)\n       hgt (a/vv ?hgt ?run)\n       loc (a/vv ?loc ?run)\n       spd (read-string spd)\n       hgt (read-string hgt)\n       wlk (keyword wlk)\n       bas (cesium.mig/lakes-map bas)\n       elt (cesium.mig/go-lakes-random cre spd hgt riv dir)]\n  (modify ?gric status \"REPEAT\"\n	N (+ ?t elt)))")
	(salience 0)
	(title "a:GoLakesInCesium"))

([Migration_Class130007] of  CloFuncall

	(source "(seq (.getCoordinates (.geometry (.getGeometry rivs \"NAME\" (sim.util.geo.AttributeValue. \"Hiitolanjoki\")))))"))

([Migration_Class130008] of  CloFuncall

	(source "(map seq (.getCoordinates (.geometry (.getGeometry rivs \"NAME\" (sim.util.geo.AttributeValue. \"Hiitolanjoki\")))))"))

([Migration_Class130009] of  CloFuncall

	(source "(map #(vector (.x %) (.y %)) (.getCoordinates (.geometry (.getGeometry rivs \"NAME\" (sim.util.geo.AttributeValue. \"Hiitolanjoki\")))))"))

([Migration_Class130010] of  CloFuncall

	(source "(map #(list (.x %) (.y %)) (.getCoordinates (.geometry (.getGeometry rivs \"NAME\" (sim.util.geo.AttributeValue. \"Hiitolanjoki\")))))"))

([Migration_Class130011] of  CloFunction

	(source "(loop [[[col val] & cvrst] col-vals path [(conj start height)]]\n  (if (some? col)\n    (let [ps (map #(list (.x %) (.y %) height) (.getCoordinates (.geometry (.getGeometry gv-field col (AttributeValue. val)))))\n           p1 (last path)\n           p2 (first ps)\n           p3 (last ps)\n           d1 (simple-dist p1 p2)\n           d2 (simple-dist p1 p3)\n           nxt (if (< d2 d1)\n                   (reverse ps)\n                   ps)] \n      (recur cvrst (concat path nxt)))\n    path))")
	(title "from-gv-field-by-attributes [gv-field col-vals start height]"))

([Migration_Class130012] of  CloFunction

	(source "(+ (Math/abs (- lo1 lo2)) (Math/abs (- la1 la2)))")
	(title "simple-dist [[lo1 la1 & _] [lo2 la2 & _]]"))

([Migration_Class130013] of  CloFunction

	(source ";; returns time of going in sec\n(let [pts (from-gv-field-by-attributes gv-field attrs start height)\n       func-dist #(com.bbn.openmap.proj.GreatCircle/sphericalDistance %1 %2 %3 %4)\n       mils (+ (Clock/getClock) 2000)\n       [czml elt] (cg/add-point-flight id pts knots mils \"RELATIVE_TO_GROUND\" color size func-dist)]\n  (cs/send-czml czml)\n  elt)")
	(title "go-gv-field-attributes [id color size knots height start gv-field attrs]"))

([Migration_Class130014] of  CloFunction

	(source ";; returns time of going in sec\n([inst knots height river direction]\n  (let [id (protege.core/sv inst \"id\")\n         color (read-string (protege.core/sv inst \"color\"))\n         size (protege.core/sv inst \"size\")]\n    (go-river id color size knots height river direction)))\n([id color size knots height river direction]\n  (let [[lah loh] (river :head)\n          [lae loe] (river :estuary)\n          gvf (river :gv-field)]\n    (go-gv-field-attributes id color size\n      (condp = direction\n        :down (+ knots (river :speed))\n        :up (- knots (river :speed)))\n      (or height 16)\n      (condp = direction\n        :down (river :head)\n        :up (river :estuary))\n      (river :gv-field)\n      (condp = direction\n        :down (river :path)\n        :up (reverse (river :path))))))")
	(title "go-river"))

([Migration_Class130015] of  CloFuncall

	(source "(go-river \"s1\" [0 255 0 255] 10 22 20 "))

([Migration_Class130016] of  CloFuncall

	(source "(go-river \"s1\" [0 255 0 255] 10 22 20 H-JOKI :down)"))

([Migration_Class130017] of  CloFuncall

	(source "(go-river \"s1\" [0 255 0 255] 10 22 20 H-JOKI :up)"))

([Migration_Class130019] of  CloFuncall

	(source "(.substring \"aa/ss/dd.shp\" 0 (count \"aa/ss/dd.shp\"))"))

([Migration_Class130020] of  CloFuncall

	(source "(.substring \"aa/ss/dd.shp\" 0 (- (count \"aa/ss/dd.shp\") 4))"))

([Migration_Class140003] of  CloNamespace

	(source "(:use \n  protege.core\n  rete.core)\n(:import\n  ru.igis.omtab.OMT\n  ru.igis.omtab.Clock)")
	(title "sim"))

([Migration_Class140004] of  CloFunction

	(source "(if (and (some? ES-TIMER) (OMT/isRunning))\n  (let [sec (int (/ (Clock/getClock) 1000))]\n    (assert-frame ['Clock 'time sec])\n    (fire)))")
	(title "work-sim []"))

([Migration_Class140005] of  CloFunction

	(source "(when (some? ES-TIMER)\n  (.cancel ES-TIMER)\n  (def ES-TIMER nil)\n  (println \"Simulation Stoped...\"))")
	(title "stop-sim []"))

([Migration_Class140006] of  CloFunction

	(source "(if (some? ES-TIMER)\n  (stop-sim))\n(def ES-TIMER (java.util.Timer.))\n(.schedule \n  ES-TIMER \n  (proxy [java.util.TimerTask] [] (run [] (work-sim)))\n  (long 0) \n  (long 1000))\n(println \"Simulation Started...\")")
	(title "start-sim []"))

([Migration_Class140007] of  CloFunction

	(source "(stop-sim)\n(start-sim)")
	(title "restart-sim []"))

([Migration_Class140008] of  CloFunction

	(source "(Clock/setClock 0)")
	(title "reset-time []"))

([Migration_Class140009] of  CloVar

	(source "nil")
	(title "ES-TIMER"))

([Migration_Class2] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class1])
	(%3ACREATION-TIMESTAMP "2020.05.31 13:04:01.940 MSK")
	(%3ACREATOR "ru"))

([Migration_Class20000] of  CloVar

	(source "{:layer \"Hiitolanjoki Rivers\"\n  :head [29.346 61.444]\n  :path [[\"NAME\" \"Hiitolanjoki\"]\n             [\"NAME\" \"Kokkolanjoki2\"]\n             [\"NAME\" \"Kokkolanjoki1\"]\n             [\"NAME\" \"Veijalanjarvi\"]\n             [\"NAME\" \"Asilanjoki\"]]\n  :estuary [29.885 61.18]\n  :speed 2\n  :gv-field RIVERS}")
	(title "H-JOKI"))

([Migration_Class3] of  WorkingPrograms

	(butt-load-progs "Load Programs/protege.core/ldns")
	(cloPrograms
		[Clojure_Class10000]
		[RuleEngine_Class30000]
		[CesiumBase_Class30004]
		[CesiumWorshop_Class10003]
		[HiitolanjokiRCZ_Class20002])
	(title "Migration Programs"))

([Migration_Class30000] of  CloVar

	(source "[\"file:data/mas/hiitolanjoki/shape/hiitolanjoki_a.shp\"\n \"file:data/mas/hiitolanjoki/shape/hiitolanjoki_a.dbf\"]")
	(title "LAKES"))

([Migration_Class30001] of  CloFuncall

	(source "cesium.mig/LAKES"))

([Migration_Class4] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class3])
	(%3ACREATION-TIMESTAMP "2020.05.31 13:08:14.109 MSK")
	(%3ACREATOR "ru"))

([Migration_Class40000] of  CloFunction

	(source ";; returns time of going in sec\n(let [pts (from-shape-by-attributes layer attrs start height)\n       func-dist #(com.bbn.openmap.proj.GreatCircle/sphericalDistance %1 %2 %3 %4)\n       mils (+ (Clock/getClock) 2000)\n       [czml elt] (cg/add-point-flight id pts knots mils \"RELATIVE_TO_GROUND\" color size func-dist)]\n  (cs/send-czml czml)\n  elt)")
	(title "go-shape-attributes [id color size knots height start layer attrs]"))

([Migration_Class40003] of  CloFunction

	(source ";; returns time of going in sec\n(let [[lah loh] (river :head)\n        [lae loe] (river :estuary)\n        w (min loh loe)\n        s (min lah lae)\n        e (max loh loe)\n        n (max lah lae)]\n  (set-wsen-view w s e n)\n  (go-shape-attributes id color size\n    (condp = direction\n      :down (+ knots (river :speed))\n      :up (- knots (river :speed)))\n    (or height 16)\n    (condp = direction\n      :down (river :head)\n      :up (river :estuary))\n    (river :layer)\n    (condp = direction\n      :down (river :path)\n      :up (reverse (river :path)))))")
	(title "go-river [id color size knots height river direction]"))

([Migration_Class40016] of  CloFunction

	(source "(let [mb (OpenMapTab/getMapBean)\n       prj (.getProjection mb)\n       scl (.getScale mb)\n       ul (.getUpperLeft prj)\n       lr (.getLowerRight prj)\n       [cw cs ce cn] [(.getX ul) (.getY lr) (.getX lr) (.getY ul)]]\n (if (or (> cw w) (> cs s) (> e ce) (> n cn))\n   (let [celat (/ (+ s n) 2)\n          celon (/ (+ w e) 2)]\n     (.setCenter mb celat celon)\n     (.setScale mb (* 1.2 scl))     \n     (if (< (.getScale mb) 50000000)\n       (set-wsen-view w s e n)))))")
	(title "set-wsen-view [w s e n]"))

([Migration_Class40024] of  CloFunction

	(source "(let [run (OMT/isRunning)\n       scl (Clock/getTimeScale)\n       str (Clock/getClock)\n       stp (+ str 3600000)\n       start (cg/iso8601abs str)\n       stop (cg/iso8601abs stp)\n       sec (Clock/getSecond)\n       mult (if run (int scl) 0)\n       cs {:animate true\n              :start start\n              :stop stop\n              :current start\n              :mult mult\n              :step \"SYSTEM_CLOCK_MULTIPLIER\"\n              :range \"UNBOUNDED\"}]\n  (cs/send-clock cs))")
	(title "model-clock []"))

([Migration_Class50000] of  CloFuncall

	(source "(.isCovered cesium.mig/LAKES (com.vividsolutions.jts.geom.Coordinate. 30.2 61.22))"))

([Migration_Class50001] of  CloFuncall

	(source "(.isCovered cesium.mig/LAKES (com.vividsolutions.jts.geom.Coordinate. 30.0 61.333))"))

([Migration_Class50002] of  CloFuncall

	(source "(.isCovered cesium.mig/LAKES (com.vividsolutions.jts.geom.Coordinate. 30.09 61.183))"))

([Migration_Class50003] of  CloFuncall

	(source "(.isCovered cesium.mig/LAKES (com.vividsolutions.jts.geom.Coordinate. 30.095 61.183))"))

([Migration_Class50004] of  CloFuncall

	(source "(.isCovered cesium.mig/LAKES (com.vividsolutions.jts.geom.Coordinate. 30.094 61.183))"))

([Migration_Class50005] of  CloFunction

	(source "(let [phi (Math/toRadians (second start))\n       slon (/ step (Math/cos phi))]\n  (println slon step)\n  (loop [n steps [lon lat] start path [(conj start height)]]\n    (if (> n 0)\n      (let [nxt (next-covered lon lat slon step gv-field)]\n        (recur (dec n) nxt (conj path (conj nxt height))))\n      path)))")
	(title "random-walk [start steps step height gv-field]"))

([Migration_Class50006] of  CloFunction

	(source "(- (* 2 s (Math/random)) s)")
	(title "rand-step [s]"))

([Migration_Class50007] of  CloFuncall

	(source "(in-ns 'cesium.mig)"))

([Migration_Class50008] of  RuleSet

	(rules
		[Migration_Class130001]
		[Migration_Class50009]
		[Migration_Class50010])
	(templates
		[Cesium]
		[Clock])
	(title "MigSimulator"))

([Migration_Class50009] of  Rule

	(lhs "?acc (Cesium status \"START\"\n	time ?t1)\n(Clock time ?t2)")
	(rhs "(when  (some? cesium.server/SERV)\n  (cesium.mig/model-clock)\n  (modify ?acc status \"REPEAT\"\n	N (+ ?t2 ?t1)))")
	(salience 0)
	(title "sim:AdjustCZClockStart"))

([Migration_Class50010] of  Rule

	(lhs "?acc (Cesium status \"REPEAT\"\n	time ?t1\n	N ?n)\n(Clock time ?t2 (> ?t2 ?n))")
	(rhs "(when (some? cesium.server/SERV)\n  (cesium.mig/model-clock)\n  (modify ?acc N (+ ?t2 ?t1)))")
	(salience 0)
	(title "sim:AdjustCZClockRepeat"))

([Migration_Class60000] of  CloFuncall

	(source "(random-walk [] 10 0.011 8 LAKES)"))

([Migration_Class60001] of  Cesium

	(status "START")
	(time 4))

([Migration_Class60008] of  CloFuncall

	(source "(rand-step 100)"))

([Migration_Class60009] of  CloFuncall

	(source "(dotimes [i 100] (println (rand-step 100))"))

([Migration_Class60010] of  CloFuncall

	(source "(dotimes [i 100] (println (rand-step 100)))"))

([Migration_Class60011] of  CloFuncall

	(source "(dotimes [i 100] (println (rand-step 0.0001)))"))

([Migration_Class60014] of  CloFunction

	(source "([lon lat slon step gv-field]\n  (loop [i 4 sl slon st step]\n    (if (> i 0)\n      (if-let [ncvd (next-covered lon lat sl st 10 gv-field)]\n        ncvd\n        (recur (dec i) (* sl 2) (* st 2)))\n      [lon lat])))\n([lon lat slon step n gv-field]\n  (loop [j n]\n    (if (> j 0)\n      (let [lon1 (+ lon (rand-step slon))\n             lat1 (+ lat (rand-step step))]\n        (if (.isCovered gv-field (Coordinate. lon1 lat1))\n          [lon1 lat1]\n          (recur (dec j)))))))")
	(title "next-covered"))

([Migration_Class70000] of  CloFuncall

	(source "(go-random-walk \"w1\" [255 0 0 255] 10 5 20 [29.476 61.496] 100 0.001 LAKES)"))

([Migration_Class70001] of  CloFuncall

	(source "(random-walk [30.24 61.215] 10 0.011 8 LAKES)"))

([Migration_Class70002] of  CloFuncall

	(source "(random-walk [30.24 61.496] 10 0.011 8 LAKES)"))

([Migration_Class70003] of  CloFuncall

	(source "(random-walk [29.481 61.496] 10 0.011 8 LAKES)"))

([Migration_Class70004] of  CloFuncall

	(source "(def rw (random-walk [29.481 61.496] 10 0.011 8 LAKES))"))

([Migration_Class70005] of  CloFunction

	(source "(let [pts (map #(str (MapOb/getDegMin (second %)) \" \" (MapOb/getDegMin (first %))) pts)]\n  (ssvs inst \"points\" pts))")
	(title "set-points [pts inst]"))

([Migration_Class70006] of  CloFuncall

	(source "(set-points rw nil)"))

([Migration_Class70007] of  OMTPoly

	(label "RW")
	(latitude "0 0")
	(lineColor "FFFF0000")
	(longitude "0 0")
	(playground-index 0)
	(points
		"61 14.16 29 55.92"
		"61 14.15 29 55.84"
		"61 14.13 29 55.92"
		"61 14.18 29 55.81"
		"61 14.13 29 55.74"
		"61 14.12 29 55.81"
		"61 14.06 29 55.72"
		"61 14.1 29 55.83"
		"61 14.13 29 55.79"
		"61 14.09 29 55.76"
		"61 14.12 29 55.84"
		"61 14.08 29 55.93"
		"61 14.05 29 55.92"
		"61 14.05 29 55.8"
		"61 14.1 29 55.87"
		"61 14.1 29 55.9"
		"61 14.1 29 56"
		"61 14.14 29 55.88"
		"61 14.17 29 55.93"
		"61 14.14 29 55.9"
		"61 14.13 29 55.78"
		"61 14.13 29 55.73"
		"61 14.15 29 55.86"
		"61 14.17 29 55.76"
		"61 14.13 29 55.81"
		"61 14.08 29 55.75"
		"61 14.04 29 55.76"
		"61 14.04 29 55.77"
		"61 14.09 29 55.83"
		"61 14.06 29 55.8"
		"61 14.02 29 55.72"
		"61 13.97 29 55.79"
		"61 13.98 29 55.69"
		"61 13.93 29 55.81"
		"61 13.98 29 55.9"
		"61 13.94 29 55.92"
		"61 14 29 55.93"
		"61 14.01 29 55.97"
		"61 13.98 29 55.85"
		"61 14.01 29 55.87"
		"61 13.97 29 55.79"
		"61 14 29 55.74"
		"61 14.03 29 55.82"
		"61 14.07 29 55.83"
		"61 14.07 29 55.93"
		"61 14.05 29 56.06"
		"61 14.09 29 55.98"
		"61 14.1 29 56.07"
		"61 14.15 29 56.11"
		"61 14.17 29 56.02"
		"61 14.17 29 56.14"
		"61 14.15 29 56.14"
		"61 14.14 29 56.12"
		"61 14.09 29 56.07"
		"61 14.06 29 56.15"
		"61 14.05 29 56.08"
		"61 14.06 29 56.18"
		"61 14.04 29 56.25"
		"61 14.02 29 56.2"
		"61 13.99 29 56.32"
		"61 14.03 29 56.44"
		"61 14.04 29 56.54"
		"61 14.08 29 56.66"
		"61 14.09 29 56.72"
		"61 14.13 29 56.83"
		"61 14.13 29 56.9"
		"61 14.11 29 56.82"
		"61 14.13 29 56.75"
		"61 14.17 29 56.79"
		"61 14.16 29 56.77"
		"61 14.18 29 56.66"
		"61 14.23 29 56.63"
		"61 14.24 29 56.67"
		"61 14.19 29 56.74"
		"61 14.18 29 56.69"
		"61 14.16 29 56.73"
		"61 14.17 29 56.67"
		"61 14.11 29 56.76"
		"61 14.14 29 56.73"
		"61 14.15 29 56.64"
		"61 14.19 29 56.75"
		"61 14.13 29 56.86"
		"61 14.18 29 56.75"
		"61 14.14 29 56.68"
		"61 14.18 29 56.78"
		"61 14.23 29 56.69"
		"61 14.18 29 56.63"
		"61 14.22 29 56.66"
		"61 14.17 29 56.64"
		"61 14.23 29 56.71"
		"61 14.21 29 56.74"
		"61 14.23 29 56.69"
		"61 14.19 29 56.6"
		"61 14.15 29 56.63"
		"61 14.14 29 56.58"
		"61 14.2 29 56.69"
		"61 14.2 29 56.74"
		"61 14.14 29 56.74"
		"61 14.18 29 56.76"
		"61 14.14 29 56.79"
		"61 14.1 29 56.78"
		"61 14.09 29 56.74"
		"61 14.04 29 56.86"
		"61 14 29 56.91"
		"61 14.05 29 56.88"
		"61 14 29 56.97"
		"61 14 29 57.02"
		"61 14.01 29 57.14"
		"61 14.06 29 57.2"
		"61 14.03 29 57.26"
		"61 14 29 57.38"
		"61 14.02 29 57.48"
		"61 14.07 29 57.38"
		"61 14.09 29 57.36"
		"61 14.13 29 57.38"
		"61 14.14 29 57.44"
		"61 14.13 29 57.34"
		"61 14.12 29 57.28"
		"61 14.11 29 57.36"
		"61 14.11 29 57.41"
		"61 14.08 29 57.43"
		"61 14.09 29 57.32"
		"61 14.03 29 57.42"
		"61 14 29 57.49"
		"61 14 29 57.58"
		"61 13.97 29 57.51"
		"61 13.94 29 57.4"
		"61 13.96 29 57.33"
		"61 13.99 29 57.41"
		"61 14.03 29 57.41"
		"61 14.06 29 57.42"
		"61 14.09 29 57.36"
		"61 14.12 29 57.36"
		"61 14.12 29 57.35"
		"61 14.14 29 57.38"
		"61 14.13 29 57.48"
		"61 14.07 29 57.58"
		"61 14.07 29 57.66"
		"61 14.08 29 57.62"
		"61 14.07 29 57.71"
		"61 14.08 29 57.67"
		"61 14.07 29 57.68"
		"61 14.12 29 57.73"
		"61 14.14 29 57.64"
		"61 14.09 29 57.68"
		"61 14.06 29 57.61"
		"61 14 29 57.54"
		"61 14.05 29 57.49"
		"61 14.09 29 57.45"
		"61 14.1 29 57.46"
		"61 14.08 29 57.35"
		"61 14.13 29 57.34"
		"61 14.08 29 57.43"
		"61 14.07 29 57.51"
		"61 14.09 29 57.55"
		"61 14.13 29 57.47"
		"61 14.11 29 57.36"
		"61 14.06 29 57.31"
		"61 14.04 29 57.37"
		"61 14.06 29 57.33"
		"61 14.02 29 57.28"
		"61 14 29 57.4"
		"61 13.96 29 57.46"
		"61 13.94 29 57.44"
		"61 13.9 29 57.43"
		"61 13.95 29 57.31"
		"61 13.96 29 57.39"
		"61 14.01 29 57.39"
		"61 14 29 57.42"
		"61 13.98 29 57.48"
		"61 13.92 29 57.4"
		"61 13.94 29 57.45"
		"61 14 29 57.34"
		"61 13.97 29 57.39"
		"61 13.97 29 57.3"
		"61 13.94 29 57.33"
		"61 13.92 29 57.34"
		"61 13.92 29 57.34"
		"61 13.93 29 57.37"
		"61 13.95 29 57.4"
		"61 14.01 29 57.34"
		"61 14.05 29 57.42"
		"61 14.11 29 57.35"
		"61 14.13 29 57.42"
		"61 14.13 29 57.33"
		"61 14.1 29 57.28"
		"61 14.07 29 57.17"
		"61 14.12 29 57.08"
		"61 14.13 29 57.09"
		"61 14.07 29 57.14"
		"61 14.09 29 57.15"
		"61 14.08 29 57.07"
		"61 14.06 29 57.11"
		"61 14.09 29 57.07"
		"61 14.04 29 56.95"
		"61 14.02 29 57.06"
		"61 14.03 29 56.99"
		"61 14.07 29 56.93"
		"61 14.07 29 56.92"
		"61 14.13 29 56.85"
		"61 14.08 29 56.86"
		"61 14.11 29 56.9"
		"61 14.11 29 56.9"
		"61 14.12 29 56.84"
		"61 14.07 29 56.72"
		"61 14.1 29 56.62"
		"61 14.13 29 56.74"
		"61 14.15 29 56.77"
		"61 14.13 29 56.65"
		"61 14.18 29 56.58"
		"61 14.16 29 56.51"
		"61 14.13 29 56.44"
		"61 14.14 29 56.47"
		"61 14.15 29 56.56"
		"61 14.15 29 56.61"
		"61 14.15 29 56.59"
		"61 14.16 29 56.5"
		"61 14.11 29 56.58"
		"61 14.14 29 56.49"
		"61 14.18 29 56.59"
		"61 14.18 29 56.68"
		"61 14.15 29 56.63"
		"61 14.19 29 56.73"
		"61 14.15 29 56.82"
		"61 14.14 29 56.85"
		"61 14.15 29 56.74"
		"61 14.19 29 56.71"
		"61 14.18 29 56.62"
		"61 14.13 29 56.68"
		"61 14.14 29 56.67"
		"61 14.09 29 56.77"
		"61 14.06 29 56.84"
		"61 14.04 29 56.92"
		"61 13.99 29 56.83"
		"61 13.97 29 56.76"
		"61 14 29 56.73"
		"61 13.98 29 56.75"
		"61 14.02 29 56.69"
		"61 14.04 29 56.6"
		"61 14.03 29 56.61"
		"61 14.06 29 56.5"
		"61 14.03 29 56.43"
		"61 14.03 29 56.42"
		"61 14.05 29 56.54"
		"61 14.05 29 56.42"
		"61 14.08 29 56.5"
		"61 14.14 29 56.62"
		"61 14.14 29 56.57"
		"61 14.11 29 56.46"
		"61 14.07 29 56.43"
		"61 14.03 29 56.47"
		"61 14.08 29 56.59"
		"61 14.14 29 56.59"
		"61 14.09 29 56.7"
		"61 14.08 29 56.64"
		"61 14.06 29 56.71"
		"61 14.06 29 56.8"
		"61 14.11 29 56.81"
		"61 14.07 29 56.72"
		"61 14.08 29 56.83"
		"61 14.08 29 56.78"
		"61 14.08 29 56.74"
		"61 14.07 29 56.82"
		"61 14.12 29 56.86"
		"61 14.07 29 56.89"
		"61 14.12 29 56.91"
		"61 14.11 29 56.94"
		"61 14.13 29 56.99"
		"61 14.14 29 56.98"
		"61 14.11 29 56.98"
		"61 14.1 29 56.91"
		"61 14.08 29 57"
		"61 14.07 29 56.94"
		"61 14.07 29 56.89"
		"61 14.12 29 56.88"
		"61 14.14 29 56.94"
		"61 14.12 29 56.98"
		"61 14.09 29 56.89"
		"61 14.05 29 56.91"
		"61 14.07 29 56.83"
		"61 14.02 29 56.77"
		"61 14.08 29 56.89"
		"61 14.08 29 56.94"
		"61 14.02 29 57.05"
		"61 14.01 29 57.08"
		"61 14.01 29 57.18"
		"61 14.04 29 57.29"
		"61 14.05 29 57.39"
		"61 14.04 29 57.37"
		"61 13.99 29 57.37"
		"61 14 29 57.39"
		"61 14.01 29 57.48"
		"61 13.97 29 57.42"
		"61 13.93 29 57.37"
		"61 13.97 29 57.37"
		"61 13.94 29 57.38"
		"61 13.96 29 57.49"
		"61 13.99 29 57.41"
		"61 14 29 57.36"
		"61 14 29 57.47"
		"61 14.02 29 57.6"
		"61 13.99 29 57.63"
		"61 14.03 29 57.7"
		"61 14.02 29 57.65"
		"61 13.98 29 57.61"
		"61 13.92 29 57.53"
		"61 13.91 29 57.62"
		"61 13.93 29 57.54"
		"61 13.91 29 57.65"
		"61 13.95 29 57.76"
		"61 13.97 29 57.76"
		"61 13.93 29 57.66"
		"61 13.88 29 57.71"
		"61 13.84 29 57.82"
		"61 13.84 29 57.92"
		"61 13.86 29 57.94"
		"61 13.85 29 58.04"
		"61 13.89 29 57.98"
		"61 13.94 29 57.87"
		"61 13.96 29 57.95"
		"61 13.93 29 57.84"
		"61 13.92 29 57.88"
		"61 13.95 29 57.9"
		"61 13.94 29 57.95"
		"61 13.94 29 57.95"
		"61 13.94 29 57.89"
		"61 13.99 29 57.96"
		"61 13.94 29 58.03"
		"61 13.88 29 58.13"
		"61 13.89 29 58.07"
		"61 13.88 29 58.14"
		"61 13.89 29 58.24"
		"61 13.95 29 58.33"
		"61 13.93 29 58.44"
		"61 13.93 29 58.55"
		"61 13.94 29 58.51"
		"61 13.95 29 58.59"
		"61 14.01 29 58.57"
		"61 14.04 29 58.62"
		"61 14.09 29 58.55"
		"61 14.11 29 58.51"
		"61 14.07 29 58.44"
		"61 14.09 29 58.41"
		"61 14.05 29 58.44"
		"61 14.02 29 58.5"
		"61 14.02 29 58.39"
		"61 14.05 29 58.36"
		"61 14.1 29 58.31"
		"61 14.07 29 58.29"
		"61 14.04 29 58.39"
		"61 14.04 29 58.38"
		"61 14.06 29 58.43"
		"61 14.07 29 58.5"
		"61 14.09 29 58.59"
		"61 14.07 29 58.57"
		"61 14.1 29 58.69"
		"61 14.06 29 58.8"
		"61 14.03 29 58.7"
		"61 14.02 29 58.7"
		"61 14.07 29 58.66"
		"61 14.08 29 58.65"
		"61 14.1 29 58.66"
		"61 14.05 29 58.57"
		"61 14.02 29 58.48"
		"61 14.07 29 58.47"
		"61 14.11 29 58.46"
		"61 14.07 29 58.43"
		"61 14.06 29 58.5"
		"61 14.03 29 58.59"
		"61 14.02 29 58.61"
		"61 14.03 29 58.52"
		"61 14.05 29 58.42"
		"61 14.08 29 58.46"
		"61 14.05 29 58.52"
		"61 14.11 29 58.56"
		"61 14.1 29 58.5"
		"61 14.05 29 58.59"
		"61 14.01 29 58.54"
		"61 14.03 29 58.55"
		"61 13.98 29 58.44"
		"61 14 29 58.42"
		"61 14.02 29 58.35"
		"61 14.03 29 58.46"
		"61 14 29 58.4"
		"61 13.97 29 58.36"
		"61 13.95 29 58.25"
		"61 13.96 29 58.25"
		"61 13.95 29 58.31"
		"61 13.98 29 58.41"
		"61 13.97 29 58.33"
		"61 13.98 29 58.34"
		"61 13.92 29 58.39"
		"61 13.97 29 58.42"
		"61 14 29 58.38"
		"61 13.99 29 58.27"
		"61 14.02 29 58.26"
		"61 14.06 29 58.2"
		"61 14.11 29 58.27"
		"61 14.06 29 58.39"
		"61 14.04 29 58.34"
		"61 14.03 29 58.27")
	(relative FALSE))

([Migration_Class70008] of  CloFuncall

	(source "(set-points rw (fifos \"OMT))"))

([Migration_Class70009] of  CloFuncall

	(source "(set-points rw (fifos \"OMTPoly\" \"title\" \"RW\"))"))

([Migration_Class70014] of  CloFunction

	(source ";; returns time of going in sec\n(let [pts (random-walk start steps step height gv-field)\n       func-dist #(com.bbn.openmap.proj.GreatCircle/sphericalDistance %1 %2 %3 %4)\n       mils (+ (Clock/getClock) 2000)\n       [czml elt] (cg/add-point-flight id pts knots mils \"RELATIVE_TO_GROUND\" color size func-dist)]\n  (cs/send-czml czml)\n  elt)")
	(title "go-random-walk [id color size knots height start steps step gv-field]"))

([Migration_Class80000] of  CloFunction

	(source "(println \"INITIALIZING EXPERT SYSTEM\")\n(println \"1. Loading Clojure Programs...\")\n(if-let [wps (ClojureTab/findAnnotated (cls-instances \"WorkingPrograms\") nil)]\n  (loop [i 1 pins (svs wps \"cloPrograms\")]\n    (when (seq pins)\n      (println (str \" 1.\" i \" \" (sv (first pins) \"title\") \" = \" (ClojureTab/loadProgram (first pins)) ))\n      (recur (inc i) (rest pins)) ) )\n  (println \"  Annotated instance of WorkingPrograms not found!\"))\n(println \"2. Starting Expert System.\")\n(if-let [run (ClojureTab/findAnnotated (cls-instances \"Run\") nil)]\n  (ClojureTab/invoke \"ru.rules\" \"run-engine\" run)\n  (println \"  Annotated instance of Run not found!\"))\n(println \"3. Starting Simulation.\")\n(ClojureTab/invoke \"sim\" \"start-sim\")\n(println \"4. Mission Button Support.\")\n(ClojureTab/invoke \"s\" \"mission-button-support\")\n(println \"EXPERT SYSTEM INITIALIZED\")\n(println \"5. Starting Cesium.\")\n(if-let [csi (ClojureTab/findAnnotated (cls-instances \"CesiumServer\") nil)]\n  (do (ClojureTab/invoke \"cesium.server\" \"start-server\" (sv csi \"port\"))\n    (clojure.java.browse/browse-url (str \"http://localhost:\" (sv csi \"port\")))\n    (println \"Cesium started..\"))\n  (println \"Annotated instance of CesiumServer not found!\"))")
	(title "clojure-work []"))

([Migration_Class80001] of  CesiumServer

	(butt-start-cs-server "Start/cesium.server/start-server")
	(butt-stop-cs-server "Stop/cesium.server/stop-server")
	(page "test.html")
	(port 4448))

([Migration_Class80002] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [Migration_Class80001])
	(%3ACREATION-TIMESTAMP "2020.06.06 17:32:13.284 MSK")
	(%3ACREATOR "ru"))

([Migration_Class90000] of  Rule

	(lhs "?cc (CesiumCamera status \"START\" \n	title ?tit \n	latitude ?lat \n	longitude ?lon \n	height ?hgt \n	heading ?hdg\n	pitch ?ptc\n	roll ?rol)")
	(rhs "(when (some? cesium.server/SERV)\n  (cesium.server/send-camera ?lon ?lat ?hgt ?hdg ?ptc ?rol)\n  (modify ?cc status \"WORK\"))")
	(salience 0)
	(title "a:CesiumCamera"))
