; Sun Mar 07 20:47:06 MSK 2021
; 
;+ (version "3.5")
;+ (build "Build 663")

([CesiumBase_Class0] of  ClsRequired

	(cloFunctions
		[CesiumBase_Class110003]
		[CesiumBase_Class20005]
		[CesiumBase_Class20006]
		[CesiumBase_Class70019]
		[CesiumBase_Class10001]
		[CesiumBase_Class10007]
		[CesiumBase_Class20002]
		[CesiumBase_Class30000]
		[CesiumBase_Class20000]
		[CesiumBase_Class50000]
		[CesiumBase_Class40001]
		[CesiumBase_Class40000]
		[CesiumBase_Class10000]
		[CesiumBase_Class110002])
	(cloNamespace [CesiumBase_Class1])
	(cloVars
		[CesiumBase_Class120000]
		[CesiumBase_Class10002]
		[CesiumBase_Class10005]
		[CesiumBase_Class10004]
		[CesiumBase_Class10003]
		[CesiumBase_Class10006]
		[CesiumBase_Class20001]
		[CesiumBase_Class10008]
		[CesiumBase_Class30001]
		[CesiumBase_Class60001]
		[CesiumBase_Class30003]
		[CesiumBase_Class40002]
		[CesiumBase_Class110001])
	(title "Cesium Client"))

([CesiumBase_Class1] of  CloNamespace

	(title "cesium.client"))

([CesiumBase_Class10000] of  CloFunction

	(source "(letfn[(fly-one [cam next]\n            (let [orient (js/Cesium.HeadingPitchRoll. (nth (@ORBIT :headings) next) (.-pitch cam) (.-roll cam))]\n              (.flyTo cam #js{:destination (nth (@ORBIT :ring) next)\n                                       :orientation #js{:heading (.-heading orient)\n                                                               :pitch (.-pitch orient)\n                                                               :roll (.-roll orient)}\n                                       :duration (@ORBIT :step-sec)\n                                       :easingFunction js/Cesium.EasingFunction.LINEAR_NONE\n                                       :complete #(fly-next cam (inc next))\n                                       :cancel #(fly-cancel cam next)})))\n          (fly-next [cam next]\n            (if (< next (count (@ORBIT :ring)))\n              (fly-one cam next)\n              (fly-one cam 0)))\n          (fly-cancel [cam next]\n             (vswap! ORBIT assoc :next next))\n          (next [az azs]\n            (let [N (count azs)\n                   n (+ (/ N 2) (count (filter #(< % az) azs)))]\n              (if (> n (dec N)) (- n N) n)))]\n            \n  (let [obut (.createElement js/document \"button\")]\n    (set! (.-innerHTML obut) \"Toggle orbit\")\n    (.add (.-classList obut) \"cesium-button\")\n    (.prepend (.querySelector js/document \".cesium-viewer-toolbar\") obut)\n    (set! (.-onclick obut)\n      (fn []\n        (condp = (@ORBIT :status)\n          :init\n          (vswap! ORBIT assoc :status :stop)\n          :stop\n          (let [steps (@ORBIT :steps)\n                 radm (@ORBIT :radius-m)\n                 radr (* (/ radm 1852 60 180) js/Math.PI)\n                 [lam phi hgt :as look] (look-at camera radm)\n                 [azs pts] (azimuths&points [lam phi] radr hgt steps)\n                 ring (vec (map #(js/Cesium.Cartesian3.fromRadians (first %) (second %) (nth % 2)) pts))\n                 headings (vec (map #(normaz (+ % js/Math.PI)) azs))\n                 begin (next (.-heading camera) azs)]\n            (vswap! ORBIT assoc :ring ring\n                                             :headings headings\n                                             :center (js/Cesium.Cartesian3.fromRadians lam phi hgt)\n                                             :next begin\n                                             :status :run)\n            (fly-one camera begin))\n          :run\n          (do (.cancelFlight camera)\n            (vswap! ORBIT assoc :status :stop)))))))")
	(title "add-orbit-button [camera]"))

([CesiumBase_Class100000] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       _ (.setTimeInMillis cld mills)\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601abs [mills]"))

([CesiumBase_Class100001] of  CloFunction

	(source "(let [[coord elt] (lolah->slolah lolah-points knots func-spherical-distance)\n       coord (flatten coord)\n       coord (interpose \",\" coord)\n       coord (apply str coord)\n       rgba (str \"[\" iR \",\" iG \",\" iB \",\" iA \"]\")\n       epoch (iso8601abs mils)\n       s (str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},\"\n                \"{\\\"id\\\":\\\"\"\n                id\n                \"\\\",\\\"position\\\":{\\\"cartographicDegrees\\\":[\" \n                coord\n                \"],\\\"interpolationAlgorithm\\\":\\\"LAGRANGE\\\",\\\"interpolationDegree\\\":1,\\\"epoch\\\":\\\"\"\n                epoch\n                \"\\\"},\\\"point\\\":{\\\"color\\\":{\\\"rgba\\\":\" rgba \"},\\\"pixelSize\\\":\" size \",\\\"heightReference\\\":\\\"\" height-ref \"\\\"}}]\")]\n  [s elt])")
	(title "add-point-flight [id lolah-points knots mils height-ref [iR iG iB iA] size func-spherical-distance]"))

([CesiumBase_Class100004] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       mil (.getTimeInMillis cld)\n       _ (.setTimeInMillis cld (+ mil (* sec 1000)))\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601futt [sec]"))

([CesiumBase_Class10001] of  CloFunction

	(source "(let [{:keys [longitude latitude height heading pitch roll]} view\n       fvw (camera-fly camera longitude latitude height heading pitch roll)]\n  (def HOME-VIEW fvw)\n  (.addEventListener \n    (.-beforeExecute (.-command (.-viewModel (.-homeButton VIEWER))))\n    (fn [e]\n      (set! (.-cancel e) true)\n      (.flyTo camera HOME-VIEW)))\n  (.flyTo camera HOME-VIEW))")
	(title "camera-home [camera view]"))

([CesiumBase_Class10002] of  CloVar

	(source "(js/Cesium.Viewer. \"cesiumContainer\")")
	(title "VIEWER"))

([CesiumBase_Class10003] of  CloVar

	(source "(.-camera SCENE)")
	(title "CAMERA"))

([CesiumBase_Class10004] of  CloVar

	(source "(.-scene VIEWER)")
	(title "SCENE"))

([CesiumBase_Class10005] of  CloVar

	(source "(.-clock VIEWER)")
	(title "CLOCK"))

([CesiumBase_Class10006] of  CloVar

	(source "(.-canvas SCENE)")
	(title "CANVAS"))

([CesiumBase_Class10007] of  CloFunction

	(source "([clock settings viewer]\n  (let [{:keys [animate start stop current mult step range]} settings]\n    (clock-settings clock animate start stop current mult step range viewer)))\n([clock animate start stop current mult step range viewer]\n  (set! (.-shouldAnimate clock) animate)\n  (set! (.-startTime clock) (js/Cesium.JulianDate.fromIso8601 start))\n  (set! (.-stopTime clock) (js/Cesium.JulianDate.fromIso8601 stop))\n  (set! (.-currentTime clock) (js/Cesium.JulianDate.fromIso8601 current))\n  (set! (.-multiplier clock) mult)\n  (set! (.-clockStep clock) \n             (condp = step\n               \"TICK_DEPENDENT\" js/Cesium.ClockStep.TICK_DEPENDENT	\n               \"SYSTEM_CLOCK_MULTIPLIER\" js/Cesium.ClockStep.SYSTEM_CLOCK_MULTIPLIER\n               \"SYSTEM_CLOCK\" js/Cesium.ClockStep.SYSTEM_CLOCK))\n  (set! (.-clockRange clock) \n             (condp = range\n               \"UNBOUNDED\" js/Cesium.ClockRange.UNBOUNDED\n               \"CLAMPED\" js/Cesium.ClockRange.CLAMPED\n               \"LOOP_STOP\" js/Cesium.ClockRange.LOOP_STOP))\n  (.zoomTo (.-timeline viewer) (.-startTime clock) (.-stopTime clock)))")
	(title "clock-settings"))

([CesiumBase_Class10008] of  CloVar

	(source "{:animate true\n  :start \"2020-08-08T16:00:00Z\"\n  :stop \"2020-08-08T16:20:00Z\"\n  :current \"2020-08-08T16:00:00Z\"\n  :mult 4\n  :step \"SYSTEM_CLOCK_MULTIPLIER\"\n  :range \"LOOP_STOP\"}")
	(title "CLOCK-SET"))

([CesiumBase_Class10009] of  ClsMain

	(asset-path "js/cezium/test")
	(butt-build "Build/cljs.compile/build")
	(cloFunctions [CesiumBase_Class20003])
	(cloNamespace [CesiumBase_Class10010])
	(compiler-options "{:verbose false}")
	(css [CesiumBase_Class10012])
	(epilogue "(enable-console-print!)\n(set! (.-onload js/window) (init-client))")
	(html [CesiumBase_Class10011])
	(output-dir "resources/public/js/cezium/test")
	(output-to "resources/public/js/cezium/test.js")
	(required [CesiumBase_Class0])
	(store-in "src/cljs/cezium")
	(title "Test Client"))

([CesiumBase_Class10010] of  CloNamespace

	(source "(:require \n  [cesium.client :refer\n    [add-imagery-by-asset-id\n     add-terrain\n     camera-home\n     clock-settings\n     load-data\n     start-event-processing\n     look-at\n     add-orbit-button\n     mouse-move\n     PORT\n     VIEWER\n     CLOCK\n     SCENE\n     CAMERA\n     CANVAS\n     HOME-VIEW\n     CLOCK-SET\n     EVENT-DEBUG]])")
	(title "test.client"))

([CesiumBase_Class10011] of  HTML

	(source "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <!-- Use correct character set. -->\n        <meta charset=\"utf-8\">\n        <!-- Tell IE to use the latest, best version. -->\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n        <!-- Make the app on mobile take up the full browser screen and disable user scaling. -->\n        <meta name=\"viewport\"\n            content=\"width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\">\n        <title>Cesium</title>\n        <!-- The Cesium library. -->\n        <script src=\"Cesium/Cesium.js\"></script>\n        <link href=\"Cesium/Widgets/widgets.css\" rel=\"stylesheet\">\n        <!-- Style our app. -->\n        <link rel=\"stylesheet\" href=\"cezium/css/test.css\" media=\"screen\">\n        <style>\n          @import url(Cesium/Widgets/widgets.css);\n        </style>\n    </head>\n    <body>\n       <!-- A container for the Cesium Viewer to live in. -->\n        <div id=\"cesiumContainer\"></div>\n        <div id=\"mouse-pos\"></div>\n        <script>\n          // Grant your CesiumJS app access to your ion assets\n          // This is your actual default access token, you can copy/paste this directly into your app code\n          Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwN2EzYzEyNS1mMmNlLTRlYjEtYjRiMS04OTliNjhkZjI4NzQiLCJpZCI6MzY0MCwic2NvcGVzIjpbImFzciIsImdjIl0sImlhdCI6MTUzODQxODg5OH0.E2p7oe8fLJOtyawv0uT9zBZw4oyKZ6Vt3CZsE0FKeJw';\n        </script>\n        <script src=\"js/cezium/test.js\"></script>\n    </body>\n</html>")
	(store-in "resources/public/cezium")
	(title "test"))

([CesiumBase_Class10012] of  CSS

	(source "html, body, #cesiumContainer {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    font-family: sans-serif;\n    background: #000;\n}\n#mouse-pos {\n  position: absolute;\n  left: 0;\n  top: 5%;\n  width: 100%;\n  text-align: center;\n  color:yellow\n}")
	(store-in "resources/public/cezium/css")
	(title "test"))

([CesiumBase_Class110000] of  CloFunction

	(source "(send-clj-funcall \n  `(cesium.client/camera-fly \n     ~'cesium.client.CAMERA\n     ~longitude \n     ~latitude\n     ~height\n     ~heading\n     ~pitch\n     ~roll))")
	(title "send-camera [longitude latitude height heading pitch roll]"))

([CesiumBase_Class110001] of  CloVar

	(source "(js/Cesium.ScreenSpaceEventHandler. (.-canvas SCENE))")
	(title "HANDLER"))

([CesiumBase_Class110002] of  CloFunction

	(source "(.setInputAction HANDLER \n  (fn [mov] (if-let [crt (.pickEllipsoid (.-camera VIEWER) (.-endPosition mov) (.-ellipsoid (.-globe SCENE)))]\n                   (let [crg (js/Cesium.Cartographic.fromCartesian crt)\n                          lon (.toFixed (js/Cesium.Math.toDegrees (.-longitude crg)) 3)\n                          lat (.toFixed (js/Cesium.Math.toDegrees (.-latitude crg)) 3)]\n                      (set-html! \"mouse-pos\" (str \"[\" lon \" \" lat \"]\")))))\n  js/Cesium.ScreenSpaceEventType.MOUSE_MOVE)")
	(title "mouse-move []"))

([CesiumBase_Class110003] of  CloFunction

	(source "(set! (.-innerHTML (.getElementById js/document id)) msg)")
	(title "set-html! [id msg]"))

([CesiumBase_Class110007] of  CloFunction

	(source "(send-clj-funcall \n  `(cesium.client/clock-settings \n     ~'cesium.client.CLOCK \n     ~(cs :animate)\n     ~(cs :start)\n     ~(cs :stop)\n     ~(cs :current)\n     ~(cs :mult)\n     ~(cs :step)\n     ~(cs :range)\n     ~'cesium.client.VIEWER))")
	(title "send-clock [cs]"))

([CesiumBase_Class120000] of  CloVar

	(source "8448")
	(title "PORT"))

([CesiumBase_Class120001] of  CloFunction

	(source "(if-let [clm (fainst (cls-instances \"ClsMain\") nil)]\n  (if-let [htm (first (svs clm \"html\"))]\n    (str (sv htm \"store-in\") \"/\" (sv htm \"title\") \".html\")\n    (do (println :PAGE-NOT-FOUND) nil))\n  (do (println :ClsMain-NOT-FOUND) nil))")
	(title "find-page []"))

([CesiumBase_Class120002] of  CloFunction

	(source "([]\n  (if-let [serv SERV]\n    (invoke-later (.browse (Desktop/getDesktop) (URI/create (str \"http://0.0.0.0:\" PORT))))))\n([hm inst]\n  (start-client))")
	(title "start-client"))

([CesiumBase_Class120003] of  CesiumServer

	(but-start-cs-client "Start Client/cesium.server/start-client")
	(butt-start-cs-server "Start Server/cesium.server/start-server")
	(butt-stop-cs-server "Stop Server/cesium.server/stop-server"))

([CesiumBase_Class130000] of  CloFunction

	(source "(let [epo (iso8601abs (* s1 1000))\n      epof (iso8601abs (* s2 1000))\n      s (str\n  \"{\\\"id\\\":\\\"\"\n    id \n  \"\\\",\\\"availability\\\":\\\"\"\n    epo \"/\" epof\n  \"\\\",\\\"position\\\":{\\\"cartographicDegrees\\\":[\\\"\"\n    epo \"\\\",\" lo1 \",\" la1 \",\"  h1 \",\\\"\"\n    epof \"\\\",\" lo2 \",\" la2 \",\" h2\n  \"]},\\\"point\\\":{\\\"color\\\":{\\\"rgba\\\":[\"\n    iR \",\" iG \",\" iB \",\" iA\n  \"]},\\\"pixelSize\\\":\"\n    size\n  \"}}\")]\n  (if doc?\n    (str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},\" s \"]\")\n    s))")
	(title "point-move [id s1 s2 [[lo1 la1 h1] [lo2 la2 h2]] [[iR iG iB iA] size] doc?]"))

([CesiumBase_Class140000] of  %3AINSTANCE-ANNOTATION

	(%3AANNOTATED-INSTANCE [CesiumBase_Class10009])
	(%3ACREATION-TIMESTAMP "2021.03.06 18:53:00.401 MSK")
	(%3ACREATOR "ru"))

([CesiumBase_Class140008] of  CloFunction

	(source "(let [start (iso8601abs start-mil)\n       stop (iso8601abs (+ start-mil 3600000))\n       mult (int scl)\n       cs {:animate true\n              :start start\n              :stop stop\n              :current start\n              :mult mult\n              :step \"SYSTEM_CLOCK_MULTIPLIER\"\n              :range \"UNBOUNDED\"}]\n  (send-clock cs))")
	(title "restart-clock [start-mil scl]"))

([CesiumBase_Class150000] of  CloFunction

	(source "(let [[[lR lG lB lA] lW [fR fG fB fA]] poly-view\n       point-view (or point-view [[0 0 0 0] 0])\n       pns (for [i (range (count pts1))] (str id i))\n       pts (map #(point-move %1 s1 s2  [%2 %3] point-view false) pns pts1 pts2)\n       pts (apply str (interpose \",\" pts))\n       refs (map #(str \"\\\"\" % \"#position\\\"\") pns)\n       refs (apply str (interpose \",\" refs))\n       epo (iso8601abs (* s1 1000))\n       epof (iso8601abs (* s2 1000))\n       poly (str\n  \"{\\\"id\\\":\\\"\"\n    id\n  \"\\\",\\\"name\\\":\\\"\"\n    name\n  \"\\\",\\\"availability\\\":\\\"\"\n    epo \"/\" epof\n  \"\\\",\\\"polygon\\\":{\\\"positions\\\":{\\\"epoch\\\":\\\"\"\n    epo\n  \"\\\",\\\"references\\\":[\"\n    refs\n  \"]},\\\"perPositionHeight\\\":true,\\\"material\\\":{\\\"solidColor\\\":{\\\"color\\\":{\\\"rgba\\\": [\"\n    fR \",\" fG \",\" fB \",\" fA\n  \"]}}},\\\"outline\\\":true,\\\"outlineColor\\\":{\\\"rgba\\\":[\"\n    lR \",\" lG \",\" lB \",\" lA\n  \"]},\\\"outlineWidth\\\":\"\n    lW\n  \"}}\")\n       doc \"{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"}\"]\n  (str \"[\" doc \",\" pts \",\" poly \"]\"))")
	(title "poly-move [id name s1 s2 pts1 pts2 poly-view point-view]"))

([CesiumBase_Class20000] of  CloFunction

	(source "(let [cosphi1 (js/Math.cos phi1)\n       sinphi1 (js/Math.sin phi1)\n       cosaz (js/Math.cos az)\n       sinaz (js/Math.sin az)\n       sinc (js/Math.sin c)\n       cosc (js/Math.cos c)\n       phi2 (js/Math.asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n       lam2 (+ (js/Math.atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n  [lam2 phi2])")
	(title "position-js [^double lambda0 ^double phi1 ^double c ^double az]"))

([CesiumBase_Class20001] of  CloVar

	(source "{:latitude 28.02\n  :longitude 86.93\n  :height 8848\n  :heading 180\n  :pitch -10\n  :roll 0}")
	(title "HOME-VIEW"))

([CesiumBase_Class20002] of  CloFunction

	(source "(let [promise (condp = format\n                       :GeoJSON (js/Cesium.GeoJsonDataSource.load source options)\n                       :CZML (js/Cesium.CzmlDataSource.load source options)\n                       :KML (js/Cesium.KmlDataSource.load source options))]\n  (.then promise (fn [ds] \n                            (.add (.-dataSources viewer) ds)\n                            (processor ds))))")
	(title "load-data [format source options viewer processor]"))

([CesiumBase_Class20003] of  CloFunction

	(source "(add-terrain nil VIEWER)\n(camera-home CAMERA HOME-VIEW)\n(start-event-processing PORT VIEWER)\n(add-orbit-button CAMERA)\n(mouse-move)")
	(title "init-client []"))

([CesiumBase_Class20005] of  CloFunction

	(source "(let [ilays (.-imageryLayers viewer)]\n  (.remove ilays (.get ilays 0))\n  (.addImageryProvider ilays (js/Cesium.IonImageryProvider. #js{:assetId id})))")
	(title "add-imagery-by-asset-id [id viewer]"))

([CesiumBase_Class20006] of  CloFunction

	(source "(set! (.-terrainProvider viewer) (js/Cesium.createWorldTerrain. options))\n(set! (.-depthTestAgainstTerrain (.-globe (.-scene viewer))) true)")
	(title "add-terrain [options viewer]"))

([CesiumBase_Class30000] of  CloFunction

	(source "(letfn [(cz-processor [e]\n             (let [data (.-data e)]\n               (if EVENT-DEBUG\n                 (println :CZML data))\n               (.process CZML-DS (js/JSON.parse data))))\n          (km-processor [e]\n             (let [data (.-data e)]\n               (if EVENT-DEBUG\n                 (println :KML data))\n               (.load KML-DS (.parseFromString (js/DOMParser.) data \"text/xml\"))))\n          (js-processor [e]\n             (let [data (.-data e)]\n               (if EVENT-DEBUG\n                 (println :JS data))\n               (js/eval data)))]\n  (let [es (js/EventSource. (str \"http://0.0.0.0:\" port \"/event\"))]\n    (.add (.-dataSources viewer) CZML-DS)\n    (.add (.-dataSources viewer) KML-DS)\n    (.addEventListener es \"czml\" cz-processor false)\n    (.addEventListener es \"kml\" km-processor false)\n    (.addEventListener es \"js\" js-processor false)))")
	(title "start-event-processing [port viewer]"))

([CesiumBase_Class30001] of  CloVar

	(source "(js/Cesium.CzmlDataSource.)")
	(title "CZML-DS"))

([CesiumBase_Class30003] of  CloVar

	(source "false")
	(title "EVENT-DEBUG"))

([CesiumBase_Class30004] of  CloProgram

	(cloFunctions
		[CesiumBase_Class90001]
		[CesiumBase_Class100004]
		[CesiumBase_Class100000]
		[CesiumBase_Class30008]
		[CesiumBase_Class30006]
		[CesiumBase_Class30007]
		[CesiumBase_Class30009]
		[CesiumBase_Class90000]
		[CesiumBase_Class100001]
		[CesiumBase_Class130000]
		[CesiumBase_Class150000])
	(cloNamespace [CesiumBase_Class30005])
	(title "CZML Generator"))

([CesiumBase_Class30005] of  CloNamespace

	(source "(:import java.util.Calendar)")
	(title "czml.generator"))

([CesiumBase_Class30006] of  CloFunction

	(source "([pfx lalo-points height]\n  (let [s (str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},\"\n             (apply \n               str \n               (map \n                 #(let [[iR iG iB iA] (nth %2 2)\n                           rgba (str \"[\" iR \",\" iG \",\" iB \",\" iA \"]\")]\n                     (str \"{\\\"id\\\":\\\"\" (str pfx %1) \"\\\",\\\"position\\\":{\\\"cartographicDegrees\\\":[\" (second %2) \",\" (first %2) \",\" height \"]},\\\"point\\\":{\\\"color\\\":{\\\"rgba\\\":\" rgba \"},\\\"pixelSize\\\":\" (nth %2 3) \",\\\"heightReference\\\":\\\"RELATIVE_TO_GROUND\\\"}},\"))\n                 (range (count lalo-points))  \n                 lalo-points)))]\n    (str (.substring s 0 (dec (count s))) \"]\")))\n([pfx lalo-points height-ref size]\n  (let [s (str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},\"\n             (apply \n               str \n               (map \n                 #(let [[iR iG iB iA] (nth %2 2)\n                           rgba (str \"[\" iR \",\" iG \",\" iB \",\" iA \"]\")]\n                     (str \"{\\\"id\\\":\\\"\" (str pfx %1) \"\\\",\\\"position\\\":{\\\"cartographicDegrees\\\":[\" (second %2) \",\" (first %2) \",\" (nth %2 3) \"]},\\\"point\\\":{\\\"color\\\":{\\\"rgba\\\":\" rgba \"},\\\"pixelSize\\\":\" size \",\\\"heightReference\\\":\\\"\" height-ref \"\\\"}},\"))\n                 (range (count lalo-points))  \n                 lalo-points)))]\n    (str (.substring s 0 (dec (count s))) \"]\")))\n([pfx lalo-points height height-ref size]\n  (let [s (str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},\"\n             (apply \n               str \n               (map \n                 #(let [[iR iG iB iA] (nth %2 2)\n                           rgba (str \"[\" iR \",\" iG \",\" iB \",\" iA \"]\")]\n                     (str \"{\\\"id\\\":\\\"\" (str pfx %1) \"\\\",\\\"position\\\":{\\\"cartographicDegrees\\\":[\" (second %2) \",\" (first %2) \",\" height \"]},\\\"point\\\":{\\\"color\\\":{\\\"rgba\\\":\" rgba \"},\\\"pixelSize\\\":\" size \",\\\"heightReference\\\":\\\"\" height-ref \"\\\"}},\"))\n                 (range (count lalo-points))  \n                 lalo-points)))]\n    (str (.substring s 0 (dec (count s))) \"]\")))\n([pfx lalo-points height height-ref [iR iG iB iA] size]\n  (let [rgba (str \"[\" iR \",\" iG \",\" iB \",\" iA \"]\")\n         s (str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},\"\n              (apply \n                str \n                (map \n                  #(str \"{\\\"id\\\":\\\"\" (str pfx %1) \"\\\",\\\"position\\\":{\\\"cartographicDegrees\\\":[\" (second %2) \",\" (first %2) \",\" height \"]},\\\"point\\\":{\\\"color\\\":{\\\"rgba\\\":\" rgba \"},\\\"pixelSize\\\":\" size \",\\\"heightReference\\\":\\\"\" height-ref \"\\\"}},\") \n                  (range (count lalo-points))  \n                  lalo-points)))]\n    (str (.substring s 0 (dec (count s))) \"]\")))")
	(title "add-points"))

([CesiumBase_Class30007] of  CloFunction

	(source "(let [s (str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},\"\n            (apply str (map #(str \"{\\\"id\\\":\\\"\" (str pfx %) \"\\\",\\\"delete\\\":true},\") (range number))))]\n  (str (.substring s 0 (dec (count s))) \"]\"))")
	(title "delete-points [pfx number]"))

([CesiumBase_Class30008] of  CloFunction

	(source "(str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},{\\\"id\\\":\\\"\" id \"\\\",\\\"delete\\\":true}]\")")
	(title "delete [id]"))

([CesiumBase_Class30009] of  CloFunction

	(source "(str \"[{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"},{\\\"id\\\":\\\"\" id \"\\\",\\\"rectangle\\\":{\\\"coordinates\\\":{\\\"wsenDegrees\\\":[\" w \",\" s \",\" e \",\" n \"]},\\\"material\\\":{\\\"image\\\":{\\\"image\\\":{\\\"uri\\\":\\\"\" uri \"\\\"},\\\"color\\\":{\\\"rgba\\\":[255,255,255,\" (int (* trans 255)) \"]}}}}}]\")")
	(title "add-image [id uri [w s e n] trans]"))

([CesiumBase_Class40000] of  CloFunction

	(source "(let [cmp (.-position camera)\n       cmp (js/Cesium.Cartographic.fromCartesian cmp)\n       [lam phi hgt] [(.-longitude cmp) (.-latitude cmp) (.-height cmp)]\n       az (.-heading camera)\n       c (* (/ dist-m 1852 60 180) js/Math.PI)\n       [lam2 phi2] (position-js lam phi c az)]\n  [lam2 phi2 hgt])")
	(title "look-at [camera dist-m]"))

([CesiumBase_Class40001] of  CloFunction

	(source "(let [s (/ (* js/Math.PI 2) N)\n       azs (range 0 (* N s) s)]\n  [azs (vec (map #(concat (position-js c-lambda c-phi radr %) [hgt]) azs))])")
	(title "azimuths&points [[c-lambda c-phi] radr hgt N]"))

([CesiumBase_Class40002] of  CloVar

	(source "(volatile! \n  {:status :init\n    :steps 24\n    :ring []\n    :headings []\n    :next 0\n    :center nil\n    :radius-m 4000\n    :step-sec 2})")
	(title "ORBIT"))

([CesiumBase_Class50000] of  CloFunction

	(source "(cond \n  (> az js/Math.PI) (- az (* 2 js/Math.PI))\n  (< az (- js/Math.PI)) (+ az (* 2 js/Math.PI))\n  true az)")
	(title "normaz [az]"))

([CesiumBase_Class60000] of  CloFunction

	(source "(let [js (.replaceAll js \"\\\\n\" \"\")\n       evt (str \"event: js\\ndata: \" js \"\\n\\n\")]\n  (put! EVT-CHAN evt))")
	(title "send-js [js]"))

([CesiumBase_Class60001] of  CloVar

	(source "(js/Cesium.KmlDataSource. \n  #js{:camera CAMERA\n         :canvas  CANVAS})")
	(title "KML-DS"))

([CesiumBase_Class60005] of  CloFunction

	(source "(let [kml (.replaceAll kml \"\\\\n\" \"\")\n       evt (str \"event: kml\\ndata: \" kml \"\\n\\n\")]\n  (put! EVT-CHAN evt))")
	(title "send-kml [kml]"))

([CesiumBase_Class70000] of  CloFunction

	(source "(cond\n  (nil? obj)\n  \"null\"\n  (string? obj)\n  (str \"\\\"\" obj \"\\\"\")\n  (or (number? obj) (symbol? obj) (= obj true) (= obj false))\n  (str obj)\n  (map? obj)\n  (apply str (concat [\"{\"] (interpose \",\" (for [[k v] obj] (str (name k) \":\" (clj->js-str v)))) [\"}\"]))\n  (or (vector? obj) (list? obj))\n  (apply str (concat [\"[\"] (interpose \",\" (map clj->js-str obj)) [\"]\"]))\n  true\n  \"\")")
	(title "clj->js-str [obj]"))

([CesiumBase_Class70003] of  CloFunction

	(source "(let [[func & args] fcl\n        func (.replace (str func) \"/\" \".\")\n        func (.replace func \"-\" \"_\")\n        args (map clj->js-str args)\n        args (interpose \",\" args)]\n  (apply str (concat [func \"(\"] args [\")\"])))")
	(title "clj-funcall->js-str [fcl]"))

([CesiumBase_Class70019] of  CloFunction

	(source "(let [pos (js/Cesium.Cartesian3.fromDegrees. longitude latitude height)\n       orient (js/Cesium.HeadingPitchRoll.fromDegrees heading pitch roll)\n       fvw (clj->js {:destination pos\n                          :orientation {:heading (.-heading orient)\n                                               :pitch (.-pitch orient)\n                                               :roll (.-roll orient)}})]\n  (.flyTo camera fvw)\n  fvw)")
	(title "camera-fly [camera longitude latitude height heading pitch roll]"))

([CesiumBase_Class80000] of  CloFunction

	(source "(let [js (clj-funcall->js-str fcl)\n       evt (str \"event: js\\ndata: \" js \"\\n\\n\")]\n  (put! EVT-CHAN evt))")
	(title "send-clj-funcall [fcl]"))

([CesiumBase_Class90000] of  CloFunction

	(source "(loop [[[lo1 la1 h1][lo2 la2 h2] :as lst] lolahs elt 0 slolahs [[0 lo1 la1 h1]]]\n  (if (some? h2)\n    (let [rsec (Math/toRadians (/ knots 60 3600))\n           dist (func-spherical-distance\n                    (Math/toRadians la1)\n                    (Math/toRadians lo1)\n                    (Math/toRadians la2)\n                    (Math/toRadians lo2))\n           time (int (/ dist rsec))\n           elt (+ elt time)]\n      (recur (rest lst) elt (conj slolahs [elt lo2 la2 h2])))\n    [slolahs elt]))")
	(title "lolah->slolah [lolahs knots func-spherical-distance]"))

([CesiumBase_Class90001] of  CloFunction

	(source "(let [pdiff (Math/sin (/ (- phi phi1) 2.0))\n       ldiff (Math/sin (/ (- lambda lambda0) 2.0))\n       rval (Math/sqrt (+ (* pdiff pdiff) (* (Math/cos phi1) (Math/cos phi) (* ldiff ldiff))))]\n  (* 2.0 (Math/asin rval)))")
	(title "sphericalDistance ^double [^double phi1 ^double lambda0 ^double phi ^double lambda]"))

([CesiumServer_Class10001] of  CloFunction

	(source "(let [ee (deref (future (pump-out-events)))\n       resp (if (seq ee)\n                 (apply str ee)\n                 \"\")]\n  (-> (r/response resp)\n         (r/header \"Access-Control-Allow-Origin\" \"*\")\n         (r/header \"Content-Type\" \"text/event-stream;charset=utf-8\")))")
	(title "event-response []"))

([CesiumServer_Class10002] of  CloVar

	(source "(defonce EVT-CHAN (chan))")
	(title "defonceEVT-CHAN"))

([CesiumServer_Class10003] of  CloFunction

	(source "(loop [[bit ch] (alts!! [EVT-CHAN] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [EVT-CHAN] :default :none) (conj bits bit))))")
	(title "pump-out-events []"))

([CesiumServer_Class10004] of  CloFunction

	(source "(let [czml (.replaceAll czml \"\\\\n\" \"\")\n       evt (str \"event: czml\\ndata: \" czml \"\\n\\n\")]\n  (put! EVT-CHAN evt))")
	(title "send-czml [czml]"))

([CesiumServer_Class10005] of  CloVar

	(source "\"{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\"}\"")
	(title "DOC"))

([CesiumWorshop_Class10003] of  CloProgram

	(cloFunctions
		[CesiumBase_Class70000]
		[CesiumBase_Class70003]
		[CesiumServer_Class10004]
		[CesiumBase_Class60005]
		[CesiumBase_Class60000]
		[CesiumBase_Class80000]
		[CesiumBase_Class110007]
		[CesiumBase_Class110000]
		[CesiumServer_Class10003]
		[CesiumServer_Class10001]
		[CesiumBase_Class120001]
		[CesiumWorshop_Class10005]
		[CesiumWorshop_Class10010]
		[CesiumWorshop_Class10011]
		[CesiumBase_Class120002]
		[CesiumBase_Class140008])
	(cloNamespace [CesiumWorshop_Class10004])
	(cloVars
		[CesiumBase_Class120000]
		[CesiumWorshop_Class10007]
		[CesiumWorshop_Class10009]
		[CesiumServer_Class10002]
		[CesiumServer_Class10005])
	(title "Cesium Server"))

([CesiumWorshop_Class10004] of  CloNamespace

	(source "(:use protege.core)\n(:require [ring.adapter.jetty :as jetty]\n              [ring.util.response :as r]\n              [compojure.core :refer [defroutes GET]]\n              [compojure.handler :as handler]\n              [compojure.route :as route]\n              [clojure.core.async :refer [chan alts!! put!]]\n              [czml.generator :refer :all])\n(:import java.awt.Desktop\n             java.net.URI)")
	(title "cesium.server"))

([CesiumWorshop_Class10005] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (slurp (find-page)))\n  (GET \"/event\" [] (event-response))\n  (route/files \"/\" (do (println [:ROOT ROOT]) {:root ROOT}))\n  (route/resources \"/\")\n  (route/not-found \"Cesium Server: Not Found!\"))\n\n(defonce APP\n  (handler/site app-routes))")
	(title "init-server []"))

([CesiumWorshop_Class10007] of  CloVar

	(source "(str (System/getProperty \"user.dir\") \"/resources/public/\")")
	(title "ROOT"))

([CesiumWorshop_Class10009] of  CloVar

	(source "nil")
	(title "SERV"))

([CesiumWorshop_Class10010] of  CloFunction

	(source "([]\n  (if (nil? SERV)\n    (init-server))\n  (def SERV (jetty/run-jetty APP {:port PORT :join? false})))\n([hm inst]\n  (start-server))")
	(title "start-server"))

([CesiumWorshop_Class10011] of  CloFunction

	(source "([]\n  (when-let [serv SERV]\n    (.stop serv)\n    (def SERV nil)\n    (println \"Server stopped!\")))\n([hm inst]\n  (stop-server))")
	(title "stop-server"))
